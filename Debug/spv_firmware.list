
spv_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004814  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004a0c  08004a0c  00014a0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000000  08004a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000019f8  200001f0  08004c88  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001be8  08004c88  00021be8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022777  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000479f  00000000  00000000  00042995  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000da71  00000000  00000000  00047134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000012f8  00000000  00000000  00054ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000016a0  00000000  00000000  00055ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009ec3  00000000  00000000  00057540  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006d8d  00000000  00000000  00061403  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00068190  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003770  00000000  00000000  0006820c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001f0 	.word	0x200001f0
 8000214:	00000000 	.word	0x00000000
 8000218:	080049f4 	.word	0x080049f4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001f4 	.word	0x200001f4
 8000234:	080049f4 	.word	0x080049f4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b97a 	b.w	8000554 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	468c      	mov	ip, r1
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	9e08      	ldr	r6, [sp, #32]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d151      	bne.n	800032c <__udivmoddi4+0xb4>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d96d      	bls.n	800036a <__udivmoddi4+0xf2>
 800028e:	fab2 fe82 	clz	lr, r2
 8000292:	f1be 0f00 	cmp.w	lr, #0
 8000296:	d00b      	beq.n	80002b0 <__udivmoddi4+0x38>
 8000298:	f1ce 0c20 	rsb	ip, lr, #32
 800029c:	fa01 f50e 	lsl.w	r5, r1, lr
 80002a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002a4:	fa02 f70e 	lsl.w	r7, r2, lr
 80002a8:	ea4c 0c05 	orr.w	ip, ip, r5
 80002ac:	fa00 f40e 	lsl.w	r4, r0, lr
 80002b0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	fbbc f8fa 	udiv	r8, ip, sl
 80002ba:	fa1f f987 	uxth.w	r9, r7
 80002be:	fb0a cc18 	mls	ip, sl, r8, ip
 80002c2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002c6:	fb08 f309 	mul.w	r3, r8, r9
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x6c>
 80002ce:	19ed      	adds	r5, r5, r7
 80002d0:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002d4:	f080 8123 	bcs.w	800051e <__udivmoddi4+0x2a6>
 80002d8:	42ab      	cmp	r3, r5
 80002da:	f240 8120 	bls.w	800051e <__udivmoddi4+0x2a6>
 80002de:	f1a8 0802 	sub.w	r8, r8, #2
 80002e2:	443d      	add	r5, r7
 80002e4:	1aed      	subs	r5, r5, r3
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002ec:	fb0a 5510 	mls	r5, sl, r0, r5
 80002f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f4:	fb00 f909 	mul.w	r9, r0, r9
 80002f8:	45a1      	cmp	r9, r4
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x98>
 80002fc:	19e4      	adds	r4, r4, r7
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	f080 810a 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000306:	45a1      	cmp	r9, r4
 8000308:	f240 8107 	bls.w	800051a <__udivmoddi4+0x2a2>
 800030c:	3802      	subs	r0, #2
 800030e:	443c      	add	r4, r7
 8000310:	eba4 0409 	sub.w	r4, r4, r9
 8000314:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000318:	2100      	movs	r1, #0
 800031a:	2e00      	cmp	r6, #0
 800031c:	d061      	beq.n	80003e2 <__udivmoddi4+0x16a>
 800031e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000322:	2300      	movs	r3, #0
 8000324:	6034      	str	r4, [r6, #0]
 8000326:	6073      	str	r3, [r6, #4]
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	428b      	cmp	r3, r1
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0xc8>
 8000330:	2e00      	cmp	r6, #0
 8000332:	d054      	beq.n	80003de <__udivmoddi4+0x166>
 8000334:	2100      	movs	r1, #0
 8000336:	e886 0021 	stmia.w	r6, {r0, r5}
 800033a:	4608      	mov	r0, r1
 800033c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000340:	fab3 f183 	clz	r1, r3
 8000344:	2900      	cmp	r1, #0
 8000346:	f040 808e 	bne.w	8000466 <__udivmoddi4+0x1ee>
 800034a:	42ab      	cmp	r3, r5
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xdc>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80fa 	bhi.w	8000548 <__udivmoddi4+0x2d0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb65 0503 	sbc.w	r5, r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	46ac      	mov	ip, r5
 800035e:	2e00      	cmp	r6, #0
 8000360:	d03f      	beq.n	80003e2 <__udivmoddi4+0x16a>
 8000362:	e886 1010 	stmia.w	r6, {r4, ip}
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	b912      	cbnz	r2, 8000372 <__udivmoddi4+0xfa>
 800036c:	2701      	movs	r7, #1
 800036e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000372:	fab7 fe87 	clz	lr, r7
 8000376:	f1be 0f00 	cmp.w	lr, #0
 800037a:	d134      	bne.n	80003e6 <__udivmoddi4+0x16e>
 800037c:	1beb      	subs	r3, r5, r7
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	2101      	movs	r1, #1
 8000386:	fbb3 f8f2 	udiv	r8, r3, r2
 800038a:	0c25      	lsrs	r5, r4, #16
 800038c:	fb02 3318 	mls	r3, r2, r8, r3
 8000390:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000394:	fb0c f308 	mul.w	r3, ip, r8
 8000398:	42ab      	cmp	r3, r5
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x134>
 800039c:	19ed      	adds	r5, r5, r7
 800039e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x132>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	f200 80d1 	bhi.w	800054c <__udivmoddi4+0x2d4>
 80003aa:	4680      	mov	r8, r0
 80003ac:	1aed      	subs	r5, r5, r3
 80003ae:	b2a3      	uxth	r3, r4
 80003b0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003b4:	fb02 5510 	mls	r5, r2, r0, r5
 80003b8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003bc:	fb0c fc00 	mul.w	ip, ip, r0
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x15c>
 80003c4:	19e4      	adds	r4, r4, r7
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x15a>
 80003cc:	45a4      	cmp	ip, r4
 80003ce:	f200 80b8 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003d2:	4618      	mov	r0, r3
 80003d4:	eba4 040c 	sub.w	r4, r4, ip
 80003d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003dc:	e79d      	b.n	800031a <__udivmoddi4+0xa2>
 80003de:	4631      	mov	r1, r6
 80003e0:	4630      	mov	r0, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	f1ce 0420 	rsb	r4, lr, #32
 80003ea:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ee:	fa07 f70e 	lsl.w	r7, r7, lr
 80003f2:	fa20 f804 	lsr.w	r8, r0, r4
 80003f6:	0c3a      	lsrs	r2, r7, #16
 80003f8:	fa25 f404 	lsr.w	r4, r5, r4
 80003fc:	ea48 0803 	orr.w	r8, r8, r3
 8000400:	fbb4 f1f2 	udiv	r1, r4, r2
 8000404:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000408:	fb02 4411 	mls	r4, r2, r1, r4
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000414:	fb01 f30c 	mul.w	r3, r1, ip
 8000418:	42ab      	cmp	r3, r5
 800041a:	fa00 f40e 	lsl.w	r4, r0, lr
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x1bc>
 8000420:	19ed      	adds	r5, r5, r7
 8000422:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000426:	f080 808a 	bcs.w	800053e <__udivmoddi4+0x2c6>
 800042a:	42ab      	cmp	r3, r5
 800042c:	f240 8087 	bls.w	800053e <__udivmoddi4+0x2c6>
 8000430:	3902      	subs	r1, #2
 8000432:	443d      	add	r5, r7
 8000434:	1aeb      	subs	r3, r5, r3
 8000436:	fa1f f588 	uxth.w	r5, r8
 800043a:	fbb3 f0f2 	udiv	r0, r3, r2
 800043e:	fb02 3310 	mls	r3, r2, r0, r3
 8000442:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000446:	fb00 f30c 	mul.w	r3, r0, ip
 800044a:	42ab      	cmp	r3, r5
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x1e6>
 800044e:	19ed      	adds	r5, r5, r7
 8000450:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000454:	d26f      	bcs.n	8000536 <__udivmoddi4+0x2be>
 8000456:	42ab      	cmp	r3, r5
 8000458:	d96d      	bls.n	8000536 <__udivmoddi4+0x2be>
 800045a:	3802      	subs	r0, #2
 800045c:	443d      	add	r5, r7
 800045e:	1aeb      	subs	r3, r5, r3
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	e78f      	b.n	8000386 <__udivmoddi4+0x10e>
 8000466:	f1c1 0720 	rsb	r7, r1, #32
 800046a:	fa22 f807 	lsr.w	r8, r2, r7
 800046e:	408b      	lsls	r3, r1
 8000470:	fa05 f401 	lsl.w	r4, r5, r1
 8000474:	ea48 0303 	orr.w	r3, r8, r3
 8000478:	fa20 fe07 	lsr.w	lr, r0, r7
 800047c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000480:	40fd      	lsrs	r5, r7
 8000482:	ea4e 0e04 	orr.w	lr, lr, r4
 8000486:	fbb5 f9fc 	udiv	r9, r5, ip
 800048a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800048e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000492:	fa1f f883 	uxth.w	r8, r3
 8000496:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800049a:	fb09 f408 	mul.w	r4, r9, r8
 800049e:	42ac      	cmp	r4, r5
 80004a0:	fa02 f201 	lsl.w	r2, r2, r1
 80004a4:	fa00 fa01 	lsl.w	sl, r0, r1
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x244>
 80004aa:	18ed      	adds	r5, r5, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	d243      	bcs.n	800053a <__udivmoddi4+0x2c2>
 80004b2:	42ac      	cmp	r4, r5
 80004b4:	d941      	bls.n	800053a <__udivmoddi4+0x2c2>
 80004b6:	f1a9 0902 	sub.w	r9, r9, #2
 80004ba:	441d      	add	r5, r3
 80004bc:	1b2d      	subs	r5, r5, r4
 80004be:	fa1f fe8e 	uxth.w	lr, lr
 80004c2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004c6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004ce:	fb00 f808 	mul.w	r8, r0, r8
 80004d2:	45a0      	cmp	r8, r4
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x26e>
 80004d6:	18e4      	adds	r4, r4, r3
 80004d8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80004dc:	d229      	bcs.n	8000532 <__udivmoddi4+0x2ba>
 80004de:	45a0      	cmp	r8, r4
 80004e0:	d927      	bls.n	8000532 <__udivmoddi4+0x2ba>
 80004e2:	3802      	subs	r0, #2
 80004e4:	441c      	add	r4, r3
 80004e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ea:	eba4 0408 	sub.w	r4, r4, r8
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	454c      	cmp	r4, r9
 80004f4:	46c6      	mov	lr, r8
 80004f6:	464d      	mov	r5, r9
 80004f8:	d315      	bcc.n	8000526 <__udivmoddi4+0x2ae>
 80004fa:	d012      	beq.n	8000522 <__udivmoddi4+0x2aa>
 80004fc:	b156      	cbz	r6, 8000514 <__udivmoddi4+0x29c>
 80004fe:	ebba 030e 	subs.w	r3, sl, lr
 8000502:	eb64 0405 	sbc.w	r4, r4, r5
 8000506:	fa04 f707 	lsl.w	r7, r4, r7
 800050a:	40cb      	lsrs	r3, r1
 800050c:	431f      	orrs	r7, r3
 800050e:	40cc      	lsrs	r4, r1
 8000510:	6037      	str	r7, [r6, #0]
 8000512:	6074      	str	r4, [r6, #4]
 8000514:	2100      	movs	r1, #0
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	4618      	mov	r0, r3
 800051c:	e6f8      	b.n	8000310 <__udivmoddi4+0x98>
 800051e:	4690      	mov	r8, r2
 8000520:	e6e0      	b.n	80002e4 <__udivmoddi4+0x6c>
 8000522:	45c2      	cmp	sl, r8
 8000524:	d2ea      	bcs.n	80004fc <__udivmoddi4+0x284>
 8000526:	ebb8 0e02 	subs.w	lr, r8, r2
 800052a:	eb69 0503 	sbc.w	r5, r9, r3
 800052e:	3801      	subs	r0, #1
 8000530:	e7e4      	b.n	80004fc <__udivmoddi4+0x284>
 8000532:	4628      	mov	r0, r5
 8000534:	e7d7      	b.n	80004e6 <__udivmoddi4+0x26e>
 8000536:	4640      	mov	r0, r8
 8000538:	e791      	b.n	800045e <__udivmoddi4+0x1e6>
 800053a:	4681      	mov	r9, r0
 800053c:	e7be      	b.n	80004bc <__udivmoddi4+0x244>
 800053e:	4601      	mov	r1, r0
 8000540:	e778      	b.n	8000434 <__udivmoddi4+0x1bc>
 8000542:	3802      	subs	r0, #2
 8000544:	443c      	add	r4, r7
 8000546:	e745      	b.n	80003d4 <__udivmoddi4+0x15c>
 8000548:	4608      	mov	r0, r1
 800054a:	e708      	b.n	800035e <__udivmoddi4+0xe6>
 800054c:	f1a8 0802 	sub.w	r8, r8, #2
 8000550:	443d      	add	r5, r7
 8000552:	e72b      	b.n	80003ac <__udivmoddi4+0x134>

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <HAL_InitTick+0x3c>)
{
 800055c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_InitTick+0x40>)
 8000560:	7818      	ldrb	r0, [r3, #0]
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	fbb3 f3f0 	udiv	r3, r3, r0
 800056a:	6810      	ldr	r0, [r2, #0]
 800056c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000570:	f000 f89e 	bl	80006b0 <HAL_SYSTICK_Config>
 8000574:	4604      	mov	r4, r0
 8000576:	b958      	cbnz	r0, 8000590 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000578:	2d0f      	cmp	r5, #15
 800057a:	d809      	bhi.n	8000590 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	4602      	mov	r2, r0
 800057e:	4629      	mov	r1, r5
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	f000 f84e 	bl	8000624 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <HAL_InitTick+0x44>)
 800058a:	4620      	mov	r0, r4
 800058c:	601d      	str	r5, [r3, #0]
 800058e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000590:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000592:	bd38      	pop	{r3, r4, r5, pc}
 8000594:	20000000 	.word	0x20000000
 8000598:	20000118 	.word	0x20000118
 800059c:	20000004 	.word	0x20000004

080005a0 <HAL_Init>:
{
 80005a0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a2:	2003      	movs	r0, #3
 80005a4:	f000 f82c 	bl	8000600 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ffd5 	bl	8000558 <HAL_InitTick>
  HAL_MspInit();
 80005ae:	f003 fd5b 	bl	8004068 <HAL_MspInit>
}
 80005b2:	2000      	movs	r0, #0
 80005b4:	bd08      	pop	{r3, pc}
	...

080005b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005b8:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <HAL_IncTick+0x10>)
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <HAL_IncTick+0x14>)
 80005bc:	6811      	ldr	r1, [r2, #0]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	440b      	add	r3, r1
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	2000021c 	.word	0x2000021c
 80005cc:	20000000 	.word	0x20000000

080005d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <HAL_GetTick+0x8>)
 80005d2:	6818      	ldr	r0, [r3, #0]
}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000021c 	.word	0x2000021c

080005dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005dc:	b538      	push	{r3, r4, r5, lr}
 80005de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005e0:	f7ff fff6 	bl	80005d0 <HAL_GetTick>
 80005e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005e8:	bf1e      	ittt	ne
 80005ea:	4b04      	ldrne	r3, [pc, #16]	; (80005fc <HAL_Delay+0x20>)
 80005ec:	781b      	ldrbne	r3, [r3, #0]
 80005ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	1b40      	subs	r0, r0, r5
 80005f6:	4284      	cmp	r4, r0
 80005f8:	d8fa      	bhi.n	80005f0 <HAL_Delay+0x14>
  {
  }
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000000 	.word	0x20000000

08000600 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000602:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000606:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800060e:	041b      	lsls	r3, r3, #16
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800061a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800061c:	60d3      	str	r3, [r2, #12]
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000626:	b530      	push	{r4, r5, lr}
 8000628:	68dc      	ldr	r4, [r3, #12]
 800062a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000634:	2b04      	cmp	r3, #4
 8000636:	bf28      	it	cs
 8000638:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000640:	bf8c      	ite	hi
 8000642:	3c03      	subhi	r4, #3
 8000644:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000646:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800064a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000650:	ea01 0103 	and.w	r1, r1, r3
 8000654:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000658:	fa05 f404 	lsl.w	r4, r5, r4
 800065c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8000660:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	ea42 0201 	orr.w	r2, r2, r1
 8000668:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 800066c:	db07      	blt.n	800067e <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000678:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800067c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	f000 000f 	and.w	r0, r0, #15
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	4b02      	ldr	r3, [pc, #8]	; (8000690 <HAL_NVIC_SetPriority+0x6c>)
 8000686:	541a      	strb	r2, [r3, r0]
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	e000ed14 	.word	0xe000ed14

08000694 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000694:	2800      	cmp	r0, #0
 8000696:	db08      	blt.n	80006aa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000698:	0942      	lsrs	r2, r0, #5
 800069a:	2301      	movs	r3, #1
 800069c:	f000 001f 	and.w	r0, r0, #31
 80006a0:	fa03 f000 	lsl.w	r0, r3, r0
 80006a4:	4b01      	ldr	r3, [pc, #4]	; (80006ac <HAL_NVIC_EnableIRQ+0x18>)
 80006a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006aa:	4770      	bx	lr
 80006ac:	e000e100 	.word	0xe000e100

080006b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b0:	3801      	subs	r0, #1
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d20a      	bcs.n	80006ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	21f0      	movs	r1, #240	; 0xf0
 80006bc:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006be:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e010 	.word	0xe000e010
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e0:	680b      	ldr	r3, [r1, #0]
{
 80006e2:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80008a8 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e8:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80006ea:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006ec:	4a6c      	ldr	r2, [pc, #432]	; (80008a0 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006ee:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80008ac <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80006f2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006f6:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80006f8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006fc:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000700:	45b6      	cmp	lr, r6
 8000702:	f040 80b3 	bne.w	800086c <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000706:	684c      	ldr	r4, [r1, #4]
 8000708:	f024 0710 	bic.w	r7, r4, #16
 800070c:	2f02      	cmp	r7, #2
 800070e:	d116      	bne.n	800073e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000710:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000714:	f003 0b07 	and.w	fp, r3, #7
 8000718:	f04f 0c0f 	mov.w	ip, #15
 800071c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000720:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000724:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000728:	fa0c fc0b 	lsl.w	ip, ip, fp
 800072c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000730:	690d      	ldr	r5, [r1, #16]
 8000732:	fa05 f50b 	lsl.w	r5, r5, fp
 8000736:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800073a:	f8ca 5020 	str.w	r5, [sl, #32]
 800073e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000742:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000744:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000748:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800074c:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000750:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000752:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000756:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000758:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800075a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800075e:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000762:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000766:	d811      	bhi.n	800078c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000768:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800076a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800076e:	68cf      	ldr	r7, [r1, #12]
 8000770:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000774:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000778:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800077a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800077c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000780:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000784:	409f      	lsls	r7, r3
 8000786:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800078a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800078c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800078e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000790:	688f      	ldr	r7, [r1, #8]
 8000792:	fa07 f70a 	lsl.w	r7, r7, sl
 8000796:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000798:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800079a:	00e5      	lsls	r5, r4, #3
 800079c:	d566      	bpl.n	800086c <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80007a2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007a6:	f003 0e03 	and.w	lr, r3, #3
 80007aa:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80007b2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007b6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80007be:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80007c2:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80007c6:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80007ca:	9503      	str	r5, [sp, #12]
 80007cc:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007ce:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80007d2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007d6:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007da:	4d32      	ldr	r5, [pc, #200]	; (80008a4 <HAL_GPIO_Init+0x1c8>)
 80007dc:	42a8      	cmp	r0, r5
 80007de:	d04c      	beq.n	800087a <HAL_GPIO_Init+0x19e>
 80007e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e4:	42a8      	cmp	r0, r5
 80007e6:	d04a      	beq.n	800087e <HAL_GPIO_Init+0x1a2>
 80007e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ec:	42a8      	cmp	r0, r5
 80007ee:	d048      	beq.n	8000882 <HAL_GPIO_Init+0x1a6>
 80007f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f4:	42a8      	cmp	r0, r5
 80007f6:	d046      	beq.n	8000886 <HAL_GPIO_Init+0x1aa>
 80007f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007fc:	42a8      	cmp	r0, r5
 80007fe:	d044      	beq.n	800088a <HAL_GPIO_Init+0x1ae>
 8000800:	4548      	cmp	r0, r9
 8000802:	d044      	beq.n	800088e <HAL_GPIO_Init+0x1b2>
 8000804:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000808:	42a8      	cmp	r0, r5
 800080a:	d042      	beq.n	8000892 <HAL_GPIO_Init+0x1b6>
 800080c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000810:	42a8      	cmp	r0, r5
 8000812:	d040      	beq.n	8000896 <HAL_GPIO_Init+0x1ba>
 8000814:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000818:	42a8      	cmp	r0, r5
 800081a:	d03e      	beq.n	800089a <HAL_GPIO_Init+0x1be>
 800081c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000820:	42a8      	cmp	r0, r5
 8000822:	bf14      	ite	ne
 8000824:	250a      	movne	r5, #10
 8000826:	2509      	moveq	r5, #9
 8000828:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800082c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000830:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000834:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000836:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 800083a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800083c:	bf0c      	ite	eq
 800083e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000840:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000842:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000846:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000848:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800084a:	bf0c      	ite	eq
 800084c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800084e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000850:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000854:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000856:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000858:	bf0c      	ite	eq
 800085a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800085c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800085e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000860:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000862:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000864:	bf54      	ite	pl
 8000866:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000868:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800086a:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800086c:	3301      	adds	r3, #1
 800086e:	2b10      	cmp	r3, #16
 8000870:	f47f af3f 	bne.w	80006f2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000874:	b005      	add	sp, #20
 8000876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800087a:	2500      	movs	r5, #0
 800087c:	e7d4      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 800087e:	2501      	movs	r5, #1
 8000880:	e7d2      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 8000882:	2502      	movs	r5, #2
 8000884:	e7d0      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 8000886:	2503      	movs	r5, #3
 8000888:	e7ce      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 800088a:	2504      	movs	r5, #4
 800088c:	e7cc      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 800088e:	2505      	movs	r5, #5
 8000890:	e7ca      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 8000892:	2506      	movs	r5, #6
 8000894:	e7c8      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 8000896:	2507      	movs	r5, #7
 8000898:	e7c6      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 800089a:	2508      	movs	r5, #8
 800089c:	e7c4      	b.n	8000828 <HAL_GPIO_Init+0x14c>
 800089e:	bf00      	nop
 80008a0:	40013c00 	.word	0x40013c00
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40021400 	.word	0x40021400

080008b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008b0:	b10a      	cbz	r2, 80008b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80008b2:	6181      	str	r1, [r0, #24]
 80008b4:	4770      	bx	lr
 80008b6:	0409      	lsls	r1, r1, #16
 80008b8:	e7fb      	b.n	80008b2 <HAL_GPIO_WritePin+0x2>

080008ba <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80008ba:	6943      	ldr	r3, [r0, #20]
 80008bc:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80008c0:	bf08      	it	eq
 80008c2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80008c4:	6181      	str	r1, [r0, #24]
 80008c6:	4770      	bx	lr

080008c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80008c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80008ca:	4604      	mov	r4, r0
{
 80008cc:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80008ce:	b330      	cbz	r0, 800091e <HAL_PCD_Init+0x56>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80008d0:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80008d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008d8:	b91b      	cbnz	r3, 80008e2 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80008da:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80008de:	f003 fd33 	bl	8004348 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80008e2:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80008e4:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008e6:	466e      	mov	r6, sp
 80008e8:	1d27      	adds	r7, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 80008ea:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80008ee:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 80008f2:	f002 f8cd 	bl	8002a90 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000902:	4625      	mov	r5, r4
 8000904:	e886 0003 	stmia.w	r6, {r0, r1}
 8000908:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800090c:	f855 0b10 	ldr.w	r0, [r5], #16
 8000910:	f002 f808 	bl	8002924 <USB_CoreInit>
 8000914:	4606      	mov	r6, r0
 8000916:	b120      	cbz	r0, 8000922 <HAL_PCD_Init+0x5a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000918:	2302      	movs	r3, #2
 800091a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800091e:	2501      	movs	r5, #1
 8000920:	e054      	b.n	80009cc <HAL_PCD_Init+0x104>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000922:	4601      	mov	r1, r0
 8000924:	6820      	ldr	r0, [r4, #0]
 8000926:	f002 f8b9 	bl	8002a9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800092a:	4630      	mov	r0, r6
 800092c:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000930:	261c      	movs	r6, #28
 8000932:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000936:	4601      	mov	r1, r0
 8000938:	b2c2      	uxtb	r2, r0
 800093a:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800093c:	4596      	cmp	lr, r2
 800093e:	d81b      	bhi.n	8000978 <HAL_PCD_Init+0xb0>
 8000940:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000942:	261c      	movs	r6, #28
 8000944:	4619      	mov	r1, r3
 8000946:	b2d8      	uxtb	r0, r3
 8000948:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800094a:	4586      	cmp	lr, r0
 800094c:	d822      	bhi.n	8000994 <HAL_PCD_Init+0xcc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800094e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000950:	466e      	mov	r6, sp
 8000952:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000956:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000958:	e895 0003 	ldmia.w	r5, {r0, r1}
 800095c:	e886 0003 	stmia.w	r6, {r0, r1}
 8000960:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000964:	6820      	ldr	r0, [r4, #0]
 8000966:	f002 f8db 	bl	8002b20 <USB_DevInit>
 800096a:	2301      	movs	r3, #1
 800096c:	4605      	mov	r5, r0
 800096e:	b300      	cbz	r0, 80009b2 <HAL_PCD_Init+0xea>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000970:	2202      	movs	r2, #2
 8000972:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000976:	e7d2      	b.n	800091e <HAL_PCD_Init+0x56>
    hpcd->IN_ep[i].is_in = 1U;
 8000978:	fb06 4302 	mla	r3, r6, r2, r4
 800097c:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000984:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000988:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800098c:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 800098e:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000990:	6519      	str	r1, [r3, #80]	; 0x50
 8000992:	e7d1      	b.n	8000938 <HAL_PCD_Init+0x70>
    hpcd->OUT_ep[i].is_in = 0U;
 8000994:	fb06 4200 	mla	r2, r6, r0, r4
 8000998:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 800099c:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80009a0:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80009a4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80009a8:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80009ac:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80009b0:	e7c9      	b.n	8000946 <HAL_PCD_Init+0x7e>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80009b2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80009b6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80009ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d102      	bne.n	80009c6 <HAL_PCD_Init+0xfe>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80009c0:	4620      	mov	r0, r4
 80009c2:	f000 fc50 	bl	8001266 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80009c6:	6820      	ldr	r0, [r4, #0]
 80009c8:	f002 fbda 	bl	8003180 <USB_DevDisconnect>

  return HAL_OK;
}
 80009cc:	4628      	mov	r0, r5
 80009ce:	b00b      	add	sp, #44	; 0x2c
 80009d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009d2 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80009d2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80009d6:	2b01      	cmp	r3, #1
{
 80009d8:	b510      	push	{r4, lr}
 80009da:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80009dc:	d00c      	beq.n	80009f8 <HAL_PCD_Start+0x26>
 80009de:	2301      	movs	r3, #1
 80009e0:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80009e4:	6800      	ldr	r0, [r0, #0]
 80009e6:	f002 fbbf 	bl	8003168 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80009ea:	6820      	ldr	r0, [r4, #0]
 80009ec:	f002 f84a 	bl	8002a84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80009f6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80009f8:	2002      	movs	r0, #2
}
 80009fa:	bd10      	pop	{r4, pc}

080009fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80009fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000a00:	6807      	ldr	r7, [r0, #0]
{
 8000a02:	b087      	sub	sp, #28
 8000a04:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum = 0U;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000a06:	4638      	mov	r0, r7
 8000a08:	f002 fbf5 	bl	80031f6 <USB_GetMode>
 8000a0c:	9002      	str	r0, [sp, #8]
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	f040 814c 	bne.w	8000cac <HAL_PCD_IRQHandler+0x2b0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000a14:	6820      	ldr	r0, [r4, #0]
 8000a16:	f002 fbbf 	bl	8003198 <USB_ReadInterrupts>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	f000 8146 	beq.w	8000cac <HAL_PCD_IRQHandler+0x2b0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000a20:	6820      	ldr	r0, [r4, #0]
 8000a22:	f002 fbb9 	bl	8003198 <USB_ReadInterrupts>
 8000a26:	0785      	lsls	r5, r0, #30
 8000a28:	d504      	bpl.n	8000a34 <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000a2a:	6822      	ldr	r2, [r4, #0]
 8000a2c:	6953      	ldr	r3, [r2, #20]
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	6153      	str	r3, [r2, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000a34:	6820      	ldr	r0, [r4, #0]
 8000a36:	f002 fbaf 	bl	8003198 <USB_ReadInterrupts>
 8000a3a:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8000a3e:	d00d      	beq.n	8000a5c <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000a40:	6820      	ldr	r0, [r4, #0]
 8000a42:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 8000a46:	f002 fbab 	bl	80031a0 <USB_ReadDevAllOutEpInterrupt>
 8000a4a:	46a0      	mov	r8, r4
 8000a4c:	4682      	mov	sl, r0
      epnum = 0U;
 8000a4e:	2500      	movs	r5, #0
 8000a50:	f8df b570 	ldr.w	fp, [pc, #1392]	; 8000fc4 <HAL_PCD_IRQHandler+0x5c8>

      while (ep_intr != 0U)
 8000a54:	f1ba 0f00 	cmp.w	sl, #0
 8000a58:	f040 812b 	bne.w	8000cb2 <HAL_PCD_IRQHandler+0x2b6>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000a5c:	6820      	ldr	r0, [r4, #0]
 8000a5e:	f002 fb9b 	bl	8003198 <USB_ReadInterrupts>
 8000a62:	0342      	lsls	r2, r0, #13
 8000a64:	d50b      	bpl.n	8000a7e <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000a66:	6820      	ldr	r0, [r4, #0]
 8000a68:	4626      	mov	r6, r4
 8000a6a:	f002 fba1 	bl	80031b0 <USB_ReadDevAllInEpInterrupt>
 8000a6e:	f507 6a10 	add.w	sl, r7, #2304	; 0x900
 8000a72:	4683      	mov	fp, r0

      epnum = 0U;
 8000a74:	2500      	movs	r5, #0

      while (ep_intr != 0U)
 8000a76:	f1bb 0f00 	cmp.w	fp, #0
 8000a7a:	f040 81cc 	bne.w	8000e16 <HAL_PCD_IRQHandler+0x41a>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000a7e:	6820      	ldr	r0, [r4, #0]
 8000a80:	f002 fb8a 	bl	8003198 <USB_ReadInterrupts>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	da15      	bge.n	8000ab4 <HAL_PCD_IRQHandler+0xb8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000a88:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8000a8c:	f023 0301 	bic.w	r3, r3, #1
 8000a90:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8000a94:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	f040 8257 	bne.w	8000f4c <HAL_PCD_IRQHandler+0x550>
      {
        hpcd->LPM_State = LPM_L0;
 8000a9e:	2100      	movs	r1, #0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000aa0:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8000aa2:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000aa6:	f003 fdab 	bl	8004600 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000aaa:	6822      	ldr	r2, [r4, #0]
 8000aac:	6953      	ldr	r3, [r2, #20]
 8000aae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000ab4:	6820      	ldr	r0, [r4, #0]
 8000ab6:	f002 fb6f 	bl	8003198 <USB_ReadInterrupts>
 8000aba:	0503      	lsls	r3, r0, #20
 8000abc:	d50b      	bpl.n	8000ad6 <HAL_PCD_IRQHandler+0xda>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000abe:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000ac2:	07de      	lsls	r6, r3, #31
 8000ac4:	d502      	bpl.n	8000acc <HAL_PCD_IRQHandler+0xd0>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	f003 fcb4 	bl	8004434 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000acc:	6822      	ldr	r2, [r4, #0]
 8000ace:	6953      	ldr	r3, [r2, #20]
 8000ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ad4:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8000ad6:	6820      	ldr	r0, [r4, #0]
 8000ad8:	f002 fb5e 	bl	8003198 <USB_ReadInterrupts>
 8000adc:	0100      	lsls	r0, r0, #4
 8000ade:	d514      	bpl.n	8000b0a <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8000ae0:	6823      	ldr	r3, [r4, #0]
 8000ae2:	695a      	ldr	r2, [r3, #20]
 8000ae4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000ae8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8000aea:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	f040 8230 	bne.w	8000f54 <HAL_PCD_IRQHandler+0x558>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8000af6:	2101      	movs	r1, #1

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000af8:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000afa:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8000afe:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000b02:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000b06:	f003 fd7b 	bl	8004600 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000b0a:	6820      	ldr	r0, [r4, #0]
 8000b0c:	f002 fb44 	bl	8003198 <USB_ReadInterrupts>
 8000b10:	04c1      	lsls	r1, r0, #19
 8000b12:	d535      	bpl.n	8000b80 <HAL_PCD_IRQHandler+0x184>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000b14:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8000b18:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000b1a:	2110      	movs	r1, #16
 8000b1c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000b1e:	f023 0301 	bic.w	r3, r3, #1
 8000b22:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000b24:	f001 ffd2 	bl	8002acc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b28:	6860      	ldr	r0, [r4, #4]
 8000b2a:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000b2e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b32:	9a02      	ldr	r2, [sp, #8]
 8000b34:	4282      	cmp	r2, r0
 8000b36:	f040 8211 	bne.w	8000f5c <HAL_PCD_IRQHandler+0x560>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000b3a:	69f3      	ldr	r3, [r6, #28]
 8000b3c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000b40:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8000b42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 821d 	beq.w	8000f84 <HAL_PCD_IRQHandler+0x588>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8000b4a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000b4e:	f043 030b 	orr.w	r3, r3, #11
 8000b52:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8000b56:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000b58:	f043 030b 	orr.w	r3, r3, #11
 8000b5c:	6473      	str	r3, [r6, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b5e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8000b62:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000b66:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8000b6c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b6e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8000b72:	f002 fb5f 	bl	8003234 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000b76:	6822      	ldr	r2, [r4, #0]
 8000b78:	6953      	ldr	r3, [r2, #20]
 8000b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000b80:	6820      	ldr	r0, [r4, #0]
 8000b82:	f002 fb09 	bl	8003198 <USB_ReadInterrupts>
 8000b86:	0482      	lsls	r2, r0, #18
 8000b88:	d519      	bpl.n	8000bbe <HAL_PCD_IRQHandler+0x1c2>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8000b8a:	6820      	ldr	r0, [r4, #0]
 8000b8c:	f002 fb37 	bl	80031fe <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000b90:	6820      	ldr	r0, [r4, #0]
 8000b92:	f002 f889 	bl	8002ca8 <USB_GetDevSpeed>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	f040 81ff 	bne.w	8000f9a <HAL_PCD_IRQHandler+0x59e>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 8000b9c:	60e0      	str	r0, [r4, #12]
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8000b9e:	6826      	ldr	r6, [r4, #0]
 8000ba0:	f000 fe14 	bl	80017cc <HAL_RCC_GetHCLKFreq>
 8000ba4:	7b22      	ldrb	r2, [r4, #12]
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	4630      	mov	r0, r6
 8000baa:	f001 fef7 	bl	800299c <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8000bae:	4620      	mov	r0, r4
 8000bb0:	f003 fc2d 	bl	800440e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000bb4:	6822      	ldr	r2, [r4, #0]
 8000bb6:	6953      	ldr	r3, [r2, #20]
 8000bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bbc:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000bbe:	6820      	ldr	r0, [r4, #0]
 8000bc0:	f002 faea 	bl	8003198 <USB_ReadInterrupts>
 8000bc4:	06c3      	lsls	r3, r0, #27
 8000bc6:	d52b      	bpl.n	8000c20 <HAL_PCD_IRQHandler+0x224>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bc8:	6822      	ldr	r2, [r4, #0]
 8000bca:	6993      	ldr	r3, [r2, #24]
 8000bcc:	f023 0310 	bic.w	r3, r3, #16
 8000bd0:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8000bd2:	6a3e      	ldr	r6, [r7, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000bd4:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000bd8:	f006 090f 	and.w	r9, r6, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	f040 81df 	bne.w	8000fa0 <HAL_PCD_IRQHandler+0x5a4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000be2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000be6:	421e      	tst	r6, r3
 8000be8:	d015      	beq.n	8000c16 <HAL_PCD_IRQHandler+0x21a>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000bea:	f04f 081c 	mov.w	r8, #28
 8000bee:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	fb08 4809 	mla	r8, r8, r9, r4
 8000bf8:	4632      	mov	r2, r6
 8000bfa:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8000bfe:	f002 fa3d 	bl	800307c <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000c02:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8000c06:	4433      	add	r3, r6
 8000c08:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000c0c:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 8000c10:	441e      	add	r6, r3
 8000c12:	f8c8 6214 	str.w	r6, [r8, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c16:	6822      	ldr	r2, [r4, #0]
 8000c18:	6993      	ldr	r3, [r2, #24]
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000c20:	6820      	ldr	r0, [r4, #0]
 8000c22:	f002 fab9 	bl	8003198 <USB_ReadInterrupts>
 8000c26:	0707      	lsls	r7, r0, #28
 8000c28:	d507      	bpl.n	8000c3a <HAL_PCD_IRQHandler+0x23e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f003 fbeb 	bl	8004406 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000c30:	6822      	ldr	r2, [r4, #0]
 8000c32:	6953      	ldr	r3, [r2, #20]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000c3a:	6820      	ldr	r0, [r4, #0]
 8000c3c:	f002 faac 	bl	8003198 <USB_ReadInterrupts>
 8000c40:	02c6      	lsls	r6, r0, #11
 8000c42:	d508      	bpl.n	8000c56 <HAL_PCD_IRQHandler+0x25a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8000c44:	b2e9      	uxtb	r1, r5
 8000c46:	4620      	mov	r0, r4
 8000c48:	f003 fc14 	bl	8004474 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000c4c:	6822      	ldr	r2, [r4, #0]
 8000c4e:	6953      	ldr	r3, [r2, #20]
 8000c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c54:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000c56:	6820      	ldr	r0, [r4, #0]
 8000c58:	f002 fa9e 	bl	8003198 <USB_ReadInterrupts>
 8000c5c:	0280      	lsls	r0, r0, #10
 8000c5e:	d508      	bpl.n	8000c72 <HAL_PCD_IRQHandler+0x276>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000c60:	b2e9      	uxtb	r1, r5
 8000c62:	4620      	mov	r0, r4
 8000c64:	f003 fc02 	bl	800446c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000c68:	6822      	ldr	r2, [r4, #0]
 8000c6a:	6953      	ldr	r3, [r2, #20]
 8000c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c70:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000c72:	6820      	ldr	r0, [r4, #0]
 8000c74:	f002 fa90 	bl	8003198 <USB_ReadInterrupts>
 8000c78:	0041      	lsls	r1, r0, #1
 8000c7a:	d507      	bpl.n	8000c8c <HAL_PCD_IRQHandler+0x290>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f003 fbfd 	bl	800447c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000c82:	6822      	ldr	r2, [r4, #0]
 8000c84:	6953      	ldr	r3, [r2, #20]
 8000c86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c8a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000c8c:	6820      	ldr	r0, [r4, #0]
 8000c8e:	f002 fa83 	bl	8003198 <USB_ReadInterrupts>
 8000c92:	0742      	lsls	r2, r0, #29
 8000c94:	d50a      	bpl.n	8000cac <HAL_PCD_IRQHandler+0x2b0>
    {
      temp = hpcd->Instance->GOTGINT;
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000c9a:	076b      	lsls	r3, r5, #29
 8000c9c:	d502      	bpl.n	8000ca4 <HAL_PCD_IRQHandler+0x2a8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f003 fbf0 	bl	8004484 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8000ca4:	6823      	ldr	r3, [r4, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4315      	orrs	r5, r2
 8000caa:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000cac:	b007      	add	sp, #28
 8000cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8000cb2:	f01a 0f01 	tst.w	sl, #1
 8000cb6:	f000 80a7 	beq.w	8000e08 <HAL_PCD_IRQHandler+0x40c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000cba:	b2ea      	uxtb	r2, r5
 8000cbc:	6820      	ldr	r0, [r4, #0]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	9203      	str	r2, [sp, #12]
 8000cc2:	f002 fa7d 	bl	80031c0 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000cc6:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000cca:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ccc:	9a03      	ldr	r2, [sp, #12]
 8000cce:	d04c      	beq.n	8000d6a <HAL_PCD_IRQHandler+0x36e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000cd0:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8000cd2:	6920      	ldr	r0, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000cd4:	60b3      	str	r3, [r6, #8]
  if (hpcd->Init.dma_enable == 1U)
 8000cd6:	2801      	cmp	r0, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000cd8:	6823      	ldr	r3, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8000cda:	f8d3 e040 	ldr.w	lr, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ce2:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8000ce6:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8000ce8:	d154      	bne.n	8000d94 <HAL_PCD_IRQHandler+0x398>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8000cea:	0708      	lsls	r0, r1, #28
 8000cec:	d514      	bpl.n	8000d18 <HAL_PCD_IRQHandler+0x31c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000cee:	45de      	cmp	lr, fp
 8000cf0:	d904      	bls.n	8000cfc <HAL_PCD_IRQHandler+0x300>
 8000cf2:	040a      	lsls	r2, r1, #16
 8000cf4:	d502      	bpl.n	8000cfc <HAL_PCD_IRQHandler+0x300>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000cf6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cfa:	609a      	str	r2, [r3, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	9303      	str	r3, [sp, #12]
 8000d00:	f003 fb6a 	bl	80043d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000d04:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000d08:	2101      	movs	r1, #1
 8000d0a:	6820      	ldr	r0, [r4, #0]
 8000d0c:	f002 fa92 	bl	8003234 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000d10:	2208      	movs	r2, #8
 8000d12:	9b03      	ldr	r3, [sp, #12]
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	e028      	b.n	8000d6a <HAL_PCD_IRQHandler+0x36e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8000d18:	0688      	lsls	r0, r1, #26
 8000d1a:	d501      	bpl.n	8000d20 <HAL_PCD_IRQHandler+0x324>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000d1c:	2220      	movs	r2, #32
 8000d1e:	e7f9      	b.n	8000d14 <HAL_PCD_IRQHandler+0x318>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8000d20:	f011 0f28 	tst.w	r1, #40	; 0x28
 8000d24:	d121      	bne.n	8000d6a <HAL_PCD_IRQHandler+0x36e>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000d26:	45de      	cmp	lr, fp
 8000d28:	d904      	bls.n	8000d34 <HAL_PCD_IRQHandler+0x338>
 8000d2a:	0409      	lsls	r1, r1, #16
 8000d2c:	d502      	bpl.n	8000d34 <HAL_PCD_IRQHandler+0x338>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000d2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d32:	e7ef      	b.n	8000d14 <HAL_PCD_IRQHandler+0x318>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000d34:	691b      	ldr	r3, [r3, #16]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000d36:	4620      	mov	r0, r4
          hpcd->OUT_ep[epnum].maxpacket -
 8000d38:	f8d8 1204 	ldr.w	r1, [r8, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8000d40:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8000d42:	f8c8 3214 	str.w	r3, [r8, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8000d46:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8000d4a:	4419      	add	r1, r3
 8000d4c:	f8c8 1208 	str.w	r1, [r8, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000d50:	4611      	mov	r1, r2
 8000d52:	f003 fb47 	bl	80043e4 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000d56:	b945      	cbnz	r5, 8000d6a <HAL_PCD_IRQHandler+0x36e>
 8000d58:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8000d5c:	b92b      	cbnz	r3, 8000d6a <HAL_PCD_IRQHandler+0x36e>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000d5e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000d62:	2101      	movs	r1, #1
 8000d64:	6820      	ldr	r0, [r4, #0]
 8000d66:	f002 fa65 	bl	8003234 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000d6a:	f019 0f08 	tst.w	r9, #8
 8000d6e:	d033      	beq.n	8000dd8 <HAL_PCD_IRQHandler+0x3dc>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d70:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8000d72:	6920      	ldr	r0, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8000d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8000d7a:	2801      	cmp	r0, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000d7c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8000d80:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8000d82:	d115      	bne.n	8000db0 <HAL_PCD_IRQHandler+0x3b4>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000d84:	455a      	cmp	r2, fp
 8000d86:	d916      	bls.n	8000db6 <HAL_PCD_IRQHandler+0x3ba>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8000d88:	0409      	lsls	r1, r1, #16
 8000d8a:	d514      	bpl.n	8000db6 <HAL_PCD_IRQHandler+0x3ba>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000d8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d90:	6099      	str	r1, [r3, #8]
 8000d92:	e010      	b.n	8000db6 <HAL_PCD_IRQHandler+0x3ba>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000d94:	488a      	ldr	r0, [pc, #552]	; (8000fc0 <HAL_PCD_IRQHandler+0x5c4>)
 8000d96:	4586      	cmp	lr, r0
 8000d98:	d105      	bne.n	8000da6 <HAL_PCD_IRQHandler+0x3aa>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8000d9a:	0408      	lsls	r0, r1, #16
 8000d9c:	d4c7      	bmi.n	8000d2e <HAL_PCD_IRQHandler+0x332>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000d9e:	0688      	lsls	r0, r1, #26
 8000da0:	d501      	bpl.n	8000da6 <HAL_PCD_IRQHandler+0x3aa>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000da2:	2120      	movs	r1, #32
 8000da4:	6099      	str	r1, [r3, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000da6:	4611      	mov	r1, r2
 8000da8:	4620      	mov	r0, r4
 8000daa:	f003 fb1b 	bl	80043e4 <HAL_PCD_DataOutStageCallback>
 8000dae:	e7dc      	b.n	8000d6a <HAL_PCD_IRQHandler+0x36e>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8000db0:	4883      	ldr	r0, [pc, #524]	; (8000fc0 <HAL_PCD_IRQHandler+0x5c4>)
 8000db2:	4282      	cmp	r2, r0
 8000db4:	d0e8      	beq.n	8000d88 <HAL_PCD_IRQHandler+0x38c>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8000db6:	4620      	mov	r0, r4
 8000db8:	9203      	str	r2, [sp, #12]
 8000dba:	f003 fb0d 	bl	80043d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8000dbe:	9a03      	ldr	r2, [sp, #12]
 8000dc0:	455a      	cmp	r2, fp
 8000dc2:	d907      	bls.n	8000dd4 <HAL_PCD_IRQHandler+0x3d8>
 8000dc4:	6921      	ldr	r1, [r4, #16]
 8000dc6:	2901      	cmp	r1, #1
 8000dc8:	d104      	bne.n	8000dd4 <HAL_PCD_IRQHandler+0x3d8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000dca:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000dce:	6820      	ldr	r0, [r4, #0]
 8000dd0:	f002 fa30 	bl	8003234 <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000dd8:	f019 0f10 	tst.w	r9, #16
 8000ddc:	d001      	beq.n	8000de2 <HAL_PCD_IRQHandler+0x3e6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000dde:	2310      	movs	r3, #16
 8000de0:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000de2:	f019 0f20 	tst.w	r9, #32
 8000de6:	d009      	beq.n	8000dfc <HAL_PCD_IRQHandler+0x400>
            if (hpcd->Init.dma_enable == 1U)
 8000de8:	6921      	ldr	r1, [r4, #16]
 8000dea:	2901      	cmp	r1, #1
 8000dec:	d104      	bne.n	8000df8 <HAL_PCD_IRQHandler+0x3fc>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000dee:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000df2:	6820      	ldr	r0, [r4, #0]
 8000df4:	f002 fa1e 	bl	8003234 <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000df8:	2320      	movs	r3, #32
 8000dfa:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000dfc:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8000e00:	d002      	beq.n	8000e08 <HAL_PCD_IRQHandler+0x40c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e06:	60b3      	str	r3, [r6, #8]
        epnum++;
 8000e08:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000e0a:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8000e0e:	3620      	adds	r6, #32
 8000e10:	f108 081c 	add.w	r8, r8, #28
 8000e14:	e61e      	b.n	8000a54 <HAL_PCD_IRQHandler+0x58>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000e16:	f01b 0f01 	tst.w	fp, #1
 8000e1a:	f000 8090 	beq.w	8000f3e <HAL_PCD_IRQHandler+0x542>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000e1e:	b2eb      	uxtb	r3, r5
 8000e20:	6820      	ldr	r0, [r4, #0]
 8000e22:	4619      	mov	r1, r3
 8000e24:	9303      	str	r3, [sp, #12]
 8000e26:	f002 f9d4 	bl	80031d2 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000e2a:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000e2e:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000e30:	d022      	beq.n	8000e78 <HAL_PCD_IRQHandler+0x47c>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000e32:	2001      	movs	r0, #1
 8000e34:	f005 020f 	and.w	r2, r5, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e38:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000e3c:	fa00 f202 	lsl.w	r2, r0, r2
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000e40:	9903      	ldr	r1, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e42:	ea23 0302 	bic.w	r3, r3, r2
 8000e46:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 8000e4a:	6923      	ldr	r3, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000e4c:	f8ca 0008 	str.w	r0, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000e50:	4283      	cmp	r3, r0
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000e52:	4620      	mov	r0, r4
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8000e54:	bf01      	itttt	eq
 8000e56:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8000e58:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8000e5a:	189b      	addeq	r3, r3, r2
 8000e5c:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000e5e:	f003 faca 	bl	80043f6 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000e62:	6921      	ldr	r1, [r4, #16]
 8000e64:	2901      	cmp	r1, #1
 8000e66:	d107      	bne.n	8000e78 <HAL_PCD_IRQHandler+0x47c>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000e68:	b935      	cbnz	r5, 8000e78 <HAL_PCD_IRQHandler+0x47c>
 8000e6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000e6c:	b923      	cbnz	r3, 8000e78 <HAL_PCD_IRQHandler+0x47c>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000e6e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000e72:	6820      	ldr	r0, [r4, #0]
 8000e74:	f002 f9de 	bl	8003234 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000e78:	f018 0f08 	tst.w	r8, #8
 8000e7c:	d002      	beq.n	8000e84 <HAL_PCD_IRQHandler+0x488>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000e7e:	2308      	movs	r3, #8
 8000e80:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000e84:	f018 0f10 	tst.w	r8, #16
 8000e88:	d002      	beq.n	8000e90 <HAL_PCD_IRQHandler+0x494>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000e8a:	2310      	movs	r3, #16
 8000e8c:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000e90:	f018 0f40 	tst.w	r8, #64	; 0x40
 8000e94:	d002      	beq.n	8000e9c <HAL_PCD_IRQHandler+0x4a0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000e96:	2340      	movs	r3, #64	; 0x40
 8000e98:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000e9c:	f018 0f02 	tst.w	r8, #2
 8000ea0:	d002      	beq.n	8000ea8 <HAL_PCD_IRQHandler+0x4ac>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000ea8:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000eac:	d047      	beq.n	8000f3e <HAL_PCD_IRQHandler+0x542>
  if (ep->xfer_count > ep->xfer_len)
 8000eae:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8000eb0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d843      	bhi.n	8000f3e <HAL_PCD_IRQHandler+0x542>
  len = ep->xfer_len - ep->xfer_count;
 8000eb6:	eba3 0802 	sub.w	r8, r3, r2
  len32b = (len + 3U) / 4U;
 8000eba:	6c73      	ldr	r3, [r6, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ebc:	6821      	ldr	r1, [r4, #0]
  len32b = (len + 3U) / 4U;
 8000ebe:	4598      	cmp	r8, r3
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ec0:	9104      	str	r1, [sp, #16]
  len32b = (len + 3U) / 4U;
 8000ec2:	bf28      	it	cs
 8000ec4:	4698      	movcs	r8, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000ec6:	f501 6310 	add.w	r3, r1, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000eca:	f108 0803 	add.w	r8, r8, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000ece:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8000ed2:	ea4f 0898 	mov.w	r8, r8, lsr #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000ed6:	9305      	str	r3, [sp, #20]
 8000ed8:	9b05      	ldr	r3, [sp, #20]
 8000eda:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	4543      	cmp	r3, r8
 8000ee2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000ee4:	d329      	bcc.n	8000f3a <HAL_PCD_IRQHandler+0x53e>
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d927      	bls.n	8000f3a <HAL_PCD_IRQHandler+0x53e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000eea:	b963      	cbnz	r3, 8000f06 <HAL_PCD_IRQHandler+0x50a>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000eec:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000eee:	f005 010f 	and.w	r1, r5, #15
 8000ef2:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000ef4:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000ef8:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000efc:	ea22 0201 	bic.w	r2, r2, r1
 8000f00:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8000f04:	e01b      	b.n	8000f3e <HAL_PCD_IRQHandler+0x542>
    len = ep->xfer_len - ep->xfer_count;
 8000f06:	eba3 0902 	sub.w	r9, r3, r2
 8000f0a:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8000f0c:	9a03      	ldr	r2, [sp, #12]
 8000f0e:	4599      	cmp	r9, r3
 8000f10:	9804      	ldr	r0, [sp, #16]
 8000f12:	bf28      	it	cs
 8000f14:	4699      	movcs	r9, r3
 8000f16:	7c23      	ldrb	r3, [r4, #16]
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	fa1f f389 	uxth.w	r3, r9
 8000f1e:	6cb1      	ldr	r1, [r6, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 8000f20:	f109 0803 	add.w	r8, r9, #3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8000f24:	f001 ffc2 	bl	8002eac <USB_WritePacket>
    ep->xfer_buff  += len;
 8000f28:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 8000f2a:	ea4f 0898 	mov.w	r8, r8, lsr #2
    ep->xfer_buff  += len;
 8000f2e:	444b      	add	r3, r9
 8000f30:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8000f32:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8000f34:	444b      	add	r3, r9
 8000f36:	6573      	str	r3, [r6, #84]	; 0x54
 8000f38:	e7ce      	b.n	8000ed8 <HAL_PCD_IRQHandler+0x4dc>
  if (ep->xfer_len <= ep->xfer_count)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d9d6      	bls.n	8000eec <HAL_PCD_IRQHandler+0x4f0>
        epnum++;
 8000f3e:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000f40:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8000f44:	361c      	adds	r6, #28
 8000f46:	f10a 0a20 	add.w	sl, sl, #32
 8000f4a:	e594      	b.n	8000a76 <HAL_PCD_IRQHandler+0x7a>
        HAL_PCD_ResumeCallback(hpcd);
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	f003 fa89 	bl	8004464 <HAL_PCD_ResumeCallback>
 8000f52:	e5aa      	b.n	8000aaa <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 8000f54:	4620      	mov	r0, r4
 8000f56:	f003 fa6d 	bl	8004434 <HAL_PCD_SuspendCallback>
 8000f5a:	e5d6      	b.n	8000b0a <HAL_PCD_IRQHandler+0x10e>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000f5c:	6099      	str	r1, [r3, #8]
 8000f5e:	3320      	adds	r3, #32
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8000f60:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8000f64:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000f68:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8000f6c:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8000f70:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8000f74:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000f78:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f7c:	9a02      	ldr	r2, [sp, #8]
 8000f7e:	3201      	adds	r2, #1
 8000f80:	9202      	str	r2, [sp, #8]
 8000f82:	e5d6      	b.n	8000b32 <HAL_PCD_IRQHandler+0x136>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8000f84:	6973      	ldr	r3, [r6, #20]
 8000f86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f8a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8000f8e:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8000f90:	6933      	ldr	r3, [r6, #16]
 8000f92:	f043 030b 	orr.w	r3, r3, #11
 8000f96:	6133      	str	r3, [r6, #16]
 8000f98:	e5e1      	b.n	8000b5e <HAL_PCD_IRQHandler+0x162>
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	60e3      	str	r3, [r4, #12]
 8000f9e:	e5fe      	b.n	8000b9e <HAL_PCD_IRQHandler+0x1a2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000fa0:	2b06      	cmp	r3, #6
 8000fa2:	f47f ae38 	bne.w	8000c16 <HAL_PCD_IRQHandler+0x21a>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fa6:	f04f 081c 	mov.w	r8, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000faa:	2208      	movs	r2, #8
 8000fac:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8000fb0:	4638      	mov	r0, r7
 8000fb2:	f002 f863 	bl	800307c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fb6:	fb08 4809 	mla	r8, r8, r9, r4
 8000fba:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000fbe:	e625      	b.n	8000c0c <HAL_PCD_IRQHandler+0x210>
 8000fc0:	4f54310a 	.word	0x4f54310a
 8000fc4:	4f54300a 	.word	0x4f54300a

08000fc8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8000fc8:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8000fcc:	2a01      	cmp	r2, #1
{
 8000fce:	b510      	push	{r4, lr}
 8000fd0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000fd2:	d00b      	beq.n	8000fec <HAL_PCD_SetAddress+0x24>
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8000fda:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000fde:	6800      	ldr	r0, [r0, #0]
 8000fe0:	f002 f8b2 	bl	8003148 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000fea:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000fec:	2002      	movs	r0, #2
}
 8000fee:	bd10      	pop	{r4, pc}

08000ff0 <HAL_PCD_EP_Open>:
{
 8000ff0:	b570      	push	{r4, r5, r6, lr}
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	f001 000f 	and.w	r0, r1, #15
 8000ff8:	261c      	movs	r6, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8000ffa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000ffe:	b2c5      	uxtb	r5, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001000:	b2c0      	uxtb	r0, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001002:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8001006:	bf1d      	ittte	ne
 8001008:	fb06 4505 	mlane	r5, r6, r5, r4
 800100c:	2601      	movne	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800100e:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001010:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8001014:	bf05      	ittet	eq
 8001016:	fb06 4505 	mlaeq	r5, r6, r5, r4
 800101a:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 800101c:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8001020:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8001024:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8001026:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001028:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 800102a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800102c:	b102      	cbz	r2, 8001030 <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 800102e:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8001030:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001032:	bf04      	itt	eq
 8001034:	2300      	moveq	r3, #0
 8001036:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001038:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800103c:	2b01      	cmp	r3, #1
 800103e:	d009      	beq.n	8001054 <HAL_PCD_EP_Open+0x64>
 8001040:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001042:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001044:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001048:	f001 fe39 	bl	8002cbe <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800104c:	2000      	movs	r0, #0
 800104e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8001052:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001054:	2002      	movs	r0, #2
}
 8001056:	bd70      	pop	{r4, r5, r6, pc}

08001058 <HAL_PCD_EP_Close>:
{
 8001058:	f001 030f 	and.w	r3, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800105c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001060:	b2da      	uxtb	r2, r3
{
 8001062:	b510      	push	{r4, lr}
 8001064:	4604      	mov	r4, r0
 8001066:	f04f 001c 	mov.w	r0, #28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800106a:	fb00 4102 	mla	r1, r0, r2, r4
    ep->is_in = 1U;
 800106e:	bf1b      	ittet	ne
 8001070:	fb00 4202 	mlane	r2, r0, r2, r4
 8001074:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001076:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800107a:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800107c:	bf05      	ittet	eq
 800107e:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8001082:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8001084:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8001088:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800108c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800108e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001092:	2b01      	cmp	r3, #1
 8001094:	d009      	beq.n	80010aa <HAL_PCD_EP_Close+0x52>
 8001096:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001098:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800109a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800109e:	f001 fe4f 	bl	8002d40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80010a8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80010aa:	2002      	movs	r0, #2
}
 80010ac:	bd10      	pop	{r4, pc}

080010ae <HAL_PCD_EP_Receive>:
{
 80010ae:	b538      	push	{r3, r4, r5, lr}
 80010b0:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010b4:	241c      	movs	r4, #28
 80010b6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80010ba:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010be:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 80010c2:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 80010c6:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80010c8:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 80010cc:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80010d0:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80010d4:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80010d8:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80010da:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80010dc:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80010de:	bf08      	it	eq
 80010e0:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 80010e4:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80010e6:	b91d      	cbnz	r5, 80010f0 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80010e8:	f001 fe5c 	bl	8002da4 <USB_EP0StartXfer>
}
 80010ec:	2000      	movs	r0, #0
 80010ee:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80010f0:	f001 fef0 	bl	8002ed4 <USB_EPStartXfer>
 80010f4:	e7fa      	b.n	80010ec <HAL_PCD_EP_Receive+0x3e>

080010f6 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80010f6:	231c      	movs	r3, #28
 80010f8:	f001 010f 	and.w	r1, r1, #15
 80010fc:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001100:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8001104:	4770      	bx	lr

08001106 <HAL_PCD_EP_Transmit>:
{
 8001106:	b538      	push	{r3, r4, r5, lr}
 8001108:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800110c:	241c      	movs	r4, #28
 800110e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8001112:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001116:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8001118:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800111a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800111c:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 800111e:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8001120:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001122:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 8001126:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800112a:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800112c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800112e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8001130:	bf08      	it	eq
 8001132:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8001134:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001136:	b91d      	cbnz	r5, 8001140 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001138:	f001 fe34 	bl	8002da4 <USB_EP0StartXfer>
}
 800113c:	2000      	movs	r0, #0
 800113e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001140:	f001 fec8 	bl	8002ed4 <USB_EPStartXfer>
 8001144:	e7fa      	b.n	800113c <HAL_PCD_EP_Transmit+0x36>

08001146 <HAL_PCD_EP_SetStall>:
{
 8001146:	b538      	push	{r3, r4, r5, lr}
 8001148:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800114c:	6843      	ldr	r3, [r0, #4]
{
 800114e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001150:	429d      	cmp	r5, r3
 8001152:	d82e      	bhi.n	80011b2 <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8001154:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001158:	f04f 021c 	mov.w	r2, #28
 800115c:	d01f      	beq.n	800119e <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800115e:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8001162:	fb02 0105 	mla	r1, r2, r5, r0
 8001166:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001168:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 800116a:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 800116e:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001170:	701d      	strb	r5, [r3, #0]
  ep->is_stall = 1U;
 8001172:	709a      	strb	r2, [r3, #2]
  __HAL_LOCK(hpcd);
 8001174:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8001178:	4291      	cmp	r1, r2
 800117a:	d01c      	beq.n	80011b6 <HAL_PCD_EP_SetStall+0x70>
 800117c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001180:	4619      	mov	r1, r3
 8001182:	6820      	ldr	r0, [r4, #0]
 8001184:	f001 ff88 	bl	8003098 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001188:	b92d      	cbnz	r5, 8001196 <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800118a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800118e:	7c21      	ldrb	r1, [r4, #16]
 8001190:	6820      	ldr	r0, [r4, #0]
 8001192:	f002 f84f 	bl	8003234 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001196:	2000      	movs	r0, #0
 8001198:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800119c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800119e:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 80011a2:	fb02 0101 	mla	r1, r2, r1, r0
 80011a6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80011a8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80011ac:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 80011b0:	e7dd      	b.n	800116e <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80011b2:	2001      	movs	r0, #1
 80011b4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80011b6:	2002      	movs	r0, #2
}
 80011b8:	bd38      	pop	{r3, r4, r5, pc}

080011ba <HAL_PCD_EP_ClrStall>:
{
 80011ba:	b538      	push	{r3, r4, r5, lr}
 80011bc:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80011c0:	6843      	ldr	r3, [r0, #4]
{
 80011c2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d825      	bhi.n	8001214 <HAL_PCD_EP_ClrStall+0x5a>
 80011c8:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 80011ca:	f011 0f80 	tst.w	r1, #128	; 0x80
  ep->is_stall = 0U;
 80011ce:	f04f 0500 	mov.w	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011d2:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 80011d6:	bf0f      	iteee	eq
 80011d8:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 80011da:	fb03 0302 	mlane	r3, r3, r2, r0
 80011de:	2001      	movne	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011e0:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011e2:	bf05      	ittet	eq
 80011e4:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80011e8:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 80011ec:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 80011f0:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 80011f4:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011f6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80011f8:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d00b      	beq.n	8001218 <HAL_PCD_EP_ClrStall+0x5e>
 8001200:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001202:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001204:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001208:	f001 ff73 	bl	80030f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800120c:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001210:	4628      	mov	r0, r5
 8001212:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001214:	2001      	movs	r0, #1
 8001216:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001218:	2002      	movs	r0, #2
}
 800121a:	bd38      	pop	{r3, r4, r5, pc}

0800121c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800121c:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800121e:	6804      	ldr	r4, [r0, #0]
 8001220:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001222:	b921      	cbnz	r1, 800122e <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001228:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800122a:	2000      	movs	r0, #0
 800122c:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800122e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8001230:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001232:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001236:	2000      	movs	r0, #0
 8001238:	1c46      	adds	r6, r0, #1
 800123a:	b2c0      	uxtb	r0, r0
 800123c:	4285      	cmp	r5, r0
 800123e:	d806      	bhi.n	800124e <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001240:	313f      	adds	r1, #63	; 0x3f
 8001242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001246:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800124a:	6063      	str	r3, [r4, #4]
 800124c:	e7ed      	b.n	800122a <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800124e:	3040      	adds	r0, #64	; 0x40
 8001250:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001254:	6840      	ldr	r0, [r0, #4]
 8001256:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800125a:	4630      	mov	r0, r6
 800125c:	e7ec      	b.n	8001238 <HAL_PCDEx_SetTxFiFo+0x1c>

0800125e <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800125e:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8001260:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001262:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001264:	4770      	bx	lr

08001266 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8001266:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001268:	6802      	ldr	r2, [r0, #0]
{
 800126a:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 800126c:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001270:	2000      	movs	r0, #0
 8001272:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001276:	6993      	ldr	r3, [r2, #24]
 8001278:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800127c:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800127e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	f043 0303 	orr.w	r3, r3, #3
 8001288:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800128a:	4770      	bx	lr

0800128c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800128c:	4a02      	ldr	r2, [pc, #8]	; (8001298 <HAL_PWR_EnableBkUpAccess+0xc>)
 800128e:	6813      	ldr	r3, [r2, #0]
 8001290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4770      	bx	lr
 8001298:	40007000 	.word	0x40007000

0800129c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800129e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012a2:	4c19      	ldr	r4, [pc, #100]	; (8001308 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ba:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012bc:	f7ff f988 	bl	80005d0 <HAL_GetTick>
 80012c0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012c2:	6863      	ldr	r3, [r4, #4]
 80012c4:	03da      	lsls	r2, r3, #15
 80012c6:	d50c      	bpl.n	80012e2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d0:	f7ff f97e 	bl	80005d0 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012d4:	4c0c      	ldr	r4, [pc, #48]	; (8001308 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80012d6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012d8:	6863      	ldr	r3, [r4, #4]
 80012da:	039b      	lsls	r3, r3, #14
 80012dc:	d50a      	bpl.n	80012f4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80012de:	2000      	movs	r0, #0
 80012e0:	e006      	b.n	80012f0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012e2:	f7ff f975 	bl	80005d0 <HAL_GetTick>
 80012e6:	1b40      	subs	r0, r0, r5
 80012e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80012ec:	d9e9      	bls.n	80012c2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80012ee:	2003      	movs	r0, #3
}
 80012f0:	b003      	add	sp, #12
 80012f2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012f4:	f7ff f96c 	bl	80005d0 <HAL_GetTick>
 80012f8:	1b40      	subs	r0, r0, r5
 80012fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80012fe:	d9eb      	bls.n	80012d8 <HAL_PWREx_EnableOverDrive+0x3c>
 8001300:	e7f5      	b.n	80012ee <HAL_PWREx_EnableOverDrive+0x52>
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800130c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001310:	4604      	mov	r4, r0
 8001312:	b918      	cbnz	r0, 800131c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001314:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001316:	b002      	add	sp, #8
 8001318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131c:	6803      	ldr	r3, [r0, #0]
 800131e:	07d8      	lsls	r0, r3, #31
 8001320:	d410      	bmi.n	8001344 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	0799      	lsls	r1, r3, #30
 8001326:	d45e      	bmi.n	80013e6 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	0719      	lsls	r1, r3, #28
 800132c:	f100 80a3 	bmi.w	8001476 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	075a      	lsls	r2, r3, #29
 8001334:	f100 80c4 	bmi.w	80014c0 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001338:	69a2      	ldr	r2, [r4, #24]
 800133a:	2a00      	cmp	r2, #0
 800133c:	f040 812e 	bne.w	800159c <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001340:	2000      	movs	r0, #0
 8001342:	e7e8      	b.n	8001316 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001344:	4b93      	ldr	r3, [pc, #588]	; (8001594 <HAL_RCC_OscConfig+0x288>)
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	f002 020c 	and.w	r2, r2, #12
 800134c:	2a04      	cmp	r2, #4
 800134e:	d007      	beq.n	8001360 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	f002 020c 	and.w	r2, r2, #12
 8001356:	2a08      	cmp	r2, #8
 8001358:	d10a      	bne.n	8001370 <HAL_RCC_OscConfig+0x64>
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	025a      	lsls	r2, r3, #9
 800135e:	d507      	bpl.n	8001370 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	4b8c      	ldr	r3, [pc, #560]	; (8001594 <HAL_RCC_OscConfig+0x288>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	039b      	lsls	r3, r3, #14
 8001366:	d5dc      	bpl.n	8001322 <HAL_RCC_OscConfig+0x16>
 8001368:	6863      	ldr	r3, [r4, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1d9      	bne.n	8001322 <HAL_RCC_OscConfig+0x16>
 800136e:	e7d1      	b.n	8001314 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001370:	6863      	ldr	r3, [r4, #4]
 8001372:	4d88      	ldr	r5, [pc, #544]	; (8001594 <HAL_RCC_OscConfig+0x288>)
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001378:	d111      	bne.n	800139e <HAL_RCC_OscConfig+0x92>
 800137a:	682b      	ldr	r3, [r5, #0]
 800137c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001380:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001382:	f7ff f925 	bl	80005d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	4d83      	ldr	r5, [pc, #524]	; (8001594 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001388:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	039f      	lsls	r7, r3, #14
 800138e:	d4c8      	bmi.n	8001322 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff f91e 	bl	80005d0 <HAL_GetTick>
 8001394:	1b80      	subs	r0, r0, r6
 8001396:	2864      	cmp	r0, #100	; 0x64
 8001398:	d9f7      	bls.n	800138a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800139a:	2003      	movs	r0, #3
 800139c:	e7bb      	b.n	8001316 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139e:	b99b      	cbnz	r3, 80013c8 <HAL_RCC_OscConfig+0xbc>
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	602b      	str	r3, [r5, #0]
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013b0:	f7ff f90e 	bl	80005d0 <HAL_GetTick>
 80013b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	682b      	ldr	r3, [r5, #0]
 80013b8:	0398      	lsls	r0, r3, #14
 80013ba:	d5b2      	bpl.n	8001322 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff f908 	bl	80005d0 <HAL_GetTick>
 80013c0:	1b80      	subs	r0, r0, r6
 80013c2:	2864      	cmp	r0, #100	; 0x64
 80013c4:	d9f7      	bls.n	80013b6 <HAL_RCC_OscConfig+0xaa>
 80013c6:	e7e8      	b.n	800139a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	d103      	bne.n	80013d8 <HAL_RCC_OscConfig+0xcc>
 80013d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d4:	602b      	str	r3, [r5, #0]
 80013d6:	e7d0      	b.n	800137a <HAL_RCC_OscConfig+0x6e>
 80013d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013dc:	602b      	str	r3, [r5, #0]
 80013de:	682b      	ldr	r3, [r5, #0]
 80013e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e4:	e7cc      	b.n	8001380 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013e6:	4b6b      	ldr	r3, [pc, #428]	; (8001594 <HAL_RCC_OscConfig+0x288>)
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	f012 0f0c 	tst.w	r2, #12
 80013ee:	d007      	beq.n	8001400 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	f002 020c 	and.w	r2, r2, #12
 80013f6:	2a08      	cmp	r2, #8
 80013f8:	d111      	bne.n	800141e <HAL_RCC_OscConfig+0x112>
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	0259      	lsls	r1, r3, #9
 80013fe:	d40e      	bmi.n	800141e <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001400:	4b64      	ldr	r3, [pc, #400]	; (8001594 <HAL_RCC_OscConfig+0x288>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	0792      	lsls	r2, r2, #30
 8001406:	d502      	bpl.n	800140e <HAL_RCC_OscConfig+0x102>
 8001408:	68e2      	ldr	r2, [r4, #12]
 800140a:	2a01      	cmp	r2, #1
 800140c:	d182      	bne.n	8001314 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	6921      	ldr	r1, [r4, #16]
 8001412:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001416:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800141a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141c:	e784      	b.n	8001328 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800141e:	68e3      	ldr	r3, [r4, #12]
 8001420:	4d5c      	ldr	r5, [pc, #368]	; (8001594 <HAL_RCC_OscConfig+0x288>)
 8001422:	b1bb      	cbz	r3, 8001454 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001424:	682b      	ldr	r3, [r5, #0]
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800142c:	f7ff f8d0 	bl	80005d0 <HAL_GetTick>
 8001430:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001432:	682b      	ldr	r3, [r5, #0]
 8001434:	079f      	lsls	r7, r3, #30
 8001436:	d507      	bpl.n	8001448 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001438:	682b      	ldr	r3, [r5, #0]
 800143a:	6922      	ldr	r2, [r4, #16]
 800143c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001440:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001444:	602b      	str	r3, [r5, #0]
 8001446:	e76f      	b.n	8001328 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff f8c2 	bl	80005d0 <HAL_GetTick>
 800144c:	1b80      	subs	r0, r0, r6
 800144e:	2802      	cmp	r0, #2
 8001450:	d9ef      	bls.n	8001432 <HAL_RCC_OscConfig+0x126>
 8001452:	e7a2      	b.n	800139a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800145c:	f7ff f8b8 	bl	80005d0 <HAL_GetTick>
 8001460:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	0798      	lsls	r0, r3, #30
 8001466:	f57f af5f 	bpl.w	8001328 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff f8b1 	bl	80005d0 <HAL_GetTick>
 800146e:	1b80      	subs	r0, r0, r6
 8001470:	2802      	cmp	r0, #2
 8001472:	d9f6      	bls.n	8001462 <HAL_RCC_OscConfig+0x156>
 8001474:	e791      	b.n	800139a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001476:	6963      	ldr	r3, [r4, #20]
 8001478:	4d46      	ldr	r5, [pc, #280]	; (8001594 <HAL_RCC_OscConfig+0x288>)
 800147a:	b183      	cbz	r3, 800149e <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 800147c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001484:	f7ff f8a4 	bl	80005d0 <HAL_GetTick>
 8001488:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800148c:	079b      	lsls	r3, r3, #30
 800148e:	f53f af4f 	bmi.w	8001330 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001492:	f7ff f89d 	bl	80005d0 <HAL_GetTick>
 8001496:	1b80      	subs	r0, r0, r6
 8001498:	2802      	cmp	r0, #2
 800149a:	d9f6      	bls.n	800148a <HAL_RCC_OscConfig+0x17e>
 800149c:	e77d      	b.n	800139a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800149e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80014a6:	f7ff f893 	bl	80005d0 <HAL_GetTick>
 80014aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014ae:	079f      	lsls	r7, r3, #30
 80014b0:	f57f af3e 	bpl.w	8001330 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff f88c 	bl	80005d0 <HAL_GetTick>
 80014b8:	1b80      	subs	r0, r0, r6
 80014ba:	2802      	cmp	r0, #2
 80014bc:	d9f6      	bls.n	80014ac <HAL_RCC_OscConfig+0x1a0>
 80014be:	e76c      	b.n	800139a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c0:	4b34      	ldr	r3, [pc, #208]	; (8001594 <HAL_RCC_OscConfig+0x288>)
 80014c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c4:	00d0      	lsls	r0, r2, #3
 80014c6:	d427      	bmi.n	8001518 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80014ca:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014dc:	4d2e      	ldr	r5, [pc, #184]	; (8001598 <HAL_RCC_OscConfig+0x28c>)
 80014de:	682b      	ldr	r3, [r5, #0]
 80014e0:	05d9      	lsls	r1, r3, #23
 80014e2:	d51b      	bpl.n	800151c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e4:	68a3      	ldr	r3, [r4, #8]
 80014e6:	4d2b      	ldr	r5, [pc, #172]	; (8001594 <HAL_RCC_OscConfig+0x288>)
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d127      	bne.n	800153c <HAL_RCC_OscConfig+0x230>
 80014ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80014f8:	f7ff f86a 	bl	80005d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	4f25      	ldr	r7, [pc, #148]	; (8001594 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80014fe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001500:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001502:	079b      	lsls	r3, r3, #30
 8001504:	d53f      	bpl.n	8001586 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8001506:	2e00      	cmp	r6, #0
 8001508:	f43f af16 	beq.w	8001338 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <HAL_RCC_OscConfig+0x288>)
 800150e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	e70f      	b.n	8001338 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001518:	2600      	movs	r6, #0
 800151a:	e7df      	b.n	80014dc <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001524:	f7ff f854 	bl	80005d0 <HAL_GetTick>
 8001528:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152a:	682b      	ldr	r3, [r5, #0]
 800152c:	05da      	lsls	r2, r3, #23
 800152e:	d4d9      	bmi.n	80014e4 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001530:	f7ff f84e 	bl	80005d0 <HAL_GetTick>
 8001534:	1bc0      	subs	r0, r0, r7
 8001536:	2864      	cmp	r0, #100	; 0x64
 8001538:	d9f7      	bls.n	800152a <HAL_RCC_OscConfig+0x21e>
 800153a:	e72e      	b.n	800139a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153c:	b9ab      	cbnz	r3, 800156a <HAL_RCC_OscConfig+0x25e>
 800153e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	672b      	str	r3, [r5, #112]	; 0x70
 800154a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001552:	f7ff f83d 	bl	80005d0 <HAL_GetTick>
 8001556:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800155a:	0798      	lsls	r0, r3, #30
 800155c:	d5d3      	bpl.n	8001506 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155e:	f7ff f837 	bl	80005d0 <HAL_GetTick>
 8001562:	1bc0      	subs	r0, r0, r7
 8001564:	4540      	cmp	r0, r8
 8001566:	d9f7      	bls.n	8001558 <HAL_RCC_OscConfig+0x24c>
 8001568:	e717      	b.n	800139a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156a:	2b05      	cmp	r3, #5
 800156c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800156e:	d103      	bne.n	8001578 <HAL_RCC_OscConfig+0x26c>
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	672b      	str	r3, [r5, #112]	; 0x70
 8001576:	e7b9      	b.n	80014ec <HAL_RCC_OscConfig+0x1e0>
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	672b      	str	r3, [r5, #112]	; 0x70
 800157e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001580:	f023 0304 	bic.w	r3, r3, #4
 8001584:	e7b5      	b.n	80014f2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff f823 	bl	80005d0 <HAL_GetTick>
 800158a:	eba0 0008 	sub.w	r0, r0, r8
 800158e:	42a8      	cmp	r0, r5
 8001590:	d9b6      	bls.n	8001500 <HAL_RCC_OscConfig+0x1f4>
 8001592:	e702      	b.n	800139a <HAL_RCC_OscConfig+0x8e>
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800159c:	4d24      	ldr	r5, [pc, #144]	; (8001630 <HAL_RCC_OscConfig+0x324>)
 800159e:	68ab      	ldr	r3, [r5, #8]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	f43f aeb5 	beq.w	8001314 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80015aa:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ac:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80015ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b4:	d12f      	bne.n	8001616 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80015b6:	f7ff f80b 	bl	80005d0 <HAL_GetTick>
 80015ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	0199      	lsls	r1, r3, #6
 80015c0:	d423      	bmi.n	800160a <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c2:	6a22      	ldr	r2, [r4, #32]
 80015c4:	69e3      	ldr	r3, [r4, #28]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015d6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80015da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015dc:	4c14      	ldr	r4, [pc, #80]	; (8001630 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015de:	0852      	lsrs	r2, r2, #1
 80015e0:	3a01      	subs	r2, #1
 80015e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015e6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015f0:	f7fe ffee 	bl	80005d0 <HAL_GetTick>
 80015f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	019a      	lsls	r2, r3, #6
 80015fa:	f53f aea1 	bmi.w	8001340 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fe:	f7fe ffe7 	bl	80005d0 <HAL_GetTick>
 8001602:	1b40      	subs	r0, r0, r5
 8001604:	2802      	cmp	r0, #2
 8001606:	d9f6      	bls.n	80015f6 <HAL_RCC_OscConfig+0x2ea>
 8001608:	e6c7      	b.n	800139a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7fe ffe1 	bl	80005d0 <HAL_GetTick>
 800160e:	1b80      	subs	r0, r0, r6
 8001610:	2802      	cmp	r0, #2
 8001612:	d9d3      	bls.n	80015bc <HAL_RCC_OscConfig+0x2b0>
 8001614:	e6c1      	b.n	800139a <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001616:	f7fe ffdb 	bl	80005d0 <HAL_GetTick>
 800161a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161c:	682b      	ldr	r3, [r5, #0]
 800161e:	019b      	lsls	r3, r3, #6
 8001620:	f57f ae8e 	bpl.w	8001340 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	f7fe ffd4 	bl	80005d0 <HAL_GetTick>
 8001628:	1b00      	subs	r0, r0, r4
 800162a:	2802      	cmp	r0, #2
 800162c:	d9f6      	bls.n	800161c <HAL_RCC_OscConfig+0x310>
 800162e:	e6b4      	b.n	800139a <HAL_RCC_OscConfig+0x8e>
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001634:	4913      	ldr	r1, [pc, #76]	; (8001684 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001636:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001638:	688b      	ldr	r3, [r1, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b04      	cmp	r3, #4
 8001640:	d003      	beq.n	800164a <HAL_RCC_GetSysClockFreq+0x16>
 8001642:	2b08      	cmp	r3, #8
 8001644:	d003      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001646:	4810      	ldr	r0, [pc, #64]	; (8001688 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001648:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800164a:	4810      	ldr	r0, [pc, #64]	; (800168c <HAL_RCC_GetSysClockFreq+0x58>)
 800164c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800164e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001650:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001652:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001654:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001658:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800165c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001660:	bf1a      	itte	ne
 8001662:	480a      	ldrne	r0, [pc, #40]	; (800168c <HAL_RCC_GetSysClockFreq+0x58>)
 8001664:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001666:	4808      	ldreq	r0, [pc, #32]	; (8001688 <HAL_RCC_GetSysClockFreq+0x54>)
 8001668:	fba1 0100 	umull	r0, r1, r1, r0
 800166c:	f7fe fdec 	bl	8000248 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_RCC_GetSysClockFreq+0x50>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001678:	3301      	adds	r3, #1
 800167a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800167c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001680:	bd08      	pop	{r3, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	00f42400 	.word	0x00f42400
 800168c:	007a1200 	.word	0x007a1200

08001690 <HAL_RCC_ClockConfig>:
{
 8001690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001694:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001696:	4604      	mov	r4, r0
 8001698:	b910      	cbnz	r0, 80016a0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800169a:	2001      	movs	r0, #1
 800169c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016a0:	4a46      	ldr	r2, [pc, #280]	; (80017bc <HAL_RCC_ClockConfig+0x12c>)
 80016a2:	6813      	ldr	r3, [r2, #0]
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	428b      	cmp	r3, r1
 80016aa:	d328      	bcc.n	80016fe <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ac:	6821      	ldr	r1, [r4, #0]
 80016ae:	078f      	lsls	r7, r1, #30
 80016b0:	d430      	bmi.n	8001714 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b2:	07c8      	lsls	r0, r1, #31
 80016b4:	d443      	bmi.n	800173e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b6:	4a41      	ldr	r2, [pc, #260]	; (80017bc <HAL_RCC_ClockConfig+0x12c>)
 80016b8:	6813      	ldr	r3, [r2, #0]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	429d      	cmp	r5, r3
 80016c0:	d367      	bcc.n	8001792 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c2:	6822      	ldr	r2, [r4, #0]
 80016c4:	0751      	lsls	r1, r2, #29
 80016c6:	d470      	bmi.n	80017aa <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c8:	0713      	lsls	r3, r2, #28
 80016ca:	d507      	bpl.n	80016dc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016cc:	4a3c      	ldr	r2, [pc, #240]	; (80017c0 <HAL_RCC_ClockConfig+0x130>)
 80016ce:	6921      	ldr	r1, [r4, #16]
 80016d0:	6893      	ldr	r3, [r2, #8]
 80016d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80016d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016da:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016dc:	f7ff ffaa 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 80016e0:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_RCC_ClockConfig+0x130>)
 80016e2:	4a38      	ldr	r2, [pc, #224]	; (80017c4 <HAL_RCC_ClockConfig+0x134>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	40d8      	lsrs	r0, r3
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_RCC_ClockConfig+0x138>)
 80016f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7fe ff30 	bl	8000558 <HAL_InitTick>
  return HAL_OK;
 80016f8:	2000      	movs	r0, #0
 80016fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	6813      	ldr	r3, [r2, #0]
 8001700:	f023 030f 	bic.w	r3, r3, #15
 8001704:	430b      	orrs	r3, r1
 8001706:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001708:	6813      	ldr	r3, [r2, #0]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	4299      	cmp	r1, r3
 8001710:	d1c3      	bne.n	800169a <HAL_RCC_ClockConfig+0xa>
 8001712:	e7cb      	b.n	80016ac <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	f011 0f04 	tst.w	r1, #4
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_RCC_ClockConfig+0x130>)
 800171a:	d003      	beq.n	8001724 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001722:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	070e      	lsls	r6, r1, #28
 8001726:	d503      	bpl.n	8001730 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800172e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	68a0      	ldr	r0, [r4, #8]
 8001734:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001738:	4302      	orrs	r2, r0
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	e7b9      	b.n	80016b2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173e:	6861      	ldr	r1, [r4, #4]
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <HAL_RCC_ClockConfig+0x130>)
 8001742:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001744:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001746:	d11c      	bne.n	8001782 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001748:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	d0a5      	beq.n	800169a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800174e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001754:	4e1a      	ldr	r6, [pc, #104]	; (80017c0 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001756:	f022 0203 	bic.w	r2, r2, #3
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800175e:	f7fe ff37 	bl	80005d0 <HAL_GetTick>
 8001762:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001764:	68b3      	ldr	r3, [r6, #8]
 8001766:	6862      	ldr	r2, [r4, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001770:	d0a1      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001772:	f7fe ff2d 	bl	80005d0 <HAL_GetTick>
 8001776:	1bc0      	subs	r0, r0, r7
 8001778:	4540      	cmp	r0, r8
 800177a:	d9f3      	bls.n	8001764 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800177c:	2003      	movs	r0, #3
}
 800177e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001782:	2902      	cmp	r1, #2
 8001784:	d102      	bne.n	800178c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800178a:	e7df      	b.n	800174c <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178c:	f012 0f02 	tst.w	r2, #2
 8001790:	e7dc      	b.n	800174c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	6813      	ldr	r3, [r2, #0]
 8001794:	f023 030f 	bic.w	r3, r3, #15
 8001798:	432b      	orrs	r3, r5
 800179a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179c:	6813      	ldr	r3, [r2, #0]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	429d      	cmp	r5, r3
 80017a4:	f47f af79 	bne.w	800169a <HAL_RCC_ClockConfig+0xa>
 80017a8:	e78b      	b.n	80016c2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017aa:	4905      	ldr	r1, [pc, #20]	; (80017c0 <HAL_RCC_ClockConfig+0x130>)
 80017ac:	68e0      	ldr	r0, [r4, #12]
 80017ae:	688b      	ldr	r3, [r1, #8]
 80017b0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80017b4:	4303      	orrs	r3, r0
 80017b6:	608b      	str	r3, [r1, #8]
 80017b8:	e786      	b.n	80016c8 <HAL_RCC_ClockConfig+0x38>
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00
 80017c0:	40023800 	.word	0x40023800
 80017c4:	08004a1d 	.word	0x08004a1d
 80017c8:	20000118 	.word	0x20000118

080017cc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80017cc:	4b01      	ldr	r3, [pc, #4]	; (80017d4 <HAL_RCC_GetHCLKFreq+0x8>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000118 	.word	0x20000118

080017d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	4a03      	ldr	r2, [pc, #12]	; (80017f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017e6:	6810      	ldr	r0, [r2, #0]
}
 80017e8:	40d8      	lsrs	r0, r3
 80017ea:	4770      	bx	lr
 80017ec:	40023800 	.word	0x40023800
 80017f0:	08004a2d 	.word	0x08004a2d
 80017f4:	20000118 	.word	0x20000118

080017f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_RCC_GetPCLK2Freq+0x14>)
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <HAL_RCC_GetPCLK2Freq+0x18>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	4a03      	ldr	r2, [pc, #12]	; (8001814 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001806:	6810      	ldr	r0, [r2, #0]
}
 8001808:	40d8      	lsrs	r0, r3
 800180a:	4770      	bx	lr
 800180c:	40023800 	.word	0x40023800
 8001810:	08004a2d 	.word	0x08004a2d
 8001814:	20000118 	.word	0x20000118

08001818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800181c:	6802      	ldr	r2, [r0, #0]
{
 800181e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001820:	f012 0601 	ands.w	r6, r2, #1
 8001824:	d00b      	beq.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001826:	4bba      	ldr	r3, [pc, #744]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800182e:	6099      	str	r1, [r3, #8]
 8001830:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001832:	6899      	ldr	r1, [r3, #8]
 8001834:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001836:	fab6 f686 	clz	r6, r6
 800183a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800183c:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800183e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001842:	d012      	beq.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001844:	49b2      	ldr	r1, [pc, #712]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001846:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001848:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800184c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001850:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001854:	bf08      	it	eq
 8001856:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001858:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800185c:	bf16      	itet	ne
 800185e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001862:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001864:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001866:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800186a:	02d7      	lsls	r7, r2, #11
 800186c:	d510      	bpl.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800186e:	48a8      	ldr	r0, [pc, #672]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001870:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001872:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001876:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800187a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800187e:	ea43 0301 	orr.w	r3, r3, r1
 8001882:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001886:	f000 81a9 	beq.w	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800188a:	2900      	cmp	r1, #0
 800188c:	bf08      	it	eq
 800188e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001890:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001894:	bf18      	it	ne
 8001896:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001898:	0690      	lsls	r0, r2, #26
 800189a:	d531      	bpl.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	4b9c      	ldr	r3, [pc, #624]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800189e:	4f9d      	ldr	r7, [pc, #628]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80018a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ba:	f7fe fe89 	bl	80005d0 <HAL_GetTick>
 80018be:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	05d9      	lsls	r1, r3, #23
 80018c4:	f140 818c 	bpl.w	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018c8:	4f91      	ldr	r7, [pc, #580]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018cc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018d0:	f040 8191 	bne.w	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018d6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80018da:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80018de:	4a8c      	ldr	r2, [pc, #560]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018e0:	f040 81af 	bne.w	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80018e4:	6891      	ldr	r1, [r2, #8]
 80018e6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80018ea:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80018ee:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80018f2:	4301      	orrs	r1, r0
 80018f4:	6091      	str	r1, [r2, #8]
 80018f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fa:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	06df      	lsls	r7, r3, #27
 8001904:	d50c      	bpl.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001906:	4a82      	ldr	r2, [pc, #520]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001908:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800190c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001910:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001914:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001918:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800191a:	4301      	orrs	r1, r0
 800191c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001920:	0458      	lsls	r0, r3, #17
 8001922:	d508      	bpl.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001924:	497a      	ldr	r1, [pc, #488]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001926:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001928:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800192c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001930:	4302      	orrs	r2, r0
 8001932:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001936:	0419      	lsls	r1, r3, #16
 8001938:	d508      	bpl.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800193a:	4975      	ldr	r1, [pc, #468]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800193c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800193e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001942:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001946:	4302      	orrs	r2, r0
 8001948:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800194c:	03da      	lsls	r2, r3, #15
 800194e:	d508      	bpl.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001950:	496f      	ldr	r1, [pc, #444]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001952:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001954:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001958:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800195c:	4302      	orrs	r2, r0
 800195e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001962:	039f      	lsls	r7, r3, #14
 8001964:	d508      	bpl.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001966:	496a      	ldr	r1, [pc, #424]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001968:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800196a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800196e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001972:	4302      	orrs	r2, r0
 8001974:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001978:	0658      	lsls	r0, r3, #25
 800197a:	d508      	bpl.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800197c:	4964      	ldr	r1, [pc, #400]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800197e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001980:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001984:	f022 0203 	bic.w	r2, r2, #3
 8001988:	4302      	orrs	r2, r0
 800198a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800198e:	0619      	lsls	r1, r3, #24
 8001990:	d508      	bpl.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001992:	495f      	ldr	r1, [pc, #380]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001994:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001996:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800199a:	f022 020c 	bic.w	r2, r2, #12
 800199e:	4302      	orrs	r2, r0
 80019a0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019a4:	05da      	lsls	r2, r3, #23
 80019a6:	d508      	bpl.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019a8:	4959      	ldr	r1, [pc, #356]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019aa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80019ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019b0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80019b4:	4302      	orrs	r2, r0
 80019b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019ba:	059f      	lsls	r7, r3, #22
 80019bc:	d508      	bpl.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80019be:	4954      	ldr	r1, [pc, #336]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80019c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80019ca:	4302      	orrs	r2, r0
 80019cc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80019d0:	0558      	lsls	r0, r3, #21
 80019d2:	d508      	bpl.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80019d4:	494e      	ldr	r1, [pc, #312]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80019e0:	4302      	orrs	r2, r0
 80019e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80019e6:	0519      	lsls	r1, r3, #20
 80019e8:	d508      	bpl.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80019ea:	4949      	ldr	r1, [pc, #292]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80019ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80019f6:	4302      	orrs	r2, r0
 80019f8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80019fc:	04da      	lsls	r2, r3, #19
 80019fe:	d508      	bpl.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001a00:	4943      	ldr	r1, [pc, #268]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a02:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001a04:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a08:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a12:	049f      	lsls	r7, r3, #18
 8001a14:	d508      	bpl.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a16:	493e      	ldr	r1, [pc, #248]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a18:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001a1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a1e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a22:	4302      	orrs	r2, r0
 8001a24:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a28:	0258      	lsls	r0, r3, #9
 8001a2a:	d508      	bpl.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a2c:	4938      	ldr	r1, [pc, #224]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a2e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001a30:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a34:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001a38:	4302      	orrs	r2, r0
 8001a3a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a3e:	0299      	lsls	r1, r3, #10
 8001a40:	d50c      	bpl.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a42:	4833      	ldr	r0, [pc, #204]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a44:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001a46:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001a4a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a4e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001a52:	bf08      	it	eq
 8001a54:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a56:	430a      	orrs	r2, r1
 8001a58:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001a5c:	f013 0f08 	tst.w	r3, #8
 8001a60:	bf18      	it	ne
 8001a62:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001a64:	035a      	lsls	r2, r3, #13
 8001a66:	d508      	bpl.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a68:	4929      	ldr	r1, [pc, #164]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a6a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001a6c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a74:	4302      	orrs	r2, r0
 8001a76:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001a7a:	021f      	lsls	r7, r3, #8
 8001a7c:	d509      	bpl.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a7e:	4924      	ldr	r1, [pc, #144]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a80:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001a84:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a88:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001a8c:	4302      	orrs	r2, r0
 8001a8e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001a92:	0158      	lsls	r0, r3, #5
 8001a94:	d509      	bpl.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001a96:	491e      	ldr	r1, [pc, #120]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a98:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001a9c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001aa0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001aa4:	4302      	orrs	r2, r0
 8001aa6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001aaa:	0119      	lsls	r1, r3, #4
 8001aac:	d509      	bpl.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001aae:	4918      	ldr	r1, [pc, #96]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ab0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001ab4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001ab8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001abc:	4302      	orrs	r2, r0
 8001abe:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001ac2:	00da      	lsls	r2, r3, #3
 8001ac4:	d509      	bpl.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001ac6:	4912      	ldr	r1, [pc, #72]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ac8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001acc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001ad0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001ad4:	4302      	orrs	r2, r0
 8001ad6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ada:	2e01      	cmp	r6, #1
 8001adc:	f000 80b5 	beq.w	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001ae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ae4:	f000 80b1 	beq.w	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001ae8:	2d01      	cmp	r5, #1
 8001aea:	d175      	bne.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001aec:	4d08      	ldr	r5, [pc, #32]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001aee:	682b      	ldr	r3, [r5, #0]
 8001af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af6:	f7fe fd6b 	bl	80005d0 <HAL_GetTick>
 8001afa:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001afc:	682b      	ldr	r3, [r5, #0]
 8001afe:	009f      	lsls	r7, r3, #2
 8001b00:	f100 8127 	bmi.w	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001b04:	6821      	ldr	r1, [r4, #0]
 8001b06:	030e      	lsls	r6, r1, #12
 8001b08:	d506      	bpl.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001b0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b0c:	b143      	cbz	r3, 8001b20 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001b0e:	e003      	b.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000
 8001b18:	02cd      	lsls	r5, r1, #11
 8001b1a:	d51d      	bpl.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b1e:	b9db      	cbnz	r3, 8001b58 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b20:	4a93      	ldr	r2, [pc, #588]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b26:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b2e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b32:	4303      	orrs	r3, r0
 8001b34:	6960      	ldr	r0, [r4, #20]
 8001b36:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b3a:	69a0      	ldr	r0, [r4, #24]
 8001b3c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001b44:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001b48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001b4a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001b4e:	3801      	subs	r0, #1
 8001b50:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001b54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001b58:	0288      	lsls	r0, r1, #10
 8001b5a:	d515      	bpl.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001b5c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b62:	d111      	bne.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b64:	4a82      	ldr	r2, [pc, #520]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b6a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001b6e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001b72:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b76:	4303      	orrs	r3, r0
 8001b78:	6960      	ldr	r0, [r4, #20]
 8001b7a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b7e:	6a20      	ldr	r0, [r4, #32]
 8001b80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001b88:	070a      	lsls	r2, r1, #28
 8001b8a:	d519      	bpl.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b8c:	4978      	ldr	r1, [pc, #480]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b8e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b92:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001b96:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001b9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	6962      	ldr	r2, [r4, #20]
 8001ba2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ba6:	69e2      	ldr	r2, [r4, #28]
 8001ba8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001bb0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001bb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bb6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001bc0:	4c6b      	ldr	r4, [pc, #428]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bca:	f7fe fd01 	bl	80005d0 <HAL_GetTick>
 8001bce:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	f140 80c4 	bpl.w	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001bd8:	2000      	movs	r0, #0
 8001bda:	e009      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001bdc:	2601      	movs	r6, #1
 8001bde:	e657      	b.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be0:	f7fe fcf6 	bl	80005d0 <HAL_GetTick>
 8001be4:	eba0 0008 	sub.w	r0, r0, r8
 8001be8:	2864      	cmp	r0, #100	; 0x64
 8001bea:	f67f ae69 	bls.w	80018c0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001bee:	2003      	movs	r0, #3
}
 8001bf0:	b003      	add	sp, #12
 8001bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bf6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001bf8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	f43f ae69 	beq.w	80018d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c0e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c16:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001c18:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c1c:	07da      	lsls	r2, r3, #31
 8001c1e:	f57f ae59 	bpl.w	80018d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001c22:	f7fe fcd5 	bl	80005d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c2a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c2e:	079b      	lsls	r3, r3, #30
 8001c30:	f53f ae50 	bmi.w	80018d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7fe fccc 	bl	80005d0 <HAL_GetTick>
 8001c38:	eba0 0008 	sub.w	r0, r0, r8
 8001c3c:	4548      	cmp	r0, r9
 8001c3e:	d9f5      	bls.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001c40:	e7d5      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c42:	6891      	ldr	r1, [r2, #8]
 8001c44:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001c48:	e654      	b.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001c4a:	4e49      	ldr	r6, [pc, #292]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001c4c:	6833      	ldr	r3, [r6, #0]
 8001c4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c52:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001c54:	f7fe fcbc 	bl	80005d0 <HAL_GetTick>
 8001c58:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c5a:	6833      	ldr	r3, [r6, #0]
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	d472      	bmi.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001c60:	6822      	ldr	r2, [r4, #0]
 8001c62:	07d7      	lsls	r7, r2, #31
 8001c64:	d512      	bpl.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c68:	b983      	cbnz	r3, 8001c8c <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c6a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c6e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c76:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	6861      	ldr	r1, [r4, #4]
 8001c7e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001c82:	68a1      	ldr	r1, [r4, #8]
 8001c84:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001c88:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c8c:	0316      	lsls	r6, r2, #12
 8001c8e:	d503      	bpl.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001c90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001c98:	02d0      	lsls	r0, r2, #11
 8001c9a:	d51e      	bpl.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca2:	d11a      	bne.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ca4:	4932      	ldr	r1, [pc, #200]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001ca6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001caa:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001cae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001cb6:	4303      	orrs	r3, r0
 8001cb8:	6860      	ldr	r0, [r4, #4]
 8001cba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001cbe:	68e0      	ldr	r0, [r4, #12]
 8001cc0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001cc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001cc8:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cce:	f020 001f 	bic.w	r0, r0, #31
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	4303      	orrs	r3, r0
 8001cd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cda:	01d1      	lsls	r1, r2, #7
 8001cdc:	d511      	bpl.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cde:	4924      	ldr	r1, [pc, #144]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001ce0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ce4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001ce8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001cec:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001cf0:	4303      	orrs	r3, r0
 8001cf2:	6860      	ldr	r0, [r4, #4]
 8001cf4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001cf8:	6920      	ldr	r0, [r4, #16]
 8001cfa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001cfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d02:	0192      	lsls	r2, r2, #6
 8001d04:	d50d      	bpl.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d06:	6923      	ldr	r3, [r4, #16]
 8001d08:	6862      	ldr	r2, [r4, #4]
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d10:	68e2      	ldr	r2, [r4, #12]
 8001d12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d16:	68a2      	ldr	r2, [r4, #8]
 8001d18:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001d22:	4e13      	ldr	r6, [pc, #76]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d24:	6833      	ldr	r3, [r6, #0]
 8001d26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d2a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001d2c:	f7fe fc50 	bl	80005d0 <HAL_GetTick>
 8001d30:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d32:	6833      	ldr	r3, [r6, #0]
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	f53f aed7 	bmi.w	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d3a:	f7fe fc49 	bl	80005d0 <HAL_GetTick>
 8001d3e:	1bc0      	subs	r0, r0, r7
 8001d40:	2864      	cmp	r0, #100	; 0x64
 8001d42:	d9f6      	bls.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001d44:	e753      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d46:	f7fe fc43 	bl	80005d0 <HAL_GetTick>
 8001d4a:	1bc0      	subs	r0, r0, r7
 8001d4c:	2864      	cmp	r0, #100	; 0x64
 8001d4e:	d984      	bls.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001d50:	e74d      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d52:	f7fe fc3d 	bl	80005d0 <HAL_GetTick>
 8001d56:	1b80      	subs	r0, r0, r6
 8001d58:	2864      	cmp	r0, #100	; 0x64
 8001d5a:	f67f aecf 	bls.w	8001afc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001d5e:	e746      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d60:	f7fe fc36 	bl	80005d0 <HAL_GetTick>
 8001d64:	1b40      	subs	r0, r0, r5
 8001d66:	2864      	cmp	r0, #100	; 0x64
 8001d68:	f67f af32 	bls.w	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001d6c:	e73f      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800

08001d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d74:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d76:	4604      	mov	r4, r0
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d04e      	beq.n	8001e1a <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d80:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001d84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d88:	b91b      	cbnz	r3, 8001d92 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d8a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d8e:	f002 f983 	bl	8004098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d92:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d94:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d96:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d98:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001d9c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d9e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001da6:	600b      	str	r3, [r1, #0]
 8001da8:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dac:	d932      	bls.n	8001e14 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dae:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001db0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db4:	bf18      	it	ne
 8001db6:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001db8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001dba:	b92b      	cbnz	r3, 8001dc8 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dbc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001dc0:	bf8c      	ite	hi
 8001dc2:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001dc4:	2301      	movls	r3, #1
 8001dc6:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001dc8:	68a6      	ldr	r6, [r4, #8]
 8001dca:	6863      	ldr	r3, [r4, #4]
 8001dcc:	69a5      	ldr	r5, [r4, #24]
 8001dce:	4333      	orrs	r3, r6
 8001dd0:	6926      	ldr	r6, [r4, #16]
 8001dd2:	4333      	orrs	r3, r6
 8001dd4:	6966      	ldr	r6, [r4, #20]
 8001dd6:	4333      	orrs	r3, r6
 8001dd8:	69e6      	ldr	r6, [r4, #28]
 8001dda:	4333      	orrs	r3, r6
 8001ddc:	6a26      	ldr	r6, [r4, #32]
 8001dde:	4333      	orrs	r3, r6
 8001de0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001de2:	4333      	orrs	r3, r6
 8001de4:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001de8:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001dea:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001dec:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001df0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001df4:	431a      	orrs	r2, r3
 8001df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	432a      	orrs	r2, r5
 8001dfc:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dfe:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001e00:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e02:	69cb      	ldr	r3, [r1, #28]
 8001e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e08:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001e0a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e0c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e0e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e18:	e7cc      	b.n	8001db4 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001e1a:	2001      	movs	r0, #1
}
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e20 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e20:	6a03      	ldr	r3, [r0, #32]
 8001e22:	f023 0301 	bic.w	r3, r3, #1
{
 8001e26:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e28:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e2a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e2c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e2e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e30:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8001e34:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e36:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001e3a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e3e:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e40:	688d      	ldr	r5, [r1, #8]
 8001e42:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e44:	4d0e      	ldr	r5, [pc, #56]	; (8001e80 <TIM_OC1_SetConfig+0x60>)
 8001e46:	42a8      	cmp	r0, r5
 8001e48:	d002      	beq.n	8001e50 <TIM_OC1_SetConfig+0x30>
 8001e4a:	4e0e      	ldr	r6, [pc, #56]	; (8001e84 <TIM_OC1_SetConfig+0x64>)
 8001e4c:	42b0      	cmp	r0, r6
 8001e4e:	d111      	bne.n	8001e74 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e50:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e54:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e56:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8001e58:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e5c:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e60:	d002      	beq.n	8001e68 <TIM_OC1_SetConfig+0x48>
 8001e62:	4d08      	ldr	r5, [pc, #32]	; (8001e84 <TIM_OC1_SetConfig+0x64>)
 8001e64:	42a8      	cmp	r0, r5
 8001e66:	d105      	bne.n	8001e74 <TIM_OC1_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e68:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e6e:	698e      	ldr	r6, [r1, #24]
 8001e70:	4335      	orrs	r5, r6
 8001e72:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e74:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e76:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e78:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001e7a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e7c:	6203      	str	r3, [r0, #32]
 8001e7e:	bd70      	pop	{r4, r5, r6, pc}
 8001e80:	40010000 	.word	0x40010000
 8001e84:	40010400 	.word	0x40010400

08001e88 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e88:	6a03      	ldr	r3, [r0, #32]
 8001e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8001e8e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e92:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e94:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e96:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8001e9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e9e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001ea2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ea6:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ea8:	688d      	ldr	r5, [r1, #8]
 8001eaa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001eae:	4d11      	ldr	r5, [pc, #68]	; (8001ef4 <TIM_OC3_SetConfig+0x6c>)
 8001eb0:	42a8      	cmp	r0, r5
 8001eb2:	d003      	beq.n	8001ebc <TIM_OC3_SetConfig+0x34>
 8001eb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eb8:	42a8      	cmp	r0, r5
 8001eba:	d114      	bne.n	8001ee6 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ebc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ec2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ec6:	4d0b      	ldr	r5, [pc, #44]	; (8001ef4 <TIM_OC3_SetConfig+0x6c>)
 8001ec8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ece:	d003      	beq.n	8001ed8 <TIM_OC3_SetConfig+0x50>
 8001ed0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ed4:	42a8      	cmp	r0, r5
 8001ed6:	d106      	bne.n	8001ee6 <TIM_OC3_SetConfig+0x5e>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ed8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001eda:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ede:	698e      	ldr	r6, [r1, #24]
 8001ee0:	4335      	orrs	r5, r6
 8001ee2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ee6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ee8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001eea:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001eec:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eee:	6203      	str	r3, [r0, #32]
 8001ef0:	bd70      	pop	{r4, r5, r6, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40010000 	.word	0x40010000

08001ef8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ef8:	6a03      	ldr	r3, [r0, #32]
 8001efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8001efe:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f00:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f02:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f04:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f06:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f12:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f16:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f1a:	688d      	ldr	r5, [r1, #8]
 8001f1c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f20:	4d08      	ldr	r5, [pc, #32]	; (8001f44 <TIM_OC4_SetConfig+0x4c>)
 8001f22:	42a8      	cmp	r0, r5
 8001f24:	d003      	beq.n	8001f2e <TIM_OC4_SetConfig+0x36>
 8001f26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f2a:	42a8      	cmp	r0, r5
 8001f2c:	d104      	bne.n	8001f38 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f2e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f32:	694d      	ldr	r5, [r1, #20]
 8001f34:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f38:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f3a:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f3c:	684b      	ldr	r3, [r1, #4]
 8001f3e:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f40:	6202      	str	r2, [r0, #32]
 8001f42:	bd30      	pop	{r4, r5, pc}
 8001f44:	40010000 	.word	0x40010000

08001f48 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001f48:	6a03      	ldr	r3, [r0, #32]
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8001f4e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001f50:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f52:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f54:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f56:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001f58:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8001f5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001f66:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001f68:	688d      	ldr	r5, [r1, #8]
 8001f6a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f6e:	4d09      	ldr	r5, [pc, #36]	; (8001f94 <TIM_OC5_SetConfig+0x4c>)
 8001f70:	42a8      	cmp	r0, r5
 8001f72:	d003      	beq.n	8001f7c <TIM_OC5_SetConfig+0x34>
 8001f74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f78:	42a8      	cmp	r0, r5
 8001f7a:	d104      	bne.n	8001f86 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001f7c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001f80:	694d      	ldr	r5, [r1, #20]
 8001f82:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f86:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001f88:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001f8a:	684b      	ldr	r3, [r1, #4]
 8001f8c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f8e:	6202      	str	r2, [r0, #32]
 8001f90:	bd30      	pop	{r4, r5, pc}
 8001f92:	bf00      	nop
 8001f94:	40010000 	.word	0x40010000

08001f98 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001f98:	6a03      	ldr	r3, [r0, #32]
 8001f9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8001f9e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001fa0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fa2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fa4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001fa6:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001fa8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fb6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001fba:	688d      	ldr	r5, [r1, #8]
 8001fbc:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fc0:	4d08      	ldr	r5, [pc, #32]	; (8001fe4 <TIM_OC6_SetConfig+0x4c>)
 8001fc2:	42a8      	cmp	r0, r5
 8001fc4:	d003      	beq.n	8001fce <TIM_OC6_SetConfig+0x36>
 8001fc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001fca:	42a8      	cmp	r0, r5
 8001fcc:	d104      	bne.n	8001fd8 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001fce:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001fd2:	694d      	ldr	r5, [r1, #20]
 8001fd4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fd8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001fda:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001fdc:	684b      	ldr	r3, [r1, #4]
 8001fde:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fe0:	6202      	str	r2, [r0, #32]
 8001fe2:	bd30      	pop	{r4, r5, pc}
 8001fe4:	40010000 	.word	0x40010000

08001fe8 <HAL_TIM_OC_MspInit>:
 8001fe8:	4770      	bx	lr
	...

08001fec <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	4a30      	ldr	r2, [pc, #192]	; (80020b0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001fee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff0:	4290      	cmp	r0, r2
 8001ff2:	d012      	beq.n	800201a <TIM_Base_SetConfig+0x2e>
 8001ff4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ff8:	d00f      	beq.n	800201a <TIM_Base_SetConfig+0x2e>
 8001ffa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001ffe:	4290      	cmp	r0, r2
 8002000:	d00b      	beq.n	800201a <TIM_Base_SetConfig+0x2e>
 8002002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002006:	4290      	cmp	r0, r2
 8002008:	d007      	beq.n	800201a <TIM_Base_SetConfig+0x2e>
 800200a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800200e:	4290      	cmp	r0, r2
 8002010:	d003      	beq.n	800201a <TIM_Base_SetConfig+0x2e>
 8002012:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002016:	4290      	cmp	r0, r2
 8002018:	d119      	bne.n	800204e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800201a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800201c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002020:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002022:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <TIM_Base_SetConfig+0xc4>)
 8002024:	4290      	cmp	r0, r2
 8002026:	d029      	beq.n	800207c <TIM_Base_SetConfig+0x90>
 8002028:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800202c:	d026      	beq.n	800207c <TIM_Base_SetConfig+0x90>
 800202e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002032:	4290      	cmp	r0, r2
 8002034:	d022      	beq.n	800207c <TIM_Base_SetConfig+0x90>
 8002036:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800203a:	4290      	cmp	r0, r2
 800203c:	d01e      	beq.n	800207c <TIM_Base_SetConfig+0x90>
 800203e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002042:	4290      	cmp	r0, r2
 8002044:	d01a      	beq.n	800207c <TIM_Base_SetConfig+0x90>
 8002046:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800204a:	4290      	cmp	r0, r2
 800204c:	d016      	beq.n	800207c <TIM_Base_SetConfig+0x90>
 800204e:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <TIM_Base_SetConfig+0xc8>)
 8002050:	4290      	cmp	r0, r2
 8002052:	d013      	beq.n	800207c <TIM_Base_SetConfig+0x90>
 8002054:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002058:	4290      	cmp	r0, r2
 800205a:	d00f      	beq.n	800207c <TIM_Base_SetConfig+0x90>
 800205c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002060:	4290      	cmp	r0, r2
 8002062:	d00b      	beq.n	800207c <TIM_Base_SetConfig+0x90>
 8002064:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002068:	4290      	cmp	r0, r2
 800206a:	d007      	beq.n	800207c <TIM_Base_SetConfig+0x90>
 800206c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002070:	4290      	cmp	r0, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0x90>
 8002074:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002078:	4290      	cmp	r0, r2
 800207a:	d103      	bne.n	8002084 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800207c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002080:	68ca      	ldr	r2, [r1, #12]
 8002082:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002084:	694a      	ldr	r2, [r1, #20]
 8002086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800208a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800208c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800208e:	688b      	ldr	r3, [r1, #8]
 8002090:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002092:	680b      	ldr	r3, [r1, #0]
 8002094:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <TIM_Base_SetConfig+0xc4>)
 8002098:	4298      	cmp	r0, r3
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0xb8>
 800209c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a0:	4298      	cmp	r0, r3
 80020a2:	d101      	bne.n	80020a8 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80020a4:	690b      	ldr	r3, [r1, #16]
 80020a6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80020a8:	2301      	movs	r3, #1
 80020aa:	6143      	str	r3, [r0, #20]
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40014000 	.word	0x40014000

080020b8 <HAL_TIM_Base_Init>:
{
 80020b8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80020ba:	4604      	mov	r4, r0
 80020bc:	b1a0      	cbz	r0, 80020e8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80020be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020c6:	b91b      	cbnz	r3, 80020d0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80020c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020cc:	f002 f82c 	bl	8004128 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80020d0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d2:	6820      	ldr	r0, [r4, #0]
 80020d4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80020d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020da:	f7ff ff87 	bl	8001fec <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80020de:	2301      	movs	r3, #1
  return HAL_OK;
 80020e0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80020e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80020e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020e8:	2001      	movs	r0, #1
}
 80020ea:	bd10      	pop	{r4, pc}

080020ec <HAL_TIM_OC_Init>:
{
 80020ec:	b510      	push	{r4, lr}
  if (htim == NULL)
 80020ee:	4604      	mov	r4, r0
 80020f0:	b1a0      	cbz	r0, 800211c <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80020f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020fa:	b91b      	cbnz	r3, 8002104 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80020fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002100:	f7ff ff72 	bl	8001fe8 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002106:	6820      	ldr	r0, [r4, #0]
 8002108:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800210a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800210e:	f7ff ff6d 	bl	8001fec <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002112:	2301      	movs	r3, #1
  return HAL_OK;
 8002114:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002116:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800211a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800211c:	2001      	movs	r0, #1
}
 800211e:	bd10      	pop	{r4, pc}

08002120 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002120:	6a03      	ldr	r3, [r0, #32]
 8002122:	f023 0310 	bic.w	r3, r3, #16
{
 8002126:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002128:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800212a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800212c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800212e:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002130:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002134:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002136:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800213a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800213e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002142:	688d      	ldr	r5, [r1, #8]
 8002144:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002148:	4d10      	ldr	r5, [pc, #64]	; (800218c <TIM_OC2_SetConfig+0x6c>)
 800214a:	42a8      	cmp	r0, r5
 800214c:	d003      	beq.n	8002156 <TIM_OC2_SetConfig+0x36>
 800214e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002152:	42a8      	cmp	r0, r5
 8002154:	d114      	bne.n	8002180 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002156:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800215c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002160:	4d0a      	ldr	r5, [pc, #40]	; (800218c <TIM_OC2_SetConfig+0x6c>)
 8002162:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002168:	d003      	beq.n	8002172 <TIM_OC2_SetConfig+0x52>
 800216a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800216e:	42a8      	cmp	r0, r5
 8002170:	d106      	bne.n	8002180 <TIM_OC2_SetConfig+0x60>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002172:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002174:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002178:	698e      	ldr	r6, [r1, #24]
 800217a:	4335      	orrs	r5, r6
 800217c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002180:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002182:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002184:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002186:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002188:	6203      	str	r3, [r0, #32]
 800218a:	bd70      	pop	{r4, r5, r6, pc}
 800218c:	40010000 	.word	0x40010000

08002190 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002190:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002194:	2b01      	cmp	r3, #1
{
 8002196:	b510      	push	{r4, lr}
 8002198:	4604      	mov	r4, r0
 800219a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800219e:	d010      	beq.n	80021c2 <HAL_TIM_OC_ConfigChannel+0x32>
 80021a0:	2301      	movs	r3, #1
  switch (Channel)
 80021a2:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80021a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80021ac:	d01c      	beq.n	80021e8 <HAL_TIM_OC_ConfigChannel+0x58>
 80021ae:	d809      	bhi.n	80021c4 <HAL_TIM_OC_ConfigChannel+0x34>
 80021b0:	b192      	cbz	r2, 80021d8 <HAL_TIM_OC_ConfigChannel+0x48>
 80021b2:	2a04      	cmp	r2, #4
 80021b4:	d014      	beq.n	80021e0 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80021b6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80021b8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80021ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80021be:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80021c2:	bd10      	pop	{r4, pc}
  switch (Channel)
 80021c4:	2a10      	cmp	r2, #16
 80021c6:	d013      	beq.n	80021f0 <HAL_TIM_OC_ConfigChannel+0x60>
 80021c8:	2a14      	cmp	r2, #20
 80021ca:	d015      	beq.n	80021f8 <HAL_TIM_OC_ConfigChannel+0x68>
 80021cc:	2a0c      	cmp	r2, #12
 80021ce:	d1f2      	bne.n	80021b6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021d0:	6820      	ldr	r0, [r4, #0]
 80021d2:	f7ff fe91 	bl	8001ef8 <TIM_OC4_SetConfig>
      break;
 80021d6:	e7ee      	b.n	80021b6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021d8:	6820      	ldr	r0, [r4, #0]
 80021da:	f7ff fe21 	bl	8001e20 <TIM_OC1_SetConfig>
      break;
 80021de:	e7ea      	b.n	80021b6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021e0:	6820      	ldr	r0, [r4, #0]
 80021e2:	f7ff ff9d 	bl	8002120 <TIM_OC2_SetConfig>
      break;
 80021e6:	e7e6      	b.n	80021b6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021e8:	6820      	ldr	r0, [r4, #0]
 80021ea:	f7ff fe4d 	bl	8001e88 <TIM_OC3_SetConfig>
      break;
 80021ee:	e7e2      	b.n	80021b6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80021f0:	6820      	ldr	r0, [r4, #0]
 80021f2:	f7ff fea9 	bl	8001f48 <TIM_OC5_SetConfig>
      break;
 80021f6:	e7de      	b.n	80021b6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80021f8:	6820      	ldr	r0, [r4, #0]
 80021fa:	f7ff fecd 	bl	8001f98 <TIM_OC6_SetConfig>
      break;
 80021fe:	e7da      	b.n	80021b6 <HAL_TIM_OC_ConfigChannel+0x26>

08002200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002200:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002202:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8002204:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002206:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800220a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800220e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002210:	6083      	str	r3, [r0, #8]
 8002212:	bd10      	pop	{r4, pc}

08002214 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002214:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002218:	2b01      	cmp	r3, #1
{
 800221a:	b570      	push	{r4, r5, r6, lr}
 800221c:	4604      	mov	r4, r0
 800221e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002222:	d017      	beq.n	8002254 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8002224:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002228:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 800222a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800222c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002230:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002232:	4b41      	ldr	r3, [pc, #260]	; (8002338 <HAL_TIM_ConfigClockSource+0x124>)
 8002234:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002236:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002238:	680b      	ldr	r3, [r1, #0]
 800223a:	2b40      	cmp	r3, #64	; 0x40
 800223c:	d065      	beq.n	800230a <HAL_TIM_ConfigClockSource+0xf6>
 800223e:	d815      	bhi.n	800226c <HAL_TIM_ConfigClockSource+0x58>
 8002240:	2b10      	cmp	r3, #16
 8002242:	d00c      	beq.n	800225e <HAL_TIM_ConfigClockSource+0x4a>
 8002244:	d807      	bhi.n	8002256 <HAL_TIM_ConfigClockSource+0x42>
 8002246:	b153      	cbz	r3, 800225e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8002248:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800224a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800224c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002250:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002254:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002256:	2b20      	cmp	r3, #32
 8002258:	d001      	beq.n	800225e <HAL_TIM_ConfigClockSource+0x4a>
 800225a:	2b30      	cmp	r3, #48	; 0x30
 800225c:	d1f4      	bne.n	8002248 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800225e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002260:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002264:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002268:	4313      	orrs	r3, r2
 800226a:	e01a      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 800226c:	2b60      	cmp	r3, #96	; 0x60
 800226e:	d034      	beq.n	80022da <HAL_TIM_ConfigClockSource+0xc6>
 8002270:	d819      	bhi.n	80022a6 <HAL_TIM_ConfigClockSource+0x92>
 8002272:	2b50      	cmp	r3, #80	; 0x50
 8002274:	d1e8      	bne.n	8002248 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002276:	684a      	ldr	r2, [r1, #4]
 8002278:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800227a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800227c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800227e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002282:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8002286:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002288:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800228a:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800228c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002290:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002294:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002296:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002298:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800229a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800229e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80022a2:	6083      	str	r3, [r0, #8]
 80022a4:	e7d0      	b.n	8002248 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 80022a6:	2b70      	cmp	r3, #112	; 0x70
 80022a8:	d00c      	beq.n	80022c4 <HAL_TIM_ConfigClockSource+0xb0>
 80022aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ae:	d1cb      	bne.n	8002248 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80022b0:	68cb      	ldr	r3, [r1, #12]
 80022b2:	684a      	ldr	r2, [r1, #4]
 80022b4:	6889      	ldr	r1, [r1, #8]
 80022b6:	f7ff ffa3 	bl	8002200 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ba:	6822      	ldr	r2, [r4, #0]
 80022bc:	6893      	ldr	r3, [r2, #8]
 80022be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c2:	e008      	b.n	80022d6 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 80022c4:	68cb      	ldr	r3, [r1, #12]
 80022c6:	684a      	ldr	r2, [r1, #4]
 80022c8:	6889      	ldr	r1, [r1, #8]
 80022ca:	f7ff ff99 	bl	8002200 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022ce:	6822      	ldr	r2, [r4, #0]
 80022d0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022d6:	6093      	str	r3, [r2, #8]
      break;
 80022d8:	e7b6      	b.n	8002248 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022da:	684d      	ldr	r5, [r1, #4]
 80022dc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022de:	6a01      	ldr	r1, [r0, #32]
 80022e0:	f021 0110 	bic.w	r1, r1, #16
 80022e4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022e6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80022e8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022ea:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022f2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80022f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80022fa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80022fc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80022fe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002304:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002308:	e7cb      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800230a:	684a      	ldr	r2, [r1, #4]
 800230c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800230e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002310:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002312:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002316:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800231a:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800231c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800231e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002320:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002324:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002328:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800232a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800232c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002332:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002336:	e7b4      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x8e>
 8002338:	fffe0088 	.word	0xfffe0088

0800233c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800233c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002340:	2b01      	cmp	r3, #1
 8002342:	f04f 0302 	mov.w	r3, #2
{
 8002346:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002348:	d01f      	beq.n	800238a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800234a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800234c:	4d10      	ldr	r5, [pc, #64]	; (8002390 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 800234e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002352:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002354:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002356:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002358:	d003      	beq.n	8002362 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800235a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800235e:	42aa      	cmp	r2, r5
 8002360:	d103      	bne.n	800236a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002362:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002366:	684d      	ldr	r5, [r1, #4]
 8002368:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800236a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800236c:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002370:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002372:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002376:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002378:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800237a:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800237c:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 800237e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002380:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002384:	2300      	movs	r3, #0
 8002386:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800238a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800238c:	bd30      	pop	{r4, r5, pc}
 800238e:	bf00      	nop
 8002390:	40010000 	.word	0x40010000

08002394 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002394:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002398:	2b01      	cmp	r3, #1
{
 800239a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800239c:	d038      	beq.n	8002410 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800239e:	68cb      	ldr	r3, [r1, #12]
 80023a0:	688a      	ldr	r2, [r1, #8]
 80023a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80023a6:	4c1b      	ldr	r4, [pc, #108]	; (8002414 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80023a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80023aa:	684a      	ldr	r2, [r1, #4]
 80023ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80023b2:	680a      	ldr	r2, [r1, #0]
 80023b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80023ba:	690a      	ldr	r2, [r1, #16]
 80023bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80023c2:	694a      	ldr	r2, [r1, #20]
 80023c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80023ca:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80023cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80023d2:	698a      	ldr	r2, [r1, #24]
 80023d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80023d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80023dc:	6802      	ldr	r2, [r0, #0]
 80023de:	42a2      	cmp	r2, r4
 80023e0:	d003      	beq.n	80023ea <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 80023e2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80023e6:	42a2      	cmp	r2, r4
 80023e8:	d10c      	bne.n	8002404 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80023ea:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80023ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80023f0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80023f4:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80023f6:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80023f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80023fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002402:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002404:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002406:	2300      	movs	r3, #0
 8002408:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800240c:	4618      	mov	r0, r3
 800240e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002410:	2002      	movs	r0, #2
}
 8002412:	bd10      	pop	{r4, pc}
 8002414:	40010000 	.word	0x40010000

08002418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002418:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800241a:	69c2      	ldr	r2, [r0, #28]
{
 800241c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800241e:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002420:	6881      	ldr	r1, [r0, #8]
 8002422:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002424:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002426:	4301      	orrs	r1, r0
 8002428:	6960      	ldr	r0, [r4, #20]
 800242a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800242c:	4890      	ldr	r0, [pc, #576]	; (8002670 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800242e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002430:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8002432:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002434:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002436:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002438:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002440:	4301      	orrs	r1, r0
 8002442:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002444:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002446:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002448:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800244a:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 800244e:	4301      	orrs	r1, r0
 8002450:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002452:	4988      	ldr	r1, [pc, #544]	; (8002674 <UART_SetConfig+0x25c>)
 8002454:	428b      	cmp	r3, r1
 8002456:	d117      	bne.n	8002488 <UART_SetConfig+0x70>
 8002458:	4b87      	ldr	r3, [pc, #540]	; (8002678 <UART_SetConfig+0x260>)
 800245a:	4988      	ldr	r1, [pc, #544]	; (800267c <UART_SetConfig+0x264>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002464:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002468:	5ccb      	ldrb	r3, [r1, r3]
 800246a:	d129      	bne.n	80024c0 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 800246c:	2b08      	cmp	r3, #8
 800246e:	f200 809d 	bhi.w	80025ac <UART_SetConfig+0x194>
 8002472:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002476:	008c      	.short	0x008c
 8002478:	00ee00e8 	.word	0x00ee00e8
 800247c:	00fa009b 	.word	0x00fa009b
 8002480:	009b009b 	.word	0x009b009b
 8002484:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002488:	497d      	ldr	r1, [pc, #500]	; (8002680 <UART_SetConfig+0x268>)
 800248a:	428b      	cmp	r3, r1
 800248c:	d106      	bne.n	800249c <UART_SetConfig+0x84>
 800248e:	4b7a      	ldr	r3, [pc, #488]	; (8002678 <UART_SetConfig+0x260>)
 8002490:	497c      	ldr	r1, [pc, #496]	; (8002684 <UART_SetConfig+0x26c>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	e7e3      	b.n	8002464 <UART_SetConfig+0x4c>
 800249c:	497a      	ldr	r1, [pc, #488]	; (8002688 <UART_SetConfig+0x270>)
 800249e:	428b      	cmp	r3, r1
 80024a0:	d11d      	bne.n	80024de <UART_SetConfig+0xc6>
 80024a2:	4b75      	ldr	r3, [pc, #468]	; (8002678 <UART_SetConfig+0x260>)
 80024a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	f000 80d9 	beq.w	8002664 <UART_SetConfig+0x24c>
 80024b2:	d80e      	bhi.n	80024d2 <UART_SetConfig+0xba>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d067      	beq.n	8002588 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80024bc:	d076      	beq.n	80025ac <UART_SetConfig+0x194>
 80024be:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d873      	bhi.n	80025ac <UART_SetConfig+0x194>
 80024c4:	e8df f003 	tbb	[pc, r3]
 80024c8:	72a29f99 	.word	0x72a29f99
 80024cc:	727272b4 	.word	0x727272b4
 80024d0:	b7          	.byte	0xb7
 80024d1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	f000 80ba 	beq.w	800264c <UART_SetConfig+0x234>
 80024d8:	2b30      	cmp	r3, #48	; 0x30
 80024da:	d03f      	beq.n	800255c <UART_SetConfig+0x144>
 80024dc:	e7ec      	b.n	80024b8 <UART_SetConfig+0xa0>
 80024de:	496b      	ldr	r1, [pc, #428]	; (800268c <UART_SetConfig+0x274>)
 80024e0:	428b      	cmp	r3, r1
 80024e2:	d10d      	bne.n	8002500 <UART_SetConfig+0xe8>
 80024e4:	4b64      	ldr	r3, [pc, #400]	; (8002678 <UART_SetConfig+0x260>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80024ee:	2b40      	cmp	r3, #64	; 0x40
 80024f0:	f000 80b8 	beq.w	8002664 <UART_SetConfig+0x24c>
 80024f4:	d9de      	bls.n	80024b4 <UART_SetConfig+0x9c>
 80024f6:	2b80      	cmp	r3, #128	; 0x80
 80024f8:	f000 80a8 	beq.w	800264c <UART_SetConfig+0x234>
 80024fc:	2bc0      	cmp	r3, #192	; 0xc0
 80024fe:	e7ec      	b.n	80024da <UART_SetConfig+0xc2>
 8002500:	4963      	ldr	r1, [pc, #396]	; (8002690 <UART_SetConfig+0x278>)
 8002502:	428b      	cmp	r3, r1
 8002504:	d110      	bne.n	8002528 <UART_SetConfig+0x110>
 8002506:	4b5c      	ldr	r3, [pc, #368]	; (8002678 <UART_SetConfig+0x260>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002514:	f000 80a6 	beq.w	8002664 <UART_SetConfig+0x24c>
 8002518:	d9cc      	bls.n	80024b4 <UART_SetConfig+0x9c>
 800251a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800251e:	f000 8095 	beq.w	800264c <UART_SetConfig+0x234>
 8002522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002526:	e7d8      	b.n	80024da <UART_SetConfig+0xc2>
 8002528:	495a      	ldr	r1, [pc, #360]	; (8002694 <UART_SetConfig+0x27c>)
 800252a:	428b      	cmp	r3, r1
 800252c:	d11e      	bne.n	800256c <UART_SetConfig+0x154>
 800252e:	4b52      	ldr	r3, [pc, #328]	; (8002678 <UART_SetConfig+0x260>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253c:	f000 8092 	beq.w	8002664 <UART_SetConfig+0x24c>
 8002540:	d806      	bhi.n	8002550 <UART_SetConfig+0x138>
 8002542:	2b00      	cmp	r3, #0
 8002544:	d07c      	beq.n	8002640 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002546:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800254a:	d12f      	bne.n	80025ac <UART_SetConfig+0x194>
 800254c:	2310      	movs	r3, #16
 800254e:	e78d      	b.n	800246c <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002554:	d07a      	beq.n	800264c <UART_SetConfig+0x234>
 8002556:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800255a:	d1f4      	bne.n	8002546 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800255c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002560:	d169      	bne.n	8002636 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002562:	6863      	ldr	r3, [r4, #4]
 8002564:	0858      	lsrs	r0, r3, #1
 8002566:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800256a:	e078      	b.n	800265e <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800256c:	494a      	ldr	r1, [pc, #296]	; (8002698 <UART_SetConfig+0x280>)
 800256e:	428b      	cmp	r3, r1
 8002570:	d124      	bne.n	80025bc <UART_SetConfig+0x1a4>
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <UART_SetConfig+0x260>)
 8002574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002578:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800257c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002580:	d070      	beq.n	8002664 <UART_SetConfig+0x24c>
 8002582:	d815      	bhi.n	80025b0 <UART_SetConfig+0x198>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1de      	bne.n	8002546 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002588:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800258c:	d135      	bne.n	80025fa <UART_SetConfig+0x1e2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800258e:	f7ff f923 	bl	80017d8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002592:	6862      	ldr	r2, [r4, #4]
 8002594:	0853      	lsrs	r3, r2, #1
 8002596:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800259a:	fbb0 f0f2 	udiv	r0, r0, r2
 800259e:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025a0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80025a4:	f1a0 0210 	sub.w	r2, r0, #16
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d91a      	bls.n	80025e2 <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 80025ac:	2001      	movs	r0, #1
 80025ae:	e020      	b.n	80025f2 <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b4:	d04a      	beq.n	800264c <UART_SetConfig+0x234>
 80025b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025ba:	e7ce      	b.n	800255a <UART_SetConfig+0x142>
 80025bc:	4937      	ldr	r1, [pc, #220]	; (800269c <UART_SetConfig+0x284>)
 80025be:	428b      	cmp	r3, r1
 80025c0:	d1f4      	bne.n	80025ac <UART_SetConfig+0x194>
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <UART_SetConfig+0x260>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025d0:	d048      	beq.n	8002664 <UART_SetConfig+0x24c>
 80025d2:	f67f af6f 	bls.w	80024b4 <UART_SetConfig+0x9c>
 80025d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025da:	d037      	beq.n	800264c <UART_SetConfig+0x234>
 80025dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80025e0:	e77b      	b.n	80024da <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025e2:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025e6:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 80025ea:	6822      	ldr	r2, [r4, #0]
 80025ec:	4318      	orrs	r0, r3
 80025ee:	60d0      	str	r0, [r2, #12]
 80025f0:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80025f6:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80025f8:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025fa:	f7ff f8ed 	bl	80017d8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025fe:	6863      	ldr	r3, [r4, #4]
 8002600:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002604:	e008      	b.n	8002618 <UART_SetConfig+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002606:	f7ff f8f7 	bl	80017f8 <HAL_RCC_GetPCLK2Freq>
 800260a:	e7f8      	b.n	80025fe <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800260c:	6863      	ldr	r3, [r4, #4]
 800260e:	0858      	lsrs	r0, r3, #1
 8002610:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8002614:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002618:	fbb0 f0f3 	udiv	r0, r0, r3
 800261c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800261e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002622:	f1a0 0210 	sub.w	r2, r0, #16
 8002626:	429a      	cmp	r2, r3
 8002628:	d8c0      	bhi.n	80025ac <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	60d8      	str	r0, [r3, #12]
 800262e:	e7df      	b.n	80025f0 <UART_SetConfig+0x1d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002630:	f7ff f800 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 8002634:	e7e3      	b.n	80025fe <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002636:	6863      	ldr	r3, [r4, #4]
 8002638:	0858      	lsrs	r0, r3, #1
 800263a:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 800263e:	e7eb      	b.n	8002618 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002640:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002644:	d1df      	bne.n	8002606 <UART_SetConfig+0x1ee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002646:	f7ff f8d7 	bl	80017f8 <HAL_RCC_GetPCLK2Freq>
 800264a:	e7a2      	b.n	8002592 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800264c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002650:	d1dc      	bne.n	800260c <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002652:	6863      	ldr	r3, [r4, #4]
 8002654:	0858      	lsrs	r0, r3, #1
 8002656:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 800265a:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800265e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002662:	e79c      	b.n	800259e <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002664:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002668:	d1e2      	bne.n	8002630 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800266a:	f7fe ffe3 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 800266e:	e790      	b.n	8002592 <UART_SetConfig+0x17a>
 8002670:	efff69f3 	.word	0xefff69f3
 8002674:	40011000 	.word	0x40011000
 8002678:	40023800 	.word	0x40023800
 800267c:	08004a0c 	.word	0x08004a0c
 8002680:	40004400 	.word	0x40004400
 8002684:	08004a10 	.word	0x08004a10
 8002688:	40004800 	.word	0x40004800
 800268c:	40004c00 	.word	0x40004c00
 8002690:	40005000 	.word	0x40005000
 8002694:	40011400 	.word	0x40011400
 8002698:	40007800 	.word	0x40007800
 800269c:	40007c00 	.word	0x40007c00

080026a0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026a2:	07da      	lsls	r2, r3, #31
{
 80026a4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026a6:	d506      	bpl.n	80026b6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026a8:	6801      	ldr	r1, [r0, #0]
 80026aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80026ac:	684a      	ldr	r2, [r1, #4]
 80026ae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80026b2:	4322      	orrs	r2, r4
 80026b4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026b6:	079c      	lsls	r4, r3, #30
 80026b8:	d506      	bpl.n	80026c8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026ba:	6801      	ldr	r1, [r0, #0]
 80026bc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80026be:	684a      	ldr	r2, [r1, #4]
 80026c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026c4:	4322      	orrs	r2, r4
 80026c6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026c8:	0759      	lsls	r1, r3, #29
 80026ca:	d506      	bpl.n	80026da <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026cc:	6801      	ldr	r1, [r0, #0]
 80026ce:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80026d0:	684a      	ldr	r2, [r1, #4]
 80026d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026d6:	4322      	orrs	r2, r4
 80026d8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026da:	071a      	lsls	r2, r3, #28
 80026dc:	d506      	bpl.n	80026ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026de:	6801      	ldr	r1, [r0, #0]
 80026e0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80026e2:	684a      	ldr	r2, [r1, #4]
 80026e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e8:	4322      	orrs	r2, r4
 80026ea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026ec:	06dc      	lsls	r4, r3, #27
 80026ee:	d506      	bpl.n	80026fe <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026f0:	6801      	ldr	r1, [r0, #0]
 80026f2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80026f4:	688a      	ldr	r2, [r1, #8]
 80026f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026fa:	4322      	orrs	r2, r4
 80026fc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026fe:	0699      	lsls	r1, r3, #26
 8002700:	d506      	bpl.n	8002710 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002702:	6801      	ldr	r1, [r0, #0]
 8002704:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002706:	688a      	ldr	r2, [r1, #8]
 8002708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800270c:	4322      	orrs	r2, r4
 800270e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002710:	065a      	lsls	r2, r3, #25
 8002712:	d510      	bpl.n	8002736 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002714:	6801      	ldr	r1, [r0, #0]
 8002716:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002718:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800271a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800271e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002722:	ea42 0204 	orr.w	r2, r2, r4
 8002726:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002728:	d105      	bne.n	8002736 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800272a:	684a      	ldr	r2, [r1, #4]
 800272c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800272e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002732:	4322      	orrs	r2, r4
 8002734:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002736:	061b      	lsls	r3, r3, #24
 8002738:	d506      	bpl.n	8002748 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800273a:	6802      	ldr	r2, [r0, #0]
 800273c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800273e:	6853      	ldr	r3, [r2, #4]
 8002740:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002744:	430b      	orrs	r3, r1
 8002746:	6053      	str	r3, [r2, #4]
 8002748:	bd10      	pop	{r4, pc}

0800274a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800274a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800274e:	9d06      	ldr	r5, [sp, #24]
 8002750:	4604      	mov	r4, r0
 8002752:	460f      	mov	r7, r1
 8002754:	4616      	mov	r6, r2
 8002756:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002758:	6821      	ldr	r1, [r4, #0]
 800275a:	69ca      	ldr	r2, [r1, #28]
 800275c:	ea37 0302 	bics.w	r3, r7, r2
 8002760:	bf0c      	ite	eq
 8002762:	2201      	moveq	r2, #1
 8002764:	2200      	movne	r2, #0
 8002766:	42b2      	cmp	r2, r6
 8002768:	d002      	beq.n	8002770 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800276a:	2000      	movs	r0, #0
}
 800276c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002770:	1c6b      	adds	r3, r5, #1
 8002772:	d0f2      	beq.n	800275a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002774:	f7fd ff2c 	bl	80005d0 <HAL_GetTick>
 8002778:	eba0 0008 	sub.w	r0, r0, r8
 800277c:	4285      	cmp	r5, r0
 800277e:	d301      	bcc.n	8002784 <UART_WaitOnFlagUntilTimeout+0x3a>
 8002780:	2d00      	cmp	r5, #0
 8002782:	d1e9      	bne.n	8002758 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002784:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002786:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800278e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002798:	2320      	movs	r3, #32
 800279a:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800279c:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800279e:	2300      	movs	r3, #0
 80027a0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80027a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080027a8 <HAL_UART_Transmit>:
{
 80027a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80027ac:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80027ae:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80027b0:	4604      	mov	r4, r0
 80027b2:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80027b4:	2b20      	cmp	r3, #32
{
 80027b6:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80027b8:	d14b      	bne.n	8002852 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 80027ba:	2900      	cmp	r1, #0
 80027bc:	d047      	beq.n	800284e <HAL_UART_Transmit+0xa6>
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d045      	beq.n	800284e <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80027c2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d043      	beq.n	8002852 <HAL_UART_Transmit+0xaa>
 80027ca:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027cc:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80027ce:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d6:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80027d8:	f7fd fefa 	bl	80005d0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027dc:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80027de:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80027e0:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80027e8:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ec:	d103      	bne.n	80027f6 <HAL_UART_Transmit+0x4e>
 80027ee:	6923      	ldr	r3, [r4, #16]
 80027f0:	b90b      	cbnz	r3, 80027f6 <HAL_UART_Transmit+0x4e>
 80027f2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80027f4:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80027f6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027fa:	463b      	mov	r3, r7
 80027fc:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002800:	b292      	uxth	r2, r2
 8002802:	b94a      	cbnz	r2, 8002818 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002804:	2140      	movs	r1, #64	; 0x40
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff ff9f 	bl	800274a <UART_WaitOnFlagUntilTimeout>
 800280c:	b950      	cbnz	r0, 8002824 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 800280e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002810:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8002814:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8002816:	e006      	b.n	8002826 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002818:	2200      	movs	r2, #0
 800281a:	2180      	movs	r1, #128	; 0x80
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff ff94 	bl	800274a <UART_WaitOnFlagUntilTimeout>
 8002822:	b118      	cbz	r0, 800282c <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002824:	2003      	movs	r0, #3
}
 8002826:	b003      	add	sp, #12
 8002828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800282c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800282e:	b95e      	cbnz	r6, 8002848 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002830:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002834:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002838:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800283a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800283e:	3b01      	subs	r3, #1
 8002840:	b29b      	uxth	r3, r3
 8002842:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002846:	e7d6      	b.n	80027f6 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002848:	f816 3b01 	ldrb.w	r3, [r6], #1
 800284c:	e7f4      	b.n	8002838 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800284e:	2001      	movs	r0, #1
 8002850:	e7e9      	b.n	8002826 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8002852:	2002      	movs	r0, #2
 8002854:	e7e7      	b.n	8002826 <HAL_UART_Transmit+0x7e>

08002856 <UART_CheckIdleState>:
{
 8002856:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002858:	2500      	movs	r5, #0
{
 800285a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285c:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800285e:	f7fd feb7 	bl	80005d0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002862:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002864:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	0712      	lsls	r2, r2, #28
 800286a:	d407      	bmi.n	800287c <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 800286c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800286e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002870:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002872:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002876:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8002878:	b003      	add	sp, #12
 800287a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800287c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002880:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002884:	4620      	mov	r0, r4
 8002886:	9200      	str	r2, [sp, #0]
 8002888:	462a      	mov	r2, r5
 800288a:	f7ff ff5e 	bl	800274a <UART_WaitOnFlagUntilTimeout>
 800288e:	2800      	cmp	r0, #0
 8002890:	d0ec      	beq.n	800286c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002892:	2003      	movs	r0, #3
 8002894:	e7f0      	b.n	8002878 <UART_CheckIdleState+0x22>

08002896 <HAL_UART_Init>:
{
 8002896:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002898:	4604      	mov	r4, r0
 800289a:	b340      	cbz	r0, 80028ee <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800289c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800289e:	b91b      	cbnz	r3, 80028a8 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80028a0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80028a4:	f001 fc7e 	bl	80041a4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80028a8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028aa:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ac:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80028ae:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80028b0:	6813      	ldr	r3, [r2, #0]
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028b8:	f7ff fdae 	bl	8002418 <UART_SetConfig>
 80028bc:	2801      	cmp	r0, #1
 80028be:	d016      	beq.n	80028ee <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028c2:	b113      	cbz	r3, 80028ca <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80028c4:	4620      	mov	r0, r4
 80028c6:	f7ff feeb 	bl	80026a0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ca:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80028cc:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028dc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	f042 0201 	orr.w	r2, r2, #1
}
 80028e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80028e8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80028ea:	f7ff bfb4 	b.w	8002856 <UART_CheckIdleState>
}
 80028ee:	2001      	movs	r0, #1
 80028f0:	bd10      	pop	{r4, pc}
	...

080028f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80028f6:	3b01      	subs	r3, #1
 80028f8:	d101      	bne.n	80028fe <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80028fa:	2003      	movs	r0, #3
 80028fc:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80028fe:	6902      	ldr	r2, [r0, #16]
 8002900:	2a00      	cmp	r2, #0
 8002902:	daf8      	bge.n	80028f6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002904:	6903      	ldr	r3, [r0, #16]
 8002906:	4a06      	ldr	r2, [pc, #24]	; (8002920 <USB_CoreReset+0x2c>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800290e:	3a01      	subs	r2, #1
 8002910:	d0f3      	beq.n	80028fa <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002912:	6903      	ldr	r3, [r0, #16]
 8002914:	f013 0301 	ands.w	r3, r3, #1
 8002918:	d1f9      	bne.n	800290e <USB_CoreReset+0x1a>

  return HAL_OK;
 800291a:	4618      	mov	r0, r3
}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	00030d41 	.word	0x00030d41

08002924 <USB_CoreInit>:
{
 8002924:	b084      	sub	sp, #16
 8002926:	b538      	push	{r3, r4, r5, lr}
 8002928:	ad05      	add	r5, sp, #20
 800292a:	4604      	mov	r4, r0
 800292c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002932:	2b01      	cmp	r3, #1
 8002934:	d126      	bne.n	8002984 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002936:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800293e:	68c3      	ldr	r3, [r0, #12]
 8002940:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002948:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800294a:	68c3      	ldr	r3, [r0, #12]
 800294c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002950:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002952:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002954:	2b01      	cmp	r3, #1
 8002956:	d103      	bne.n	8002960 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002958:	68c3      	ldr	r3, [r0, #12]
 800295a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800295e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002960:	4620      	mov	r0, r4
 8002962:	f7ff ffc7 	bl	80028f4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002966:	9b08      	ldr	r3, [sp, #32]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d107      	bne.n	800297c <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800296c:	68a3      	ldr	r3, [r4, #8]
 800296e:	f043 0306 	orr.w	r3, r3, #6
 8002972:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002974:	68a3      	ldr	r3, [r4, #8]
 8002976:	f043 0320 	orr.w	r3, r3, #32
 800297a:	60a3      	str	r3, [r4, #8]
}
 800297c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002980:	b004      	add	sp, #16
 8002982:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002984:	68c3      	ldr	r3, [r0, #12]
 8002986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800298a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800298c:	f7ff ffb2 	bl	80028f4 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	63a3      	str	r3, [r4, #56]	; 0x38
 8002998:	e7e5      	b.n	8002966 <USB_CoreInit+0x42>
	...

0800299c <USB_SetTurnaroundTime>:
  if (speed == USB_OTG_SPEED_FULL)
 800299c:	2a03      	cmp	r2, #3
 800299e:	d158      	bne.n	8002a52 <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <USB_SetTurnaroundTime+0xc0>)
 80029a2:	4a2f      	ldr	r2, [pc, #188]	; (8002a60 <USB_SetTurnaroundTime+0xc4>)
 80029a4:	440b      	add	r3, r1
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d947      	bls.n	8002a3a <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80029aa:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <USB_SetTurnaroundTime+0xc8>)
 80029ac:	4a2e      	ldr	r2, [pc, #184]	; (8002a68 <USB_SetTurnaroundTime+0xcc>)
 80029ae:	440b      	add	r3, r1
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d944      	bls.n	8002a3e <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80029b4:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80029b8:	4a2c      	ldr	r2, [pc, #176]	; (8002a6c <USB_SetTurnaroundTime+0xd0>)
 80029ba:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80029be:	4293      	cmp	r3, r2
 80029c0:	d93f      	bls.n	8002a42 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80029c2:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80029c6:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80029ca:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80029ce:	32a0      	adds	r2, #160	; 0xa0
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d938      	bls.n	8002a46 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80029d4:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <USB_SetTurnaroundTime+0xd4>)
 80029d6:	4a27      	ldr	r2, [pc, #156]	; (8002a74 <USB_SetTurnaroundTime+0xd8>)
 80029d8:	440b      	add	r3, r1
 80029da:	4293      	cmp	r3, r2
 80029dc:	d935      	bls.n	8002a4a <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <USB_SetTurnaroundTime+0xdc>)
 80029e0:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80029e4:	440b      	add	r3, r1
 80029e6:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d92f      	bls.n	8002a4e <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <USB_SetTurnaroundTime+0xe0>)
 80029f0:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80029f4:	440b      	add	r3, r1
 80029f6:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d929      	bls.n	8002a52 <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80029fe:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8002a02:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8002a06:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8002a0a:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d921      	bls.n	8002a56 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 8002a14:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002a18:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 8002a1a:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	bf94      	ite	ls
 8002a22:	2307      	movls	r3, #7
 8002a24:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002a26:	68c2      	ldr	r2, [r0, #12]
 8002a28:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002a2c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002a2e:	68c2      	ldr	r2, [r0, #12]
 8002a30:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8002a34:	60c3      	str	r3, [r0, #12]
}
 8002a36:	2000      	movs	r0, #0
 8002a38:	4770      	bx	lr
      UsbTrd = 0xFU;
 8002a3a:	230f      	movs	r3, #15
 8002a3c:	e7f3      	b.n	8002a26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 8002a3e:	230e      	movs	r3, #14
 8002a40:	e7f1      	b.n	8002a26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 8002a42:	230d      	movs	r3, #13
 8002a44:	e7ef      	b.n	8002a26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 8002a46:	230c      	movs	r3, #12
 8002a48:	e7ed      	b.n	8002a26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 8002a4a:	230b      	movs	r3, #11
 8002a4c:	e7eb      	b.n	8002a26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 8002a4e:	230a      	movs	r3, #10
 8002a50:	e7e9      	b.n	8002a26 <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002a52:	2309      	movs	r3, #9
 8002a54:	e7e7      	b.n	8002a26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 8002a56:	2308      	movs	r3, #8
 8002a58:	e7e5      	b.n	8002a26 <USB_SetTurnaroundTime+0x8a>
 8002a5a:	bf00      	nop
 8002a5c:	ff275340 	.word	0xff275340
 8002a60:	000c34ff 	.word	0x000c34ff
 8002a64:	ff1b1e40 	.word	0xff1b1e40
 8002a68:	000f423f 	.word	0x000f423f
 8002a6c:	00124f7f 	.word	0x00124f7f
 8002a70:	fee5b660 	.word	0xfee5b660
 8002a74:	0016e35f 	.word	0x0016e35f
 8002a78:	feced300 	.word	0xfeced300
 8002a7c:	feb35bc0 	.word	0xfeb35bc0
 8002a80:	fe5954e0 	.word	0xfe5954e0

08002a84 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a84:	6883      	ldr	r3, [r0, #8]
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6083      	str	r3, [r0, #8]
}
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	4770      	bx	lr

08002a90 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a90:	6883      	ldr	r3, [r0, #8]
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	6083      	str	r3, [r0, #8]
}
 8002a98:	2000      	movs	r0, #0
 8002a9a:	4770      	bx	lr

08002a9c <USB_SetCurrentMode>:
{
 8002a9c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002a9e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002aa0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002aa2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002aa6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002aa8:	d108      	bne.n	8002abc <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002aaa:	68c3      	ldr	r3, [r0, #12]
 8002aac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ab0:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002ab2:	2032      	movs	r0, #50	; 0x32
 8002ab4:	f7fd fd92 	bl	80005dc <HAL_Delay>
  return HAL_OK;
 8002ab8:	2000      	movs	r0, #0
 8002aba:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002abc:	b919      	cbnz	r1, 8002ac6 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002abe:	68c3      	ldr	r3, [r0, #12]
 8002ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ac4:	e7f4      	b.n	8002ab0 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002ac6:	2001      	movs	r0, #1
}
 8002ac8:	bd08      	pop	{r3, pc}
	...

08002acc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002acc:	0189      	lsls	r1, r1, #6
 8002ace:	4a07      	ldr	r2, [pc, #28]	; (8002aec <USB_FlushTxFifo+0x20>)
 8002ad0:	f041 0120 	orr.w	r1, r1, #32
 8002ad4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002ad6:	3a01      	subs	r2, #1
 8002ad8:	d005      	beq.n	8002ae6 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002ada:	6903      	ldr	r3, [r0, #16]
 8002adc:	f013 0320 	ands.w	r3, r3, #32
 8002ae0:	d1f9      	bne.n	8002ad6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002ae6:	2003      	movs	r0, #3
}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	00030d41 	.word	0x00030d41

08002af0 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002af0:	2310      	movs	r3, #16
 8002af2:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <USB_FlushRxFifo+0x1c>)
 8002af4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002af6:	3a01      	subs	r2, #1
 8002af8:	d005      	beq.n	8002b06 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002afa:	6903      	ldr	r3, [r0, #16]
 8002afc:	f013 0310 	ands.w	r3, r3, #16
 8002b00:	d1f9      	bne.n	8002af6 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002b02:	4618      	mov	r0, r3
 8002b04:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002b06:	2003      	movs	r0, #3
}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	00030d41 	.word	0x00030d41

08002b10 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002b10:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002b14:	4319      	orrs	r1, r3
 8002b16:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	4770      	bx	lr
	...

08002b20 <USB_DevInit>:
{
 8002b20:	b084      	sub	sp, #16
 8002b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b26:	4604      	mov	r4, r0
 8002b28:	a809      	add	r0, sp, #36	; 0x24
 8002b2a:	4688      	mov	r8, r1
 8002b2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002b36:	990e      	ldr	r1, [sp, #56]	; 0x38
    USBx->DIEPTXF[i] = 0U;
 8002b38:	461d      	mov	r5, r3
 8002b3a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8002b3c:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8002b40:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8002b42:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8002b46:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002b48:	6045      	str	r5, [r0, #4]
  for (i = 0U; i < 15U; i++)
 8002b4a:	d1f7      	bne.n	8002b3c <USB_DevInit+0x1c>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002b4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8002b4e:	2e00      	cmp	r6, #0
 8002b50:	d171      	bne.n	8002c36 <USB_DevInit+0x116>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b56:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b5e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b66:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8002b68:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b6a:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002b6c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 8002b70:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002b74:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002b78:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b7c:	d161      	bne.n	8002c42 <USB_DevInit+0x122>
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8002b7e:	2a00      	cmp	r2, #0
 8002b80:	d15d      	bne.n	8002c3e <USB_DevInit+0x11e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002b82:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002b84:	4620      	mov	r0, r4
 8002b86:	f7ff ffc3 	bl	8002b10 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002b8a:	2110      	movs	r1, #16
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff ff9d 	bl	8002acc <USB_FlushTxFifo>
 8002b92:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002b94:	4620      	mov	r0, r4
 8002b96:	f7ff ffab 	bl	8002af0 <USB_FlushRxFifo>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d155      	bne.n	8002c4a <USB_DevInit+0x12a>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002b9e:	1c08      	adds	r0, r1, #0
 8002ba0:	bf18      	it	ne
 8002ba2:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002baa:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002bae:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8002bb2:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002bb4:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8002bb8:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002bba:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002bbc:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bbe:	4543      	cmp	r3, r8
 8002bc0:	d145      	bne.n	8002c4e <USB_DevInit+0x12e>
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002bc8:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002bcc:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002bd0:	468e      	mov	lr, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002bd2:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bd6:	428b      	cmp	r3, r1
 8002bd8:	d14c      	bne.n	8002c74 <USB_DevInit+0x154>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002bda:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8002bdc:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be2:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8002be4:	d107      	bne.n	8002bf6 <USB_DevInit+0xd6>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002be6:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <USB_DevInit+0x180>)
 8002be8:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002bea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	f043 0303 	orr.w	r3, r3, #3
 8002bf4:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002bfa:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002bfe:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002c00:	b91f      	cbnz	r7, 8002c0a <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c02:	69a3      	ldr	r3, [r4, #24]
 8002c04:	f043 0310 	orr.w	r3, r3, #16
 8002c08:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c0a:	69a2      	ldr	r2, [r4, #24]
 8002c0c:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <USB_DevInit+0x184>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c14:	b11b      	cbz	r3, 8002c1e <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c16:	69a3      	ldr	r3, [r4, #24]
 8002c18:	f043 0308 	orr.w	r3, r3, #8
 8002c1c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002c1e:	2e01      	cmp	r6, #1
 8002c20:	d105      	bne.n	8002c2e <USB_DevInit+0x10e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c22:	69a3      	ldr	r3, [r4, #24]
 8002c24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	61a3      	str	r3, [r4, #24]
}
 8002c2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c32:	b004      	add	sp, #16
 8002c34:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c3a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c3c:	e794      	b.n	8002b68 <USB_DevInit+0x48>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002c3e:	2101      	movs	r1, #1
 8002c40:	e7a0      	b.n	8002b84 <USB_DevInit+0x64>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002c42:	2903      	cmp	r1, #3
 8002c44:	d09b      	beq.n	8002b7e <USB_DevInit+0x5e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002c46:	2103      	movs	r1, #3
 8002c48:	e79c      	b.n	8002b84 <USB_DevInit+0x64>
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	e7aa      	b.n	8002ba4 <USB_DevInit+0x84>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002c4e:	f8d2 a000 	ldr.w	sl, [r2]
 8002c52:	f1ba 0f00 	cmp.w	sl, #0
 8002c56:	da0b      	bge.n	8002c70 <USB_DevInit+0x150>
      if (i == 0U)
 8002c58:	b93b      	cbnz	r3, 8002c6a <USB_DevInit+0x14a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002c5a:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002c5e:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c60:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002c62:	f8c2 9008 	str.w	r9, [r2, #8]
 8002c66:	3220      	adds	r2, #32
 8002c68:	e7a9      	b.n	8002bbe <USB_DevInit+0x9e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002c6a:	f8c2 e000 	str.w	lr, [r2]
 8002c6e:	e7f6      	b.n	8002c5e <USB_DevInit+0x13e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002c70:	6011      	str	r1, [r2, #0]
 8002c72:	e7f4      	b.n	8002c5e <USB_DevInit+0x13e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002c74:	f8d2 a000 	ldr.w	sl, [r2]
 8002c78:	f1ba 0f00 	cmp.w	sl, #0
 8002c7c:	da0c      	bge.n	8002c98 <USB_DevInit+0x178>
      if (i == 0U)
 8002c7e:	b941      	cbnz	r1, 8002c92 <USB_DevInit+0x172>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002c80:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002c84:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c88:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002c8a:	f8c2 9008 	str.w	r9, [r2, #8]
 8002c8e:	3220      	adds	r2, #32
 8002c90:	e7a1      	b.n	8002bd6 <USB_DevInit+0xb6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002c92:	f8c2 c000 	str.w	ip, [r2]
 8002c96:	e7f5      	b.n	8002c84 <USB_DevInit+0x164>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002c98:	f8c2 e000 	str.w	lr, [r2]
 8002c9c:	e7f2      	b.n	8002c84 <USB_DevInit+0x164>
 8002c9e:	bf00      	nop
 8002ca0:	00800100 	.word	0x00800100
 8002ca4:	803c3800 	.word	0x803c3800

08002ca8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002ca8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002cac:	f013 0006 	ands.w	r0, r3, #6
 8002cb0:	d004      	beq.n	8002cbc <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002cb2:	f013 0f02 	tst.w	r3, #2
    speed = USB_OTG_SPEED_FULL;
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2000      	moveq	r0, #0
 8002cba:	2003      	movne	r0, #3
}
 8002cbc:	4770      	bx	lr

08002cbe <USB_ActivateEndpoint>:
{
 8002cbe:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8002cc0:	784a      	ldrb	r2, [r1, #1]
 8002cc2:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  uint32_t epnum = (uint32_t)ep->num;
 8002cc6:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002cc8:	2a01      	cmp	r2, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002cca:	69de      	ldr	r6, [r3, #28]
 8002ccc:	f004 050f 	and.w	r5, r4, #15
  if (ep->is_in == 1U)
 8002cd0:	d11b      	bne.n	8002d0a <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002cd2:	40aa      	lsls	r2, r5
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002cd4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002cd8:	4332      	orrs	r2, r6
 8002cda:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002cdc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002ce0:	041a      	lsls	r2, r3, #16
 8002ce2:	d410      	bmi.n	8002d06 <USB_ActivateEndpoint+0x48>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ce4:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002ce6:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cec:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002cfc:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002d06:	2000      	movs	r0, #0
 8002d08:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002d0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002d0e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002d12:	40aa      	lsls	r2, r5
 8002d14:	4332      	orrs	r2, r6
 8002d16:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002d18:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	d4f2      	bmi.n	8002d06 <USB_ActivateEndpoint+0x48>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002d20:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8002d22:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d28:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d34:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002d3e:	e7e2      	b.n	8002d06 <USB_ActivateEndpoint+0x48>

08002d40 <USB_DeactivateEndpoint>:
{
 8002d40:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8002d42:	784b      	ldrb	r3, [r1, #1]
 8002d44:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  uint32_t epnum = (uint32_t)ep->num;
 8002d48:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002d4a:	2b01      	cmp	r3, #1
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002d4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d4e:	f004 050f 	and.w	r5, r4, #15
  if (ep->is_in == 1U)
 8002d52:	d110      	bne.n	8002d76 <USB_DeactivateEndpoint+0x36>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002d54:	40ab      	lsls	r3, r5
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002d56:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	4019      	ands	r1, r3
 8002d5e:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002d60:	69d1      	ldr	r1, [r2, #28]
 8002d62:	400b      	ands	r3, r1
 8002d64:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <USB_DeactivateEndpoint+0x5c>)
 8002d68:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002d72:	2000      	movs	r0, #0
 8002d74:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002d7a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002d7e:	40ab      	lsls	r3, r5
 8002d80:	43db      	mvns	r3, r3
 8002d82:	4019      	ands	r1, r3
 8002d84:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002d86:	69d1      	ldr	r1, [r2, #28]
 8002d88:	400b      	ands	r3, r1
 8002d8a:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <USB_DeactivateEndpoint+0x60>)
 8002d8e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002d92:	4013      	ands	r3, r2
 8002d94:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002d98:	e7eb      	b.n	8002d72 <USB_DeactivateEndpoint+0x32>
 8002d9a:	bf00      	nop
 8002d9c:	ec337800 	.word	0xec337800
 8002da0:	eff37800 	.word	0xeff37800

08002da4 <USB_EP0StartXfer>:
{
 8002da4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002da6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002da8:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	694e      	ldr	r6, [r1, #20]
 8002dae:	f04f 0320 	mov.w	r3, #32
 8002db2:	4f3d      	ldr	r7, [pc, #244]	; (8002ea8 <USB_EP0StartXfer+0x104>)
 8002db4:	d151      	bne.n	8002e5a <USB_EP0StartXfer+0xb6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002db6:	fb13 0304 	smlabb	r3, r3, r4, r0
    if (ep->xfer_len == 0U)
 8002dba:	bb0e      	cbnz	r6, 8002e00 <USB_EP0StartXfer+0x5c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002dbc:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
    if (dma == 1U)
 8002dc0:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002dc2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002dc6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002dca:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002dce:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002dd2:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002dd6:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002dda:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002dde:	ea07 0705 	and.w	r7, r7, r5
 8002de2:	f8c3 7910 	str.w	r7, [r3, #2320]	; 0x910
    if (dma == 1U)
 8002de6:	d101      	bne.n	8002dec <USB_EP0StartXfer+0x48>
      if ((uint32_t)ep->dma_addr != 0U)
 8002de8:	690a      	ldr	r2, [r1, #16]
 8002dea:	bb8a      	cbnz	r2, 8002e50 <USB_EP0StartXfer+0xac>
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002dec:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002df0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002df4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002df8:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e04:	691d      	ldr	r5, [r3, #16]
 8002e06:	402f      	ands	r7, r5
 8002e08:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002e0a:	691d      	ldr	r5, [r3, #16]
 8002e0c:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002e10:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002e14:	611d      	str	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002e16:	688d      	ldr	r5, [r1, #8]
 8002e18:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 8002e1a:	bf88      	it	hi
 8002e1c:	614d      	strhi	r5, [r1, #20]
    if (dma == 1U)
 8002e1e:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002e20:	691d      	ldr	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002e22:	694e      	ldr	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002e24:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002e28:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002e2a:	f3c6 0512 	ubfx	r5, r6, #0, #19
 8002e2e:	691f      	ldr	r7, [r3, #16]
 8002e30:	ea45 0507 	orr.w	r5, r5, r7
 8002e34:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8002e36:	d0d7      	beq.n	8002de8 <USB_EP0StartXfer+0x44>
      if (ep->xfer_len > 0U)
 8002e38:	2e00      	cmp	r6, #0
 8002e3a:	d0d7      	beq.n	8002dec <USB_EP0StartXfer+0x48>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002e3c:	f004 050f 	and.w	r5, r4, #15
 8002e40:	2301      	movs	r3, #1
 8002e42:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 8002e46:	40ab      	lsls	r3, r5
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002e4e:	e7cd      	b.n	8002dec <USB_EP0StartXfer+0x48>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002e50:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002e54:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
 8002e58:	e7c8      	b.n	8002dec <USB_EP0StartXfer+0x48>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e5a:	fb13 0004 	smlabb	r0, r3, r4, r0
 8002e5e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002e62:	691c      	ldr	r4, [r3, #16]
 8002e64:	4027      	ands	r7, r4
 8002e66:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002e68:	691c      	ldr	r4, [r3, #16]
 8002e6a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002e6e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002e72:	611c      	str	r4, [r3, #16]
 8002e74:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8002e76:	b106      	cbz	r6, 8002e7a <USB_EP0StartXfer+0xd6>
      ep->xfer_len = ep->maxpacket;
 8002e78:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002e7a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002e7c:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8002e80:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002e82:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002e86:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002e88:	691d      	ldr	r5, [r3, #16]
 8002e8a:	ea44 0405 	orr.w	r4, r4, r5
 8002e8e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8002e90:	d102      	bne.n	8002e98 <USB_EP0StartXfer+0xf4>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002e92:	68ca      	ldr	r2, [r1, #12]
 8002e94:	b102      	cbz	r2, 8002e98 <USB_EP0StartXfer+0xf4>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002e96:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002e98:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002e9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002ea0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002ea4:	e7aa      	b.n	8002dfc <USB_EP0StartXfer+0x58>
 8002ea6:	bf00      	nop
 8002ea8:	fff80000 	.word	0xfff80000

08002eac <USB_WritePacket>:
{
 8002eac:	b510      	push	{r4, lr}
 8002eae:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002eb2:	b94c      	cbnz	r4, 8002ec8 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002eb4:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8002eb6:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002ec2:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8002ec4:	4299      	cmp	r1, r3
 8002ec6:	d101      	bne.n	8002ecc <USB_WritePacket+0x20>
}
 8002ec8:	2000      	movs	r0, #0
 8002eca:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8002ecc:	f851 2b04 	ldr.w	r2, [r1], #4
 8002ed0:	6002      	str	r2, [r0, #0]
 8002ed2:	e7f7      	b.n	8002ec4 <USB_WritePacket+0x18>

08002ed4 <USB_EPStartXfer>:
{
 8002ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002ed6:	784b      	ldrb	r3, [r1, #1]
 8002ed8:	2420      	movs	r4, #32
  uint32_t epnum = (uint32_t)ep->num;
 8002eda:	780e      	ldrb	r6, [r1, #0]
  if (ep->is_in == 1U)
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	4f65      	ldr	r7, [pc, #404]	; (8003074 <USB_EPStartXfer+0x1a0>)
 8002ee0:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002ee2:	fb14 0406 	smlabb	r4, r4, r6, r0
  if (ep->is_in == 1U)
 8002ee6:	d17c      	bne.n	8002fe2 <USB_EPStartXfer+0x10e>
    if (ep->xfer_len == 0U)
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d13f      	bne.n	8002f6c <USB_EPStartXfer+0x98>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002eec:	f504 6510 	add.w	r5, r4, #2304	; 0x900
 8002ef0:	f8d4 4910 	ldr.w	r4, [r4, #2320]	; 0x910
 8002ef4:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002ef8:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002efc:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002efe:	692c      	ldr	r4, [r5, #16]
 8002f00:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002f04:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002f06:	692c      	ldr	r4, [r5, #16]
 8002f08:	4027      	ands	r7, r4
 8002f0a:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 8002f0c:	2a01      	cmp	r2, #1
 8002f0e:	d157      	bne.n	8002fc0 <USB_EPStartXfer+0xec>
      if ((uint32_t)ep->dma_addr != 0U)
 8002f10:	690d      	ldr	r5, [r1, #16]
 8002f12:	b11d      	cbz	r5, 8002f1c <USB_EPStartXfer+0x48>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002f14:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 8002f18:	f8c4 5914 	str.w	r5, [r4, #2324]	; 0x914
    if (ep->type == EP_TYPE_ISOC)
 8002f1c:	78cf      	ldrb	r7, [r1, #3]
 8002f1e:	2f01      	cmp	r7, #1
 8002f20:	d110      	bne.n	8002f44 <USB_EPStartXfer+0x70>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002f22:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8002f26:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002f2a:	f04f 0420 	mov.w	r4, #32
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002f2e:	fb14 0406 	smlabb	r4, r4, r6, r0
 8002f32:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 8002f36:	bf0c      	ite	eq
 8002f38:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002f3c:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8002f40:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002f44:	eb00 1446 	add.w	r4, r0, r6, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 8002f48:	2f01      	cmp	r7, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002f4a:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 8002f4e:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8002f52:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8002f56:	d106      	bne.n	8002f66 <USB_EPStartXfer+0x92>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002f58:	780c      	ldrb	r4, [r1, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	9200      	str	r2, [sp, #0]
 8002f5e:	4622      	mov	r2, r4
 8002f60:	68c9      	ldr	r1, [r1, #12]
 8002f62:	f7ff ffa3 	bl	8002eac <USB_WritePacket>
}
 8002f66:	2000      	movs	r0, #0
 8002f68:	b003      	add	sp, #12
 8002f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002f6c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002f70:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8002f74:	402f      	ands	r7, r5
 8002f76:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002f78:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002f7a:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002f7c:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002f80:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002f84:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002f86:	19dd      	adds	r5, r3, r7
 8002f88:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002f8c:	3d01      	subs	r5, #1
 8002f8e:	fbb5 f7f7 	udiv	r7, r5, r7
 8002f92:	4d39      	ldr	r5, [pc, #228]	; (8003078 <USB_EPStartXfer+0x1a4>)
 8002f94:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8002f98:	ea45 050e 	orr.w	r5, r5, lr
 8002f9c:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002f9e:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8002fa2:	6927      	ldr	r7, [r4, #16]
 8002fa4:	433d      	orrs	r5, r7
 8002fa6:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8002fa8:	78cd      	ldrb	r5, [r1, #3]
 8002faa:	2d01      	cmp	r5, #1
 8002fac:	d15f      	bne.n	800306e <USB_EPStartXfer+0x19a>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002fae:	6925      	ldr	r5, [r4, #16]
 8002fb0:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8002fb4:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002fb6:	6925      	ldr	r5, [r4, #16]
 8002fb8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002fbc:	6125      	str	r5, [r4, #16]
 8002fbe:	e7a5      	b.n	8002f0c <USB_EPStartXfer+0x38>
      if (ep->type != EP_TYPE_ISOC)
 8002fc0:	78cc      	ldrb	r4, [r1, #3]
 8002fc2:	2c01      	cmp	r4, #1
 8002fc4:	d0aa      	beq.n	8002f1c <USB_EPStartXfer+0x48>
        if (ep->xfer_len > 0U)
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0a8      	beq.n	8002f1c <USB_EPStartXfer+0x48>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002fca:	780c      	ldrb	r4, [r1, #0]
 8002fcc:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 8002fd0:	f004 050f 	and.w	r5, r4, #15
 8002fd4:	2401      	movs	r4, #1
 8002fd6:	40ac      	lsls	r4, r5
 8002fd8:	ea44 040e 	orr.w	r4, r4, lr
 8002fdc:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8002fe0:	e79c      	b.n	8002f1c <USB_EPStartXfer+0x48>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002fe2:	f504 6630 	add.w	r6, r4, #2816	; 0xb00
 8002fe6:	6935      	ldr	r5, [r6, #16]
 8002fe8:	402f      	ands	r7, r5
 8002fea:	6137      	str	r7, [r6, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002fec:	6935      	ldr	r5, [r6, #16]
 8002fee:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002ff2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002ff6:	6135      	str	r5, [r6, #16]
 8002ff8:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8002ffa:	bb23      	cbnz	r3, 8003046 <USB_EPStartXfer+0x172>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002ffc:	6933      	ldr	r3, [r6, #16]
 8002ffe:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003002:	431d      	orrs	r5, r3
 8003004:	6135      	str	r5, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003006:	6933      	ldr	r3, [r6, #16]
 8003008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800300c:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 800300e:	2a01      	cmp	r2, #1
 8003010:	d102      	bne.n	8003018 <USB_EPStartXfer+0x144>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003012:	68cb      	ldr	r3, [r1, #12]
 8003014:	b103      	cbz	r3, 8003018 <USB_EPStartXfer+0x144>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003016:	6173      	str	r3, [r6, #20]
    if (ep->type == EP_TYPE_ISOC)
 8003018:	78cb      	ldrb	r3, [r1, #3]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10c      	bne.n	8003038 <USB_EPStartXfer+0x164>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800301e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003022:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003026:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800302a:	bf0c      	ite	eq
 800302c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003030:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003034:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003038:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800303c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003040:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
  return HAL_OK;
 8003044:	e78f      	b.n	8002f66 <USB_EPStartXfer+0x92>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003046:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003048:	4f0b      	ldr	r7, [pc, #44]	; (8003078 <USB_EPStartXfer+0x1a4>)
 800304a:	f8d6 e010 	ldr.w	lr, [r6, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800304e:	3b01      	subs	r3, #1
 8003050:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003054:	ea07 47c3 	and.w	r7, r7, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003058:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800305a:	ea47 070e 	orr.w	r7, r7, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800305e:	435d      	muls	r5, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003060:	6137      	str	r7, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003062:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003066:	6937      	ldr	r7, [r6, #16]
 8003068:	433d      	orrs	r5, r7
 800306a:	6135      	str	r5, [r6, #16]
 800306c:	e7cf      	b.n	800300e <USB_EPStartXfer+0x13a>
    if (dma == 1U)
 800306e:	2a01      	cmp	r2, #1
 8003070:	d1a9      	bne.n	8002fc6 <USB_EPStartXfer+0xf2>
 8003072:	e74d      	b.n	8002f10 <USB_EPStartXfer+0x3c>
 8003074:	fff80000 	.word	0xfff80000
 8003078:	1ff80000 	.word	0x1ff80000

0800307c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800307c:	3203      	adds	r2, #3
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800307e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003082:	f022 0203 	bic.w	r2, r2, #3
 8003086:	440a      	add	r2, r1
  for (i = 0U; i < count32b; i++)
 8003088:	4291      	cmp	r1, r2
 800308a:	d101      	bne.n	8003090 <USB_ReadPacket+0x14>
}
 800308c:	4608      	mov	r0, r1
 800308e:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8003090:	6803      	ldr	r3, [r0, #0]
 8003092:	f841 3b04 	str.w	r3, [r1], #4
 8003096:	e7f7      	b.n	8003088 <USB_ReadPacket+0xc>

08003098 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8003098:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800309a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800309c:	2b01      	cmp	r3, #1
 800309e:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80030a2:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 80030a6:	d112      	bne.n	80030ce <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80030a8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	db06      	blt.n	80030be <USB_EPSetStall+0x26>
 80030b0:	b12a      	cbz	r2, 80030be <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80030b2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80030b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030ba:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80030be:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80030c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030c6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80030ca:	2000      	movs	r0, #0
 80030cc:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80030ce:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	db06      	blt.n	80030e4 <USB_EPSetStall+0x4c>
 80030d6:	b12a      	cbz	r2, 80030e4 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80030d8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80030dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030e0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80030e4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80030e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ec:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80030f0:	e7eb      	b.n	80030ca <USB_EPSetStall+0x32>

080030f2 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 80030f2:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80030f4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030fc:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8003100:	d111      	bne.n	8003126 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003102:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003106:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800310a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800310e:	78cb      	ldrb	r3, [r1, #3]
 8003110:	3b02      	subs	r3, #2
 8003112:	2b01      	cmp	r3, #1
 8003114:	d805      	bhi.n	8003122 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003116:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800311a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003122:	2000      	movs	r0, #0
 8003124:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003126:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800312a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800312e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003132:	78cb      	ldrb	r3, [r1, #3]
 8003134:	3b02      	subs	r3, #2
 8003136:	2b01      	cmp	r3, #1
 8003138:	d8f3      	bhi.n	8003122 <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800313a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003146:	e7ec      	b.n	8003122 <USB_EPClearStall+0x30>

08003148 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003148:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800314c:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800314e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003152:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003156:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800315a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800315e:	4319      	orrs	r1, r3
 8003160:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003164:	2000      	movs	r0, #0
 8003166:	4770      	bx	lr

08003168 <USB_DevConnect>:
{
 8003168:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800316a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800316e:	f023 0302 	bic.w	r3, r3, #2
 8003172:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8003176:	2003      	movs	r0, #3
 8003178:	f7fd fa30 	bl	80005dc <HAL_Delay>
}
 800317c:	2000      	movs	r0, #0
 800317e:	bd08      	pop	{r3, pc}

08003180 <USB_DevDisconnect>:
{
 8003180:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003182:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800318e:	2003      	movs	r0, #3
 8003190:	f7fd fa24 	bl	80005dc <HAL_Delay>
}
 8003194:	2000      	movs	r0, #0
 8003196:	bd08      	pop	{r3, pc}

08003198 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003198:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800319a:	6980      	ldr	r0, [r0, #24]
}
 800319c:	4010      	ands	r0, r2
 800319e:	4770      	bx	lr

080031a0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80031a0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80031a4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80031a8:	69c0      	ldr	r0, [r0, #28]
 80031aa:	4018      	ands	r0, r3
}
 80031ac:	0c00      	lsrs	r0, r0, #16
 80031ae:	4770      	bx	lr

080031b0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80031b0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80031b4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80031b8:	69c0      	ldr	r0, [r0, #28]
 80031ba:	4018      	ands	r0, r3
}
 80031bc:	b280      	uxth	r0, r0
 80031be:	4770      	bx	lr

080031c0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80031c0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80031c4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80031c8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80031cc:	6940      	ldr	r0, [r0, #20]
}
 80031ce:	4010      	ands	r0, r2
 80031d0:	4770      	bx	lr

080031d2 <USB_ReadDevInEPInterrupt>:
{
 80031d2:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 80031d4:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80031d8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80031dc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80031e0:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80031e4:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80031e8:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80031ea:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80031ec:	01db      	lsls	r3, r3, #7
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	4323      	orrs	r3, r4
}
 80031f2:	4018      	ands	r0, r3
 80031f4:	bd10      	pop	{r4, pc}

080031f6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80031f6:	6940      	ldr	r0, [r0, #20]
}
 80031f8:	f000 0001 	and.w	r0, r0, #1
 80031fc:	4770      	bx	lr

080031fe <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80031fe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003202:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003206:	f023 0307 	bic.w	r3, r3, #7
 800320a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800320e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	f002 0206 	and.w	r2, r2, #6
 8003218:	2a04      	cmp	r2, #4
 800321a:	d105      	bne.n	8003228 <USB_ActivateSetup+0x2a>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800321c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003220:	f042 0203 	orr.w	r2, r2, #3
 8003224:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003228:	685a      	ldr	r2, [r3, #4]
}
 800322a:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800322c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003230:	605a      	str	r2, [r3, #4]
}
 8003232:	4770      	bx	lr

08003234 <USB_EP0_OutStart>:
{
 8003234:	b510      	push	{r4, lr}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <USB_EP0_OutStart+0x54>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003238:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800323a:	429c      	cmp	r4, r3
 800323c:	d903      	bls.n	8003246 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800323e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003242:	2b00      	cmp	r3, #0
 8003244:	db1e      	blt.n	8003284 <USB_EP0_OutStart+0x50>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003246:	2400      	movs	r4, #0
  if (dma == 1U)
 8003248:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800324a:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800324e:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003252:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003256:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800325a:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800325e:	f044 0418 	orr.w	r4, r4, #24
 8003262:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003266:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800326a:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800326e:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8003272:	d107      	bne.n	8003284 <USB_EP0_OutStart+0x50>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003274:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003278:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800327c:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003280:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003284:	2000      	movs	r0, #0
 8003286:	bd10      	pop	{r4, pc}
 8003288:	4f54300a 	.word	0x4f54300a

0800328c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800328c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 8003290:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003292:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003296:	b15b      	cbz	r3, 80032b0 <USBD_CDC_EP0_RxReady+0x24>
 8003298:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800329c:	28ff      	cmp	r0, #255	; 0xff
 800329e:	d007      	beq.n	80032b0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	4621      	mov	r1, r4
 80032a4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80032a8:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80032aa:	23ff      	movs	r3, #255	; 0xff
 80032ac:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80032b0:	2000      	movs	r0, #0
 80032b2:	bd10      	pop	{r4, pc}

080032b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80032b4:	2343      	movs	r3, #67	; 0x43
 80032b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80032b8:	4800      	ldr	r0, [pc, #0]	; (80032bc <USBD_CDC_GetFSCfgDesc+0x8>)
 80032ba:	4770      	bx	lr
 80032bc:	20000040 	.word	0x20000040

080032c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80032c0:	2343      	movs	r3, #67	; 0x43
 80032c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80032c4:	4800      	ldr	r0, [pc, #0]	; (80032c8 <USBD_CDC_GetHSCfgDesc+0x8>)
 80032c6:	4770      	bx	lr
 80032c8:	20000084 	.word	0x20000084

080032cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80032cc:	2343      	movs	r3, #67	; 0x43
 80032ce:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80032d0:	4800      	ldr	r0, [pc, #0]	; (80032d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80032d2:	4770      	bx	lr
 80032d4:	200000d4 	.word	0x200000d4

080032d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80032d8:	230a      	movs	r3, #10
 80032da:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80032dc:	4800      	ldr	r0, [pc, #0]	; (80032e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80032de:	4770      	bx	lr
 80032e0:	200000c8 	.word	0x200000c8

080032e4 <USBD_CDC_DataOut>:
{
 80032e4:	b538      	push	{r3, r4, r5, lr}
 80032e6:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80032e8:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80032ec:	f001 f984 	bl	80045f8 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 80032f0:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80032f4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 80032f8:	b14b      	cbz	r3, 800330e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80032fa:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 80032fe:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003302:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4798      	blx	r3
    return USBD_OK;
 800330a:	2000      	movs	r0, #0
 800330c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800330e:	2002      	movs	r0, #2
}
 8003310:	bd38      	pop	{r3, r4, r5, pc}

08003312 <USBD_CDC_DataIn>:
{
 8003312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8003314:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 8003318:	b1d6      	cbz	r6, 8003350 <USBD_CDC_DataIn+0x3e>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800331a:	2314      	movs	r3, #20
 800331c:	fb03 0301 	mla	r3, r3, r1, r0
 8003320:	69dd      	ldr	r5, [r3, #28]
 8003322:	b18d      	cbz	r5, 8003348 <USBD_CDC_DataIn+0x36>
 8003324:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8003328:	271c      	movs	r7, #28
 800332a:	fb07 4201 	mla	r2, r7, r1, r4
 800332e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003330:	fbb5 f4f2 	udiv	r4, r5, r2
 8003334:	fb02 5414 	mls	r4, r2, r4, r5
 8003338:	b934      	cbnz	r4, 8003348 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 800333a:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800333c:	4622      	mov	r2, r4
 800333e:	4623      	mov	r3, r4
 8003340:	f001 f93e 	bl	80045c0 <USBD_LL_Transmit>
    return USBD_OK;
 8003344:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003348:	2000      	movs	r0, #0
 800334a:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800334e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8003350:	2002      	movs	r0, #2
}
 8003352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003354 <USBD_CDC_Setup>:
{
 8003354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003358:	780a      	ldrb	r2, [r1, #0]
  uint8_t ifalt = 0U;
 800335a:	f04f 0800 	mov.w	r8, #0
{
 800335e:	4605      	mov	r5, r0
 8003360:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003362:	f012 0460 	ands.w	r4, r2, #96	; 0x60
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003366:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800336a:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800336e:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003372:	d028      	beq.n	80033c6 <USBD_CDC_Setup+0x72>
 8003374:	2c20      	cmp	r4, #32
 8003376:	d147      	bne.n	8003408 <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 8003378:	88cc      	ldrh	r4, [r1, #6]
 800337a:	784b      	ldrb	r3, [r1, #1]
 800337c:	b1e4      	cbz	r4, 80033b8 <USBD_CDC_Setup+0x64>
      if (req->bmRequest & 0x80U)
 800337e:	0612      	lsls	r2, r2, #24
 8003380:	d511      	bpl.n	80033a6 <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003382:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003386:	4639      	mov	r1, r7
 8003388:	4618      	mov	r0, r3
 800338a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800338e:	4622      	mov	r2, r4
 8003390:	47c8      	blx	r9
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003392:	88f2      	ldrh	r2, [r6, #6]
 8003394:	4639      	mov	r1, r7
 8003396:	4628      	mov	r0, r5
 8003398:	f000 fc3a 	bl	8003c10 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800339c:	4644      	mov	r4, r8
}
 800339e:	4620      	mov	r0, r4
 80033a0:	b003      	add	sp, #12
 80033a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hcdc->CmdOpCode = req->bRequest;
 80033a6:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80033aa:	4622      	mov	r2, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 80033ac:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80033b0:	4639      	mov	r1, r7
 80033b2:	f000 fc42 	bl	8003c3a <USBD_CtlPrepareRx>
 80033b6:	e7f1      	b.n	800339c <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80033b8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80033bc:	4618      	mov	r0, r3
 80033be:	6895      	ldr	r5, [r2, #8]
 80033c0:	4622      	mov	r2, r4
 80033c2:	47a8      	blx	r5
 80033c4:	e7eb      	b.n	800339e <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 80033c6:	784f      	ldrb	r7, [r1, #1]
 80033c8:	2f0a      	cmp	r7, #10
 80033ca:	d00d      	beq.n	80033e8 <USBD_CDC_Setup+0x94>
 80033cc:	2f0b      	cmp	r7, #11
 80033ce:	d015      	beq.n	80033fc <USBD_CDC_Setup+0xa8>
 80033d0:	b9d7      	cbnz	r7, 8003408 <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80033d2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d114      	bne.n	8003404 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80033da:	2202      	movs	r2, #2
 80033dc:	f10d 0106 	add.w	r1, sp, #6
 80033e0:	f000 fc16 	bl	8003c10 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80033e4:	463c      	mov	r4, r7
 80033e6:	e7da      	b.n	800339e <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80033e8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d109      	bne.n	8003404 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80033f0:	2201      	movs	r2, #1
 80033f2:	f10d 0105 	add.w	r1, sp, #5
 80033f6:	f000 fc0b 	bl	8003c10 <USBD_CtlSendData>
 80033fa:	e7d0      	b.n	800339e <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80033fc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003400:	2b03      	cmp	r3, #3
 8003402:	d0cc      	beq.n	800339e <USBD_CDC_Setup+0x4a>
        USBD_CtlError (pdev, req);
 8003404:	4631      	mov	r1, r6
 8003406:	4628      	mov	r0, r5
    USBD_CtlError (pdev, req);
 8003408:	f000 fbdb 	bl	8003bc2 <USBD_CtlError>
    ret = USBD_FAIL;
 800340c:	2402      	movs	r4, #2
    break;
 800340e:	e7c6      	b.n	800339e <USBD_CDC_Setup+0x4a>

08003410 <USBD_CDC_DeInit>:
{
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003414:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003416:	2181      	movs	r1, #129	; 0x81
 8003418:	f001 f886 	bl	8004528 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800341c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800341e:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003420:	4620      	mov	r0, r4
 8003422:	f001 f881 	bl	8004528 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003426:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800342a:	2182      	movs	r1, #130	; 0x82
 800342c:	4620      	mov	r0, r4
 800342e:	f001 f87b 	bl	8004528 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003432:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003436:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8003438:	b14b      	cbz	r3, 800344e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800343a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003442:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8003446:	f001 f9ff 	bl	8004848 <free>
    pdev->pClassData = NULL;
 800344a:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800344e:	2000      	movs	r0, #0
 8003450:	bd38      	pop	{r3, r4, r5, pc}

08003452 <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003452:	7c03      	ldrb	r3, [r0, #16]
{
 8003454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003458:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800345a:	bbcb      	cbnz	r3, 80034d0 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800345c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003460:	2202      	movs	r2, #2
 8003462:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003464:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003466:	f001 f84f 	bl	8004508 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800346a:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800346e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003470:	4629      	mov	r1, r5
 8003472:	2202      	movs	r2, #2
 8003474:	4620      	mov	r0, r4
 8003476:	f001 f847 	bl	8004508 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800347a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800347e:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003480:	2308      	movs	r3, #8
 8003482:	2203      	movs	r2, #3
 8003484:	2182      	movs	r1, #130	; 0x82
 8003486:	4620      	mov	r0, r4
 8003488:	f001 f83e 	bl	8004508 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800348c:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800348e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003492:	f001 f9d1 	bl	8004838 <malloc>
 8003496:	4606      	mov	r6, r0
 8003498:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800349c:	b358      	cbz	r0, 80034f6 <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800349e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    hcdc->TxState = 0U;
 80034a2:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80034a8:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 80034ac:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 80034b0:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80034b4:	f1b8 0f00 	cmp.w	r8, #0
 80034b8:	d113      	bne.n	80034e2 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80034ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034be:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80034c2:	4629      	mov	r1, r5
 80034c4:	4620      	mov	r0, r4
 80034c6:	f001 f889 	bl	80045dc <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80034ca:	4640      	mov	r0, r8
 80034cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80034d0:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80034d2:	2340      	movs	r3, #64	; 0x40
 80034d4:	2202      	movs	r2, #2
 80034d6:	2181      	movs	r1, #129	; 0x81
 80034d8:	f001 f816 	bl	8004508 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80034dc:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80034de:	2340      	movs	r3, #64	; 0x40
 80034e0:	e7c6      	b.n	8003470 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80034e2:	2340      	movs	r3, #64	; 0x40
 80034e4:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80034e8:	4629      	mov	r1, r5
 80034ea:	4620      	mov	r0, r4
 80034ec:	f001 f876 	bl	80045dc <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80034f0:	4638      	mov	r0, r7
 80034f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 80034f6:	4628      	mov	r0, r5
}
 80034f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080034fc <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80034fc:	b119      	cbz	r1, 8003506 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80034fe:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8003502:	2000      	movs	r0, #0
 8003504:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003506:	2002      	movs	r0, #2
  }

  return ret;
}
 8003508:	4770      	bx	lr

0800350a <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800350a:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800350e:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003510:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003514:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003518:	4770      	bx	lr

0800351a <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800351a:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 800351e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003520:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003524:	4770      	bx	lr

08003526 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003526:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 800352a:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800352c:	b162      	cbz	r2, 8003548 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800352e:	7c04      	ldrb	r4, [r0, #16]
 8003530:	b944      	cbnz	r4, 8003544 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003532:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003536:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800353a:	2101      	movs	r1, #1
 800353c:	f001 f84e 	bl	80045dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003540:	2000      	movs	r0, #0
 8003542:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003544:	2340      	movs	r3, #64	; 0x40
 8003546:	e7f6      	b.n	8003536 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8003548:	2002      	movs	r0, #2
  }
}
 800354a:	bd10      	pop	{r4, pc}

0800354c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800354c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800354e:	b180      	cbz	r0, 8003572 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003550:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003554:	b113      	cbz	r3, 800355c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800355c:	b109      	cbz	r1, 8003562 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800355e:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003562:	2301      	movs	r3, #1
  pdev->id = id;
 8003564:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003566:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800356a:	f000 ff8f 	bl	800448c <USBD_LL_Init>

  return USBD_OK;
 800356e:	2000      	movs	r0, #0
 8003570:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003572:	2002      	movs	r0, #2
}
 8003574:	bd08      	pop	{r3, pc}

08003576 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003576:	b119      	cbz	r1, 8003580 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003578:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800357c:	2000      	movs	r0, #0
 800357e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003580:	2002      	movs	r0, #2
  }

  return status;
}
 8003582:	4770      	bx	lr

08003584 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003584:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003586:	f000 ffb1 	bl	80044ec <USBD_LL_Start>

  return USBD_OK;
}
 800358a:	2000      	movs	r0, #0
 800358c:	bd08      	pop	{r3, pc}

0800358e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800358e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8003590:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003594:	b90b      	cbnz	r3, 800359a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003596:	2002      	movs	r0, #2
 8003598:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4798      	blx	r3
 800359e:	2800      	cmp	r0, #0
 80035a0:	d1f9      	bne.n	8003596 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80035a2:	bd08      	pop	{r3, pc}

080035a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80035a4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80035a6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4798      	blx	r3
  return USBD_OK;
}
 80035ae:	2000      	movs	r0, #0
 80035b0:	bd08      	pop	{r3, pc}

080035b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80035b2:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80035b4:	f500 7520 	add.w	r5, r0, #640	; 0x280
{
 80035b8:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80035ba:	4628      	mov	r0, r5
 80035bc:	f000 faed 	bl	8003b9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80035c0:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80035c2:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 80035c6:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 80035ca:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 80035ce:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 80035d2:	f001 031f 	and.w	r3, r1, #31
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d00e      	beq.n	80035f8 <USBD_LL_SetupStage+0x46>
 80035da:	d307      	bcc.n	80035ec <USBD_LL_SetupStage+0x3a>
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d010      	beq.n	8003602 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80035e0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80035e4:	4620      	mov	r0, r4
 80035e6:	f000 ffad 	bl	8004544 <USBD_LL_StallEP>
    break;
 80035ea:	e003      	b.n	80035f4 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80035ec:	4629      	mov	r1, r5
 80035ee:	4620      	mov	r0, r4
 80035f0:	f000 f902 	bl	80037f8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80035f4:	2000      	movs	r0, #0
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80035f8:	4629      	mov	r1, r5
 80035fa:	4620      	mov	r0, r4
 80035fc:	f000 fa1e 	bl	8003a3c <USBD_StdItfReq>
    break;
 8003600:	e7f8      	b.n	80035f4 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8003602:	4629      	mov	r1, r5
 8003604:	4620      	mov	r0, r4
 8003606:	f000 fa3e 	bl	8003a86 <USBD_StdEPReq>
    break;
 800360a:	e7f3      	b.n	80035f4 <USBD_LL_SetupStage+0x42>

0800360c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	4605      	mov	r5, r0
 8003610:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8003612:	bb49      	cbnz	r1, 8003668 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003614:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8003618:	2b03      	cmp	r3, #3
 800361a:	d11e      	bne.n	800365a <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 800361c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8003620:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003624:	4293      	cmp	r3, r2
 8003626:	d90b      	bls.n	8003640 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8003628:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 800362a:	4631      	mov	r1, r6
 800362c:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800362e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8003632:	bf8c      	ite	hi
 8003634:	b29a      	uxthhi	r2, r3
 8003636:	b292      	uxthls	r2, r2
 8003638:	f000 fb0e 	bl	8003c58 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800363c:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 800363e:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003640:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	b123      	cbz	r3, 8003652 <USBD_LL_DataOutStage+0x46>
 8003648:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800364c:	2a03      	cmp	r2, #3
 800364e:	d100      	bne.n	8003652 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8003650:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003652:	4628      	mov	r0, r5
 8003654:	f000 fb08 	bl	8003c68 <USBD_CtlSendStatus>
 8003658:	e7f0      	b.n	800363c <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800365a:	2b05      	cmp	r3, #5
 800365c:	d1ee      	bne.n	800363c <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 800365e:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8003662:	f000 ff6f 	bl	8004544 <USBD_LL_StallEP>
 8003666:	e7e9      	b.n	800363c <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8003668:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	b12b      	cbz	r3, 800367c <USBD_LL_DataOutStage+0x70>
 8003670:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003674:	2a03      	cmp	r2, #3
 8003676:	d101      	bne.n	800367c <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8003678:	4798      	blx	r3
 800367a:	e7df      	b.n	800363c <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 800367c:	2002      	movs	r0, #2
}
 800367e:	bd70      	pop	{r4, r5, r6, pc}

08003680 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	4613      	mov	r3, r2
 8003684:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8003686:	460e      	mov	r6, r1
 8003688:	2900      	cmp	r1, #0
 800368a:	d147      	bne.n	800371c <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800368c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8003690:	2a02      	cmp	r2, #2
 8003692:	d13c      	bne.n	800370e <USBD_LL_DataInStage+0x8e>
    {
      if(pep->rem_length > pep->maxpacket)
 8003694:	6a05      	ldr	r5, [r0, #32]
 8003696:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003698:	4295      	cmp	r5, r2
 800369a:	d913      	bls.n	80036c4 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 800369c:	1aaa      	subs	r2, r5, r2

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800369e:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 80036a0:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80036a2:	b292      	uxth	r2, r2
 80036a4:	f000 fac1 	bl	8003c2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80036a8:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80036aa:	461a      	mov	r2, r3
 80036ac:	4619      	mov	r1, r3
 80036ae:	4620      	mov	r0, r4
 80036b0:	f000 ff94 	bl	80045dc <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80036b4:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80036b8:	2000      	movs	r0, #0
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d13a      	bne.n	8003734 <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80036be:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 80036c4:	69c3      	ldr	r3, [r0, #28]
 80036c6:	fbb3 f5f2 	udiv	r5, r3, r2
 80036ca:	fb02 3515 	mls	r5, r2, r5, r3
 80036ce:	b965      	cbnz	r5, 80036ea <USBD_LL_DataInStage+0x6a>
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d80a      	bhi.n	80036ea <USBD_LL_DataInStage+0x6a>
           (pep->total_length >= pep->maxpacket) &&
 80036d4:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80036d8:	4293      	cmp	r3, r2
 80036da:	d206      	bcs.n	80036ea <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80036dc:	462a      	mov	r2, r5
 80036de:	f000 faa4 	bl	8003c2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80036e2:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80036e6:	462b      	mov	r3, r5
 80036e8:	e7df      	b.n	80036aa <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80036ea:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	b12b      	cbz	r3, 80036fe <USBD_LL_DataInStage+0x7e>
 80036f2:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 80036f6:	2a03      	cmp	r2, #3
 80036f8:	d101      	bne.n	80036fe <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80036fa:	4620      	mov	r0, r4
 80036fc:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80036fe:	2180      	movs	r1, #128	; 0x80
 8003700:	4620      	mov	r0, r4
 8003702:	f000 ff1f 	bl	8004544 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003706:	4620      	mov	r0, r4
 8003708:	f000 fab9 	bl	8003c7e <USBD_CtlReceiveStatus>
 800370c:	e7d2      	b.n	80036b4 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800370e:	f032 0304 	bics.w	r3, r2, #4
 8003712:	d1cf      	bne.n	80036b4 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003714:	2180      	movs	r1, #128	; 0x80
 8003716:	f000 ff15 	bl	8004544 <USBD_LL_StallEP>
 800371a:	e7cb      	b.n	80036b4 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800371c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	b133      	cbz	r3, 8003732 <USBD_LL_DataInStage+0xb2>
 8003724:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003728:	2a03      	cmp	r2, #3
 800372a:	d102      	bne.n	8003732 <USBD_LL_DataInStage+0xb2>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 800372c:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800372e:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003730:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8003732:	2002      	movs	r0, #2
}
 8003734:	bd70      	pop	{r4, r5, r6, pc}

08003736 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003736:	2200      	movs	r2, #0
 8003738:	2340      	movs	r3, #64	; 0x40
{
 800373a:	b570      	push	{r4, r5, r6, lr}
 800373c:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800373e:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003740:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003742:	4611      	mov	r1, r2
 8003744:	f000 fee0 	bl	8004508 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	4633      	mov	r3, r6
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800374c:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003750:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003754:	2200      	movs	r2, #0
 8003756:	4620      	mov	r0, r4
 8003758:	f000 fed6 	bl	8004508 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800375c:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800375e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003762:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003764:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003766:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800376a:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800376e:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003770:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8003774:	b123      	cbz	r3, 8003780 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003776:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800377a:	4620      	mov	r0, r4
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003780:	2000      	movs	r0, #0
 8003782:	bd70      	pop	{r4, r5, r6, pc}

08003784 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003784:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003786:	2000      	movs	r0, #0
 8003788:	4770      	bx	lr

0800378a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800378a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800378e:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003792:	2304      	movs	r3, #4
 8003794:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8003798:	2000      	movs	r0, #0
 800379a:	4770      	bx	lr

0800379c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 800379c:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 80037a0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80037a4:	2000      	movs	r0, #0
 80037a6:	4770      	bx	lr

080037a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80037a8:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80037aa:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80037ae:	2a03      	cmp	r2, #3
 80037b0:	d104      	bne.n	80037bc <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80037b2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	b103      	cbz	r3, 80037bc <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80037ba:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80037bc:	2000      	movs	r0, #0
 80037be:	bd08      	pop	{r3, pc}

080037c0 <USBD_LL_IsoINIncomplete>:
 80037c0:	2000      	movs	r0, #0
 80037c2:	4770      	bx	lr

080037c4 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80037c4:	2000      	movs	r0, #0
 80037c6:	4770      	bx	lr

080037c8 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80037c8:	2000      	movs	r0, #0
 80037ca:	4770      	bx	lr

080037cc <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80037cc:	2201      	movs	r2, #1
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80037ce:	7901      	ldrb	r1, [r0, #4]
{
 80037d0:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 80037d2:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80037d6:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 80037da:	6852      	ldr	r2, [r2, #4]
 80037dc:	4790      	blx	r2

  return USBD_OK;
}
 80037de:	2000      	movs	r0, #0
 80037e0:	bd08      	pop	{r3, pc}

080037e2 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80037e2:	b510      	push	{r4, lr}
 80037e4:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	f000 feac 	bl	8004544 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80037ec:	2100      	movs	r1, #0
 80037ee:	4620      	mov	r0, r4
}
 80037f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80037f4:	f000 bea6 	b.w	8004544 <USBD_LL_StallEP>

080037f8 <USBD_StdDevReq>:
{
 80037f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037fa:	780b      	ldrb	r3, [r1, #0]
{
 80037fc:	4604      	mov	r4, r0
 80037fe:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003800:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003804:	2b20      	cmp	r3, #32
 8003806:	d014      	beq.n	8003832 <USBD_StdDevReq+0x3a>
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d012      	beq.n	8003832 <USBD_StdDevReq+0x3a>
 800380c:	2b00      	cmp	r3, #0
 800380e:	f040 8095 	bne.w	800393c <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 8003812:	784b      	ldrb	r3, [r1, #1]
 8003814:	2b09      	cmp	r3, #9
 8003816:	f200 8090 	bhi.w	800393a <USBD_StdDevReq+0x142>
 800381a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800381e:	00e7      	.short	0x00e7
 8003820:	008e0101 	.word	0x008e0101
 8003824:	008e00fa 	.word	0x008e00fa
 8003828:	00130082 	.word	0x00130082
 800382c:	00d2008e 	.word	0x00d2008e
 8003830:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 8003832:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003836:	4629      	mov	r1, r5
 8003838:	4620      	mov	r0, r4
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4798      	blx	r3
}
 800383e:	2000      	movs	r0, #0
 8003840:	b003      	add	sp, #12
 8003842:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8003844:	884b      	ldrh	r3, [r1, #2]
 8003846:	0a1a      	lsrs	r2, r3, #8
 8003848:	3a01      	subs	r2, #1
 800384a:	2a0e      	cmp	r2, #14
 800384c:	d875      	bhi.n	800393a <USBD_StdDevReq+0x142>
 800384e:	e8df f002 	tbb	[pc, r2]
 8003852:	2824      	.short	0x2824
 8003854:	55747435 	.word	0x55747435
 8003858:	7474745e 	.word	0x7474745e
 800385c:	74747474 	.word	0x74747474
 8003860:	08          	.byte	0x08
 8003861:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8003862:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003866:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003868:	f10d 0106 	add.w	r1, sp, #6
 800386c:	7c20      	ldrb	r0, [r4, #16]
 800386e:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8003870:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003874:	b152      	cbz	r2, 800388c <USBD_StdDevReq+0x94>
 8003876:	88eb      	ldrh	r3, [r5, #6]
 8003878:	b143      	cbz	r3, 800388c <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 800387a:	429a      	cmp	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 800387c:	4601      	mov	r1, r0
 800387e:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8003880:	bf28      	it	cs
 8003882:	461a      	movcs	r2, r3
 8003884:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8003888:	f000 f9c2 	bl	8003c10 <USBD_CtlSendData>
  if(req->wLength == 0U)
 800388c:	88eb      	ldrh	r3, [r5, #6]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1d5      	bne.n	800383e <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8003892:	4620      	mov	r0, r4
 8003894:	f000 f9e8 	bl	8003c68 <USBD_CtlSendStatus>
 8003898:	e7d1      	b.n	800383e <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800389a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	e7e2      	b.n	8003868 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80038a2:	7c02      	ldrb	r2, [r0, #16]
 80038a4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80038a8:	b932      	cbnz	r2, 80038b8 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80038ac:	f10d 0006 	add.w	r0, sp, #6
 80038b0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80038b2:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80038b4:	7043      	strb	r3, [r0, #1]
 80038b6:	e7db      	b.n	8003870 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	e7f7      	b.n	80038ac <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d83b      	bhi.n	800393a <USBD_StdDevReq+0x142>
 80038c2:	e8df f003 	tbb	[pc, r3]
 80038c6:	0703      	.short	0x0703
 80038c8:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80038cc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	e7c9      	b.n	8003868 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80038d4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	e7c5      	b.n	8003868 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80038dc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	e7c1      	b.n	8003868 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80038e4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	e7bd      	b.n	8003868 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80038ec:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	e7b9      	b.n	8003868 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80038f4:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	e7b5      	b.n	8003868 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80038fc:	7c03      	ldrb	r3, [r0, #16]
 80038fe:	b9e3      	cbnz	r3, 800393a <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003900:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003904:	f10d 0006 	add.w	r0, sp, #6
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	4798      	blx	r3
 800390c:	e7b0      	b.n	8003870 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800390e:	7c03      	ldrb	r3, [r0, #16]
 8003910:	b99b      	cbnz	r3, 800393a <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003912:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003916:	f10d 0006 	add.w	r0, sp, #6
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800391e:	2307      	movs	r3, #7
 8003920:	e7c8      	b.n	80038b4 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003922:	888b      	ldrh	r3, [r1, #4]
 8003924:	b94b      	cbnz	r3, 800393a <USBD_StdDevReq+0x142>
 8003926:	88cb      	ldrh	r3, [r1, #6]
 8003928:	b93b      	cbnz	r3, 800393a <USBD_StdDevReq+0x142>
 800392a:	884d      	ldrh	r5, [r1, #2]
 800392c:	2d7f      	cmp	r5, #127	; 0x7f
 800392e:	d804      	bhi.n	800393a <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003930:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003934:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003936:	2b03      	cmp	r3, #3
 8003938:	d103      	bne.n	8003942 <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 800393a:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 800393c:	f7ff ff51 	bl	80037e2 <USBD_CtlError.constprop.1>
    break;
 8003940:	e77d      	b.n	800383e <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8003942:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003946:	f000 fe2d 	bl	80045a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800394a:	4620      	mov	r0, r4
 800394c:	f000 f98c 	bl	8003c68 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003950:	b11d      	cbz	r5, 800395a <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003952:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003954:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8003958:	e771      	b.n	800383e <USBD_StdDevReq+0x46>
 800395a:	2301      	movs	r3, #1
 800395c:	e7fa      	b.n	8003954 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 800395e:	7889      	ldrb	r1, [r1, #2]
 8003960:	4d35      	ldr	r5, [pc, #212]	; (8003a38 <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003962:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003964:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003966:	d8e8      	bhi.n	800393a <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8003968:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800396c:	2b02      	cmp	r3, #2
 800396e:	d008      	beq.n	8003982 <USBD_StdDevReq+0x18a>
 8003970:	2b03      	cmp	r3, #3
 8003972:	d014      	beq.n	800399e <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 8003974:	f7ff ff35 	bl	80037e2 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8003978:	7829      	ldrb	r1, [r5, #0]
 800397a:	4620      	mov	r0, r4
 800397c:	f7ff fe12 	bl	80035a4 <USBD_ClrClassConfig>
 8003980:	e75d      	b.n	800383e <USBD_StdDevReq+0x46>
      if (cfgidx)
 8003982:	2900      	cmp	r1, #0
 8003984:	d085      	beq.n	8003892 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 8003986:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003988:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800398a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800398c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003990:	4620      	mov	r0, r4
 8003992:	f7ff fdfc 	bl	800358e <USBD_SetClassConfig>
 8003996:	2802      	cmp	r0, #2
 8003998:	f47f af7b 	bne.w	8003892 <USBD_StdDevReq+0x9a>
 800399c:	e7cd      	b.n	800393a <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 800399e:	b931      	cbnz	r1, 80039ae <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80039a0:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 80039a2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80039a4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 80039a8:	f7ff fdfc 	bl	80035a4 <USBD_ClrClassConfig>
 80039ac:	e771      	b.n	8003892 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 80039ae:	6841      	ldr	r1, [r0, #4]
 80039b0:	2901      	cmp	r1, #1
 80039b2:	f43f af6e 	beq.w	8003892 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80039b6:	b2c9      	uxtb	r1, r1
 80039b8:	f7ff fdf4 	bl	80035a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80039bc:	7829      	ldrb	r1, [r5, #0]
 80039be:	6061      	str	r1, [r4, #4]
 80039c0:	e7e6      	b.n	8003990 <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 80039c2:	88ca      	ldrh	r2, [r1, #6]
 80039c4:	2a01      	cmp	r2, #1
 80039c6:	d1b8      	bne.n	800393a <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 80039c8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0b4      	beq.n	800393a <USBD_StdDevReq+0x142>
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d903      	bls.n	80039dc <USBD_StdDevReq+0x1e4>
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d1b0      	bne.n	800393a <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80039d8:	1d01      	adds	r1, r0, #4
 80039da:	e003      	b.n	80039e4 <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 80039dc:	4601      	mov	r1, r0
 80039de:	2300      	movs	r3, #0
 80039e0:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80039e4:	4620      	mov	r0, r4
 80039e6:	f000 f913 	bl	8003c10 <USBD_CtlSendData>
 80039ea:	e728      	b.n	800383e <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 80039ec:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80039f0:	3b01      	subs	r3, #1
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d8a1      	bhi.n	800393a <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 80039f6:	88cb      	ldrh	r3, [r1, #6]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d19e      	bne.n	800393a <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80039fc:	2301      	movs	r3, #1
 80039fe:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8003a00:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8003a04:	b10b      	cbz	r3, 8003a0a <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003a06:	2303      	movs	r3, #3
 8003a08:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f104 010c 	add.w	r1, r4, #12
 8003a10:	e7e8      	b.n	80039e4 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003a12:	884b      	ldrh	r3, [r1, #2]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	f47f af12 	bne.w	800383e <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8003a1a:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8003a1e:	e738      	b.n	8003892 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 8003a20:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003a24:	3b01      	subs	r3, #1
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d887      	bhi.n	800393a <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003a2a:	884b      	ldrh	r3, [r1, #2]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f47f af06 	bne.w	800383e <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e7f1      	b.n	8003a1a <USBD_StdDevReq+0x222>
 8003a36:	bf00      	nop
 8003a38:	2000020c 	.word	0x2000020c

08003a3c <USBD_StdItfReq>:
{
 8003a3c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a3e:	780b      	ldrb	r3, [r1, #0]
{
 8003a40:	4604      	mov	r4, r0
 8003a42:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d002      	beq.n	8003a52 <USBD_StdItfReq+0x16>
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d000      	beq.n	8003a52 <USBD_StdItfReq+0x16>
 8003a50:	b9b3      	cbnz	r3, 8003a80 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8003a52:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8003a56:	3b01      	subs	r3, #1
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d810      	bhi.n	8003a7e <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003a5c:	792b      	ldrb	r3, [r5, #4]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d80d      	bhi.n	8003a7e <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8003a62:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003a66:	4629      	mov	r1, r5
 8003a68:	4620      	mov	r0, r4
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8003a6e:	88eb      	ldrh	r3, [r5, #6]
 8003a70:	b91b      	cbnz	r3, 8003a7a <USBD_StdItfReq+0x3e>
 8003a72:	b910      	cbnz	r0, 8003a7a <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8003a74:	4620      	mov	r0, r4
 8003a76:	f000 f8f7 	bl	8003c68 <USBD_CtlSendStatus>
}
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8003a7e:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8003a80:	f7ff feaf 	bl	80037e2 <USBD_CtlError.constprop.1>
    break;
 8003a84:	e7f9      	b.n	8003a7a <USBD_StdItfReq+0x3e>

08003a86 <USBD_StdEPReq>:
{
 8003a86:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a88:	780a      	ldrb	r2, [r1, #0]
{
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a8e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003a92:	2a20      	cmp	r2, #32
 8003a94:	d013      	beq.n	8003abe <USBD_StdEPReq+0x38>
 8003a96:	2a40      	cmp	r2, #64	; 0x40
 8003a98:	d011      	beq.n	8003abe <USBD_StdEPReq+0x38>
 8003a9a:	b96a      	cbnz	r2, 8003ab8 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8003a9c:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003a9e:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8003aa0:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8003aa2:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8003aa4:	d01f      	beq.n	8003ae6 <USBD_StdEPReq+0x60>
 8003aa6:	d335      	bcc.n	8003b14 <USBD_StdEPReq+0x8e>
 8003aa8:	2d03      	cmp	r5, #3
 8003aaa:	d105      	bne.n	8003ab8 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8003aac:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003ab0:	2a02      	cmp	r2, #2
 8003ab2:	d026      	beq.n	8003b02 <USBD_StdEPReq+0x7c>
 8003ab4:	2a03      	cmp	r2, #3
 8003ab6:	d00a      	beq.n	8003ace <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8003ab8:	f7ff fe93 	bl	80037e2 <USBD_CtlError.constprop.1>
    break;
 8003abc:	e005      	b.n	8003aca <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8003abe:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	4790      	blx	r2
}
 8003aca:	2000      	movs	r0, #0
 8003acc:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003ace:	885a      	ldrh	r2, [r3, #2]
 8003ad0:	b92a      	cbnz	r2, 8003ade <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003ad2:	064a      	lsls	r2, r1, #25
 8003ad4:	d003      	beq.n	8003ade <USBD_StdEPReq+0x58>
 8003ad6:	88db      	ldrh	r3, [r3, #6]
 8003ad8:	b90b      	cbnz	r3, 8003ade <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8003ada:	f000 fd33 	bl	8004544 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f000 f8c2 	bl	8003c68 <USBD_CtlSendStatus>
        break;
 8003ae4:	e7f1      	b.n	8003aca <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8003ae6:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003aea:	2a02      	cmp	r2, #2
 8003aec:	d009      	beq.n	8003b02 <USBD_StdEPReq+0x7c>
 8003aee:	2a03      	cmp	r2, #3
 8003af0:	d1e2      	bne.n	8003ab8 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003af2:	885b      	ldrh	r3, [r3, #2]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e8      	bne.n	8003aca <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8003af8:	064d      	lsls	r5, r1, #25
 8003afa:	d0f0      	beq.n	8003ade <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8003afc:	f000 fd30 	bl	8004560 <USBD_LL_ClearStallEP>
 8003b00:	e7ed      	b.n	8003ade <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003b02:	064b      	lsls	r3, r1, #25
 8003b04:	d017      	beq.n	8003b36 <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8003b06:	f000 fd1d 	bl	8004544 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8003b0a:	2180      	movs	r1, #128	; 0x80
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f000 fd19 	bl	8004544 <USBD_LL_StallEP>
 8003b12:	e7da      	b.n	8003aca <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8003b14:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d00e      	beq.n	8003b3a <USBD_StdEPReq+0xb4>
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d1cb      	bne.n	8003ab8 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8003b20:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b24:	f04f 0314 	mov.w	r3, #20
 8003b28:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003b2c:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8003b30:	d014      	beq.n	8003b5c <USBD_StdEPReq+0xd6>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003b32:	6992      	ldr	r2, [r2, #24]
 8003b34:	b9ea      	cbnz	r2, 8003b72 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8003b36:	4620      	mov	r0, r4
 8003b38:	e7be      	b.n	8003ab8 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003b3a:	0649      	lsls	r1, r1, #25
 8003b3c:	d1fb      	bne.n	8003b36 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b3e:	0613      	lsls	r3, r2, #24
          pep->status = 0x0000U;
 8003b40:	f04f 0300 	mov.w	r3, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003b44:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b48:	bf4c      	ite	mi
 8003b4a:	f100 0114 	addmi.w	r1, r0, #20
 8003b4e:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8003b52:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003b54:	4620      	mov	r0, r4
 8003b56:	f000 f85b 	bl	8003c10 <USBD_CtlSendData>
          break;
 8003b5a:	e7b6      	b.n	8003aca <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003b5c:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	d0e8      	beq.n	8003b36 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b64:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003b68:	fb03 0505 	mla	r5, r3, r5, r0
 8003b6c:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8003b70:	e004      	b.n	8003b7c <USBD_StdEPReq+0xf6>
 8003b72:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003b76:	fb05 3503 	mla	r5, r5, r3, r3
 8003b7a:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003b7c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8003b80:	d103      	bne.n	8003b8a <USBD_StdEPReq+0x104>
            pep->status = 0x0001U;
 8003b82:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003b84:	2202      	movs	r2, #2
 8003b86:	4629      	mov	r1, r5
 8003b88:	e7e4      	b.n	8003b54 <USBD_StdEPReq+0xce>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f000 fcf6 	bl	800457c <USBD_LL_IsStallEP>
 8003b90:	b108      	cbz	r0, 8003b96 <USBD_StdEPReq+0x110>
            pep->status = 0x0001U;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e7f5      	b.n	8003b82 <USBD_StdEPReq+0xfc>
            pep->status = 0x0000U;
 8003b96:	6028      	str	r0, [r5, #0]
 8003b98:	e7f4      	b.n	8003b84 <USBD_StdEPReq+0xfe>

08003b9a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003b9a:	780b      	ldrb	r3, [r1, #0]
 8003b9c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003b9e:	784b      	ldrb	r3, [r1, #1]
 8003ba0:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003ba2:	78ca      	ldrb	r2, [r1, #3]
 8003ba4:	788b      	ldrb	r3, [r1, #2]
 8003ba6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003baa:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003bac:	794a      	ldrb	r2, [r1, #5]
 8003bae:	790b      	ldrb	r3, [r1, #4]
 8003bb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003bb4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003bb6:	79ca      	ldrb	r2, [r1, #7]
 8003bb8:	798b      	ldrb	r3, [r1, #6]
 8003bba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003bbe:	80c3      	strh	r3, [r0, #6]
 8003bc0:	4770      	bx	lr

08003bc2 <USBD_CtlError>:
{
 8003bc2:	b510      	push	{r4, lr}
 8003bc4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	f000 fcbc 	bl	8004544 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4620      	mov	r0, r4
}
 8003bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8003bd4:	f000 bcb6 	b.w	8004544 <USBD_LL_StallEP>

08003bd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003bd8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003bda:	b188      	cbz	r0, 8003c00 <USBD_GetString+0x28>
 8003bdc:	4605      	mov	r5, r0
 8003bde:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8003be0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2c00      	cmp	r4, #0
 8003be8:	d1f9      	bne.n	8003bde <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003bea:	3301      	adds	r3, #1
 8003bec:	3801      	subs	r0, #1
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003bf2:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	704b      	strb	r3, [r1, #1]
 8003bf8:	2302      	movs	r3, #2
    while (*desc != '\0')
 8003bfa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003bfe:	b905      	cbnz	r5, 8003c02 <USBD_GetString+0x2a>
 8003c00:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8003c06:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8003c08:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	548c      	strb	r4, [r1, r2]
 8003c0e:	e7f4      	b.n	8003bfa <USBD_GetString+0x22>

08003c10 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8003c10:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003c12:	2202      	movs	r2, #2
{
 8003c14:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003c16:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003c1a:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
 8003c1c:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003c1e:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8003c20:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003c22:	f000 fccd 	bl	80045c0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003c26:	2000      	movs	r0, #0
 8003c28:	bd10      	pop	{r4, pc}

08003c2a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8003c2a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	460a      	mov	r2, r1
 8003c30:	2100      	movs	r1, #0
 8003c32:	f000 fcc5 	bl	80045c0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003c36:	2000      	movs	r0, #0
 8003c38:	bd08      	pop	{r3, pc}

08003c3a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8003c3a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003c3c:	2203      	movs	r2, #3
{
 8003c3e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003c40:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8003c44:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8003c46:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8003c4a:	2100      	movs	r1, #0
  pdev->ep_out[0].rem_length   = len;
 8003c4c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8003c50:	f000 fcc4 	bl	80045dc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003c54:	2000      	movs	r0, #0
 8003c56:	bd10      	pop	{r4, pc}

08003c58 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8003c58:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	2100      	movs	r1, #0
 8003c60:	f000 fcbc 	bl	80045dc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003c64:	2000      	movs	r0, #0
 8003c66:	bd08      	pop	{r3, pc}

08003c68 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8003c68:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003c70:	2300      	movs	r3, #0
 8003c72:	461a      	mov	r2, r3
 8003c74:	4619      	mov	r1, r3
 8003c76:	f000 fca3 	bl	80045c0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	bd08      	pop	{r3, pc}

08003c7e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8003c7e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003c80:	2305      	movs	r3, #5
 8003c82:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8003c86:	2300      	movs	r3, #0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f000 fca6 	bl	80045dc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003c90:	2000      	movs	r0, #0
 8003c92:	bd08      	pop	{r3, pc}

08003c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c94:	b510      	push	{r4, lr}
 8003c96:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c98:	2234      	movs	r2, #52	; 0x34
 8003c9a:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c9c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c9e:	a807      	add	r0, sp, #28
 8003ca0:	f000 fdda 	bl	8004858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ca4:	2214      	movs	r2, #20
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	a802      	add	r0, sp, #8
 8003caa:	f000 fdd5 	bl	8004858 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cae:	2100      	movs	r1, #0
 8003cb0:	2290      	movs	r2, #144	; 0x90
 8003cb2:	a814      	add	r0, sp, #80	; 0x50
 8003cb4:	f000 fdd0 	bl	8004858 <memset>
  HAL_PWR_EnableBkUpAccess();
 8003cb8:	f7fd fae8 	bl	800128c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cbc:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <SystemClock_Config+0xa8>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cbe:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003cca:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003cd4:	6813      	ldr	r3, [r2, #0]
 8003cd6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003ce2:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ce4:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003ce6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003cea:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cec:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003cf6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003cfa:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d00:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003d02:	2304      	movs	r3, #4
 8003d04:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d06:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d08:	f7fd fb00 	bl	800130c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003d0c:	f7fd fac6 	bl	800129c <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d10:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d12:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d14:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d16:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003d1c:	2103      	movs	r1, #3
 8003d1e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d20:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d22:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d24:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003d26:	f7fd fcb3 	bl	8001690 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <SystemClock_Config+0xb0>)
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d2c:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003d2e:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8003d30:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003d32:	9433      	str	r4, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d34:	f7fd fd70 	bl	8001818 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003d38:	b038      	add	sp, #224	; 0xe0
 8003d3a:	bd10      	pop	{r4, pc}
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40007000 	.word	0x40007000
 8003d44:	00200100 	.word	0x00200100

08003d48 <main>:
{
 8003d48:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003d4c:	b0a1      	sub	sp, #132	; 0x84
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2400      	movs	r4, #0
  HAL_Init();
 8003d50:	f7fc fc26 	bl	80005a0 <HAL_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003d54:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  SystemClock_Config();
 8003d58:	f7ff ff9c 	bl	8003c94 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	2214      	movs	r2, #20
 8003d5e:	2100      	movs	r1, #0
 8003d60:	a815      	add	r0, sp, #84	; 0x54
 8003d62:	f000 fd79 	bl	8004858 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d66:	4bac      	ldr	r3, [pc, #688]	; (8004018 <main+0x2d0>)
  HAL_GPIO_WritePin(NOTE_LATCH_GPIO_Port, NOTE_LATCH_Pin, GPIO_PIN_RESET);
 8003d68:	2110      	movs	r1, #16
 8003d6a:	48ac      	ldr	r0, [pc, #688]	; (800401c <main+0x2d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d6e:	250b      	movs	r5, #11
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d70:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d74:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d76:	f042 0204 	orr.w	r2, r2, #4
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : NOTE_LATCH_Pin */
  GPIO_InitStruct.Pin = NOTE_LATCH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d7a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = NOTE_LATCH_Pin;
 8003d7c:	f04f 0a10 	mov.w	sl, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : Z_DAE_DIR_Pin */
  GPIO_InitStruct.Pin = Z_DAE_DIR_Pin;
 8003d80:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
 8003d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d88:	f002 0204 	and.w	r2, r2, #4
 8003d8c:	9200      	str	r2, [sp, #0]
 8003d8e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
 8003d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d9a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003d9e:	9201      	str	r2, [sp, #4]
 8003da0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
 8003daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dac:	f002 0201 	and.w	r2, r2, #1
 8003db0:	9202      	str	r2, [sp, #8]
 8003db2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db6:	f042 0210 	orr.w	r2, r2, #16
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
 8003dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dbe:	f002 0210 	and.w	r2, r2, #16
 8003dc2:	9203      	str	r2, [sp, #12]
 8003dc4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc8:	f042 0202 	orr.w	r2, r2, #2
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8003dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd0:	f002 0202 	and.w	r2, r2, #2
 8003dd4:	9204      	str	r2, [sp, #16]
 8003dd6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dda:	f042 0208 	orr.w	r2, r2, #8
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
 8003de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de2:	f002 0208 	and.w	r2, r2, #8
 8003de6:	9205      	str	r2, [sp, #20]
 8003de8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(NOTE_LATCH_GPIO_Port, NOTE_LATCH_Pin, GPIO_PIN_RESET);
 8003df2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	9306      	str	r3, [sp, #24]
 8003dfc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(NOTE_LATCH_GPIO_Port, NOTE_LATCH_Pin, GPIO_PIN_RESET);
 8003dfe:	f7fc fd57 	bl	80008b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, X_DAE_DIR_Pin|Y_DAE_DIR_Pin|Z_DAE_DIR_Pin, GPIO_PIN_RESET);
 8003e02:	2200      	movs	r2, #0
 8003e04:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8003e08:	4885      	ldr	r0, [pc, #532]	; (8004020 <main+0x2d8>)
 8003e0a:	f7fc fd51 	bl	80008b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003e14:	4883      	ldr	r0, [pc, #524]	; (8004024 <main+0x2dc>)
 8003e16:	f7fc fd4b 	bl	80008b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2140      	movs	r1, #64	; 0x40
 8003e1e:	4882      	ldr	r0, [pc, #520]	; (8004028 <main+0x2e0>)
 8003e20:	f7fc fd46 	bl	80008b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e24:	4b81      	ldr	r3, [pc, #516]	; (800402c <main+0x2e4>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003e26:	a915      	add	r1, sp, #84	; 0x54
 8003e28:	4881      	ldr	r0, [pc, #516]	; (8004030 <main+0x2e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e2a:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003e2e:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003e32:	f7fc fc53 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003e36:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e38:	a915      	add	r1, sp, #84	; 0x54
 8003e3a:	487d      	ldr	r0, [pc, #500]	; (8004030 <main+0x2e8>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003e3c:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e40:	9519      	str	r5, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e42:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e46:	9718      	str	r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e48:	f7fc fc48 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003e4c:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4e:	a915      	add	r1, sp, #84	; 0x54
 8003e50:	4872      	ldr	r0, [pc, #456]	; (800401c <main+0x2d4>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003e52:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e56:	9519      	str	r5, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e58:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5c:	9718      	str	r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5e:	f7fc fc3d 	bl	80006dc <HAL_GPIO_Init>
  HAL_GPIO_Init(NOTE_LATCH_GPIO_Port, &GPIO_InitStruct);
 8003e62:	a915      	add	r1, sp, #84	; 0x54
 8003e64:	486d      	ldr	r0, [pc, #436]	; (800401c <main+0x2d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e68:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = NOTE_LATCH_Pin;
 8003e6a:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e6e:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(NOTE_LATCH_GPIO_Port, &GPIO_InitStruct);
 8003e70:	f7fc fc34 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = X_DAE_DIR_Pin|Y_DAE_DIR_Pin;
 8003e74:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e78:	a915      	add	r1, sp, #84	; 0x54
 8003e7a:	4869      	ldr	r0, [pc, #420]	; (8004020 <main+0x2d8>)
  GPIO_InitStruct.Pin = X_DAE_DIR_Pin|Y_DAE_DIR_Pin;
 8003e7c:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e80:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003e82:	9618      	str	r6, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e84:	f7fc fc2a 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Z_DAE_DIR_GPIO_Port, &GPIO_InitStruct);
 8003e88:	a915      	add	r1, sp, #84	; 0x54
 8003e8a:	4865      	ldr	r0, [pc, #404]	; (8004020 <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8e:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = Z_DAE_DIR_Pin;
 8003e90:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e94:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(Z_DAE_DIR_GPIO_Port, &GPIO_InitStruct);
 8003e96:	f7fc fc21 	bl	80006dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003e9a:	a915      	add	r1, sp, #84	; 0x54
 8003e9c:	4861      	ldr	r0, [pc, #388]	; (8004024 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ea0:	9519      	str	r5, [sp, #100]	; 0x64
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003ea2:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea6:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eaa:	9718      	str	r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003eac:	f7fc fc16 	bl	80006dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003eb0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb4:	a915      	add	r1, sp, #84	; 0x54
 8003eb6:	485b      	ldr	r0, [pc, #364]	; (8004024 <main+0x2dc>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003eb8:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eba:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebc:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ebe:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec0:	f7fc fc0c 	bl	80006dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003ec4:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003ec6:	a915      	add	r1, sp, #84	; 0x54
 8003ec8:	4857      	ldr	r0, [pc, #348]	; (8004028 <main+0x2e0>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003eca:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ece:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed0:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003ed2:	f7fc fc03 	bl	80006dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003ed6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003ed8:	a915      	add	r1, sp, #84	; 0x54
 8003eda:	4853      	ldr	r0, [pc, #332]	; (8004028 <main+0x2e0>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003edc:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ede:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee0:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003ee2:	f7fc fbfb 	bl	80006dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003ee6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003eea:	a915      	add	r1, sp, #84	; 0x54
 8003eec:	484e      	ldr	r0, [pc, #312]	; (8004028 <main+0x2e0>)
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003eee:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ef2:	9519      	str	r5, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ef8:	9718      	str	r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003efa:	f7fc fbef 	bl	80006dc <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003efe:	4621      	mov	r1, r4
 8003f00:	4652      	mov	r2, sl
 8003f02:	a80a      	add	r0, sp, #40	; 0x28
  htim1.Instance = TIM1;
 8003f04:	4d4b      	ldr	r5, [pc, #300]	; (8004034 <main+0x2ec>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f06:	f000 fca7 	bl	8004858 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	221c      	movs	r2, #28
 8003f0e:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f10:	9407      	str	r4, [sp, #28]
 8003f12:	9408      	str	r4, [sp, #32]
 8003f14:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f16:	f000 fc9f 	bl	8004858 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	222c      	movs	r2, #44	; 0x2c
 8003f1e:	a815      	add	r0, sp, #84	; 0x54
 8003f20:	f000 fc9a 	bl	8004858 <memset>
  htim1.Init.Prescaler = 960;
 8003f24:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003f28:	4a43      	ldr	r2, [pc, #268]	; (8004038 <main+0x2f0>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f2a:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f2c:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8003f2e:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f30:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f32:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f34:	61ac      	str	r4, [r5, #24]
  htim1.Init.Prescaler = 960;
 8003f36:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f3a:	f7fe f8bd 	bl	80020b8 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f3e:	a90a      	add	r1, sp, #40	; 0x28
 8003f40:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f42:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f46:	f7fe f965 	bl	8002214 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	f7fe f8ce 	bl	80020ec <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f50:	a907      	add	r1, sp, #28
 8003f52:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f54:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f56:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f58:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f5a:	f7fe f9ef 	bl	800233c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f5e:	4622      	mov	r2, r4
 8003f60:	a90e      	add	r1, sp, #56	; 0x38
 8003f62:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f64:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f66:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f68:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f6a:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f6c:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003f6e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  sConfigOC.Pulse = 1;
 8003f72:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f74:	f7fe f90c 	bl	8002190 <HAL_TIM_OC_ConfigChannel>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f78:	2204      	movs	r2, #4
 8003f7a:	a90e      	add	r1, sp, #56	; 0x38
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f7fe f907 	bl	8002190 <HAL_TIM_OC_ConfigChannel>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f82:	2208      	movs	r2, #8
 8003f84:	a90e      	add	r1, sp, #56	; 0x38
 8003f86:	4628      	mov	r0, r5
 8003f88:	f7fe f902 	bl	8002190 <HAL_TIM_OC_ConfigChannel>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f90:	a915      	add	r1, sp, #84	; 0x54
 8003f92:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f94:	931d      	str	r3, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f96:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f98:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f9a:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f9c:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f9e:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003fa0:	941b      	str	r4, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003fa2:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003fa4:	941e      	str	r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fa6:	941f      	str	r4, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003fa8:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003fac:	f7fe f9f2 	bl	8002394 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8003fb0:	4628      	mov	r0, r5
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fb2:	f44f 7582 	mov.w	r5, #260	; 0x104
  HAL_TIM_MspPostInit(&htim1);
 8003fb6:	f000 f8cb 	bl	8004150 <HAL_TIM_MspPostInit>
  huart3.Instance = USART3;
 8003fba:	4820      	ldr	r0, [pc, #128]	; (800403c <main+0x2f4>)
  huart3.Init.BaudRate = 115200;
 8003fbc:	4920      	ldr	r1, [pc, #128]	; (8004040 <main+0x2f8>)
 8003fbe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003fc2:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003fc4:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003fc6:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fc8:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fca:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fcc:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fce:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 8003fd0:	e880 000a 	stmia.w	r0, {r1, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fd4:	230c      	movs	r3, #12
 8003fd6:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003fd8:	f7fe fc5d 	bl	8002896 <HAL_UART_Init>
  MX_USB_DEVICE_Init();
 8003fdc:	f000 f966 	bl	80042ac <MX_USB_DEVICE_Init>
  hspi1.Instance = SPI1;
 8003fe0:	4818      	ldr	r0, [pc, #96]	; (8004044 <main+0x2fc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <main+0x300>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003fe4:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fe6:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fe8:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fea:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fec:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fee:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ff0:	6304      	str	r4, [r0, #48]	; 0x30
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003ff2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ff6:	e880 0028 	stmia.w	r0, {r3, r5}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ffa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003ffe:	f504 3401 	add.w	r4, r4, #132096	; 0x20400
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004002:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004008:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800400a:	2330      	movs	r3, #48	; 0x30
 800400c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 800400e:	2307      	movs	r3, #7
 8004010:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004012:	2308      	movs	r3, #8
 8004014:	6343      	str	r3, [r0, #52]	; 0x34
 8004016:	e019      	b.n	800404c <main+0x304>
 8004018:	40023800 	.word	0x40023800
 800401c:	40020000 	.word	0x40020000
 8004020:	40021000 	.word	0x40021000
 8004024:	40020400 	.word	0x40020400
 8004028:	40021800 	.word	0x40021800
 800402c:	10110000 	.word	0x10110000
 8004030:	40020800 	.word	0x40020800
 8004034:	200002a0 	.word	0x200002a0
 8004038:	40010000 	.word	0x40010000
 800403c:	20000220 	.word	0x20000220
 8004040:	40004800 	.word	0x40004800
 8004044:	200002e0 	.word	0x200002e0
 8004048:	40013000 	.word	0x40013000
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800404c:	f7fd fe92 	bl	8001d74 <HAL_SPI_Init>
	  HAL_Delay(100);
 8004050:	2064      	movs	r0, #100	; 0x64
 8004052:	f7fc fac3 	bl	80005dc <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	4620      	mov	r0, r4
 800405a:	f7fc fc2e 	bl	80008ba <HAL_GPIO_TogglePin>
	  print_hello_world();
 800405e:	f000 fb7f 	bl	8004760 <print_hello_world>
 8004062:	e7f5      	b.n	8004050 <main+0x308>

08004064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004064:	4770      	bx	lr
	...

08004068 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <HAL_MspInit+0x2c>)
{
 800406a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800406c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800406e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004072:	641a      	str	r2, [r3, #64]	; 0x40
 8004074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004076:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800407a:	9200      	str	r2, [sp, #0]
 800407c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800407e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
 8004086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004090:	b002      	add	sp, #8
 8004092:	4770      	bx	lr
 8004094:	40023800 	.word	0x40023800

08004098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800409e:	2214      	movs	r2, #20
 80040a0:	2100      	movs	r1, #0
 80040a2:	a803      	add	r0, sp, #12
 80040a4:	f000 fbd8 	bl	8004858 <memset>
  if(hspi->Instance==SPI1)
 80040a8:	6822      	ldr	r2, [r4, #0]
 80040aa:	4b1c      	ldr	r3, [pc, #112]	; (800411c <HAL_SPI_MspInit+0x84>)
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d133      	bne.n	8004118 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040b0:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = NOTE_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b4:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80040b6:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040b8:	2405      	movs	r4, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(NOTE_CLK_GPIO_Port, &GPIO_InitStruct);
 80040bc:	a903      	add	r1, sp, #12
 80040be:	4818      	ldr	r0, [pc, #96]	; (8004120 <HAL_SPI_MspInit+0x88>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
 80040c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040cc:	9200      	str	r2, [sp, #0]
 80040ce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
 80040d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040da:	f002 0201 	and.w	r2, r2, #1
 80040de:	9201      	str	r2, [sp, #4]
 80040e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e4:	f042 0208 	orr.w	r2, r2, #8
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ec:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040ee:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80040f2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040f4:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040f6:	9302      	str	r3, [sp, #8]
 80040f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = NOTE_CLK_Pin;
 80040fa:	2320      	movs	r3, #32
 80040fc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(NOTE_CLK_GPIO_Port, &GPIO_InitStruct);
 80040fe:	f7fc faed 	bl	80006dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NOTE_DATA_Pin;
 8004102:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(NOTE_DATA_GPIO_Port, &GPIO_InitStruct);
 8004104:	a903      	add	r1, sp, #12
 8004106:	4807      	ldr	r0, [pc, #28]	; (8004124 <HAL_SPI_MspInit+0x8c>)
    GPIO_InitStruct.Pin = NOTE_DATA_Pin;
 8004108:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004110:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004112:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(NOTE_DATA_GPIO_Port, &GPIO_InitStruct);
 8004114:	f7fc fae2 	bl	80006dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004118:	b008      	add	sp, #32
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	40013000 	.word	0x40013000
 8004120:	40020000 	.word	0x40020000
 8004124:	40020c00 	.word	0x40020c00

08004128 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8004128:	6802      	ldr	r2, [r0, #0]
{
 800412a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <HAL_TIM_Base_MspInit+0x24>)
 800412e:	429a      	cmp	r2, r3
 8004130:	d10a      	bne.n	8004148 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004132:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8004136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	645a      	str	r2, [r3, #68]	; 0x44
 800413e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004148:	b002      	add	sp, #8
 800414a:	4770      	bx	lr
 800414c:	40010000 	.word	0x40010000

08004150 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004150:	b510      	push	{r4, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004156:	2214      	movs	r2, #20
 8004158:	2100      	movs	r1, #0
 800415a:	a801      	add	r0, sp, #4
 800415c:	f000 fb7c 	bl	8004858 <memset>
  if(htim->Instance==TIM1)
 8004160:	6822      	ldr	r2, [r4, #0]
 8004162:	4b0e      	ldr	r3, [pc, #56]	; (800419c <HAL_TIM_MspPostInit+0x4c>)
 8004164:	429a      	cmp	r2, r3
 8004166:	d116      	bne.n	8004196 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004168:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = X_DAE_STEP_Pin|Y_DAE_STEP_Pin|Z_DAE_STEP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800416c:	a901      	add	r1, sp, #4
 800416e:	480c      	ldr	r0, [pc, #48]	; (80041a0 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004172:	f042 0210 	orr.w	r2, r2, #16
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = X_DAE_STEP_Pin|Y_DAE_STEP_Pin|Z_DAE_STEP_Pin;
 8004182:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8004186:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004188:	2302      	movs	r3, #2
 800418a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800418c:	2301      	movs	r3, #1
 800418e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004190:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004192:	f7fc faa3 	bl	80006dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004196:	b006      	add	sp, #24
 8004198:	bd10      	pop	{r4, pc}
 800419a:	bf00      	nop
 800419c:	40010000 	.word	0x40010000
 80041a0:	40021000 	.word	0x40021000

080041a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041a4:	b510      	push	{r4, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041aa:	2214      	movs	r2, #20
 80041ac:	2100      	movs	r1, #0
 80041ae:	a803      	add	r0, sp, #12
 80041b0:	f000 fb52 	bl	8004858 <memset>
  if(huart->Instance==USART3)
 80041b4:	6822      	ldr	r2, [r4, #0]
 80041b6:	4b13      	ldr	r3, [pc, #76]	; (8004204 <HAL_UART_MspInit+0x60>)
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d120      	bne.n	80041fe <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80041bc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041c0:	a903      	add	r1, sp, #12
 80041c2:	4811      	ldr	r0, [pc, #68]	; (8004208 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80041c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40
 80041cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ce:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80041d2:	9201      	str	r2, [sp, #4]
 80041d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d8:	f042 0208 	orr.w	r2, r2, #8
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	9302      	str	r3, [sp, #8]
 80041e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80041e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ee:	2302      	movs	r3, #2
 80041f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80041f2:	2301      	movs	r3, #1
 80041f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041f6:	2307      	movs	r3, #7
 80041f8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041fa:	f7fc fa6f 	bl	80006dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041fe:	b008      	add	sp, #32
 8004200:	bd10      	pop	{r4, pc}
 8004202:	bf00      	nop
 8004204:	40004800 	.word	0x40004800
 8004208:	40020c00 	.word	0x40020c00

0800420c <NMI_Handler>:
 800420c:	4770      	bx	lr

0800420e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800420e:	e7fe      	b.n	800420e <HardFault_Handler>

08004210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004210:	e7fe      	b.n	8004210 <MemManage_Handler>

08004212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004212:	e7fe      	b.n	8004212 <BusFault_Handler>

08004214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004214:	e7fe      	b.n	8004214 <UsageFault_Handler>

08004216 <SVC_Handler>:
 8004216:	4770      	bx	lr

08004218 <DebugMon_Handler>:
 8004218:	4770      	bx	lr

0800421a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800421a:	4770      	bx	lr

0800421c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800421c:	f7fc b9cc 	b.w	80005b8 <HAL_IncTick>

08004220 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004220:	4801      	ldr	r0, [pc, #4]	; (8004228 <OTG_FS_IRQHandler+0x8>)
 8004222:	f7fc bbeb 	b.w	80009fc <HAL_PCD_IRQHandler>
 8004226:	bf00      	nop
 8004228:	200015e0 	.word	0x200015e0

0800422c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800422c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <_sbrk+0x2c>)
{
 8004230:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	b909      	cbnz	r1, 800423a <_sbrk+0xe>
		heap_end = &end;
 8004236:	4909      	ldr	r1, [pc, #36]	; (800425c <_sbrk+0x30>)
 8004238:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800423a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800423c:	4669      	mov	r1, sp
 800423e:	4402      	add	r2, r0
 8004240:	428a      	cmp	r2, r1
 8004242:	d906      	bls.n	8004252 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004244:	f000 face 	bl	80047e4 <__errno>
 8004248:	230c      	movs	r3, #12
 800424a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800424c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004250:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004252:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004254:	bd08      	pop	{r3, pc}
 8004256:	bf00      	nop
 8004258:	20000210 	.word	0x20000210
 800425c:	20001be8 	.word	0x20001be8

08004260 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004260:	490f      	ldr	r1, [pc, #60]	; (80042a0 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004262:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004264:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <SystemInit+0x44>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800427a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004282:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004286:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004288:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <SystemInit+0x48>)
 800428a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004292:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004294:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004296:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800429a:	608b      	str	r3, [r1, #8]
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	e000ed00 	.word	0xe000ed00
 80042a4:	40023800 	.word	0x40023800
 80042a8:	24003010 	.word	0x24003010

080042ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80042ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80042ae:	2200      	movs	r2, #0
 80042b0:	490e      	ldr	r1, [pc, #56]	; (80042ec <MX_USB_DEVICE_Init+0x40>)
 80042b2:	480f      	ldr	r0, [pc, #60]	; (80042f0 <MX_USB_DEVICE_Init+0x44>)
 80042b4:	f7ff f94a 	bl	800354c <USBD_Init>
 80042b8:	b108      	cbz	r0, 80042be <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80042ba:	f7ff fed3 	bl	8004064 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80042be:	490d      	ldr	r1, [pc, #52]	; (80042f4 <MX_USB_DEVICE_Init+0x48>)
 80042c0:	480b      	ldr	r0, [pc, #44]	; (80042f0 <MX_USB_DEVICE_Init+0x44>)
 80042c2:	f7ff f958 	bl	8003576 <USBD_RegisterClass>
 80042c6:	b108      	cbz	r0, 80042cc <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80042c8:	f7ff fecc 	bl	8004064 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80042cc:	490a      	ldr	r1, [pc, #40]	; (80042f8 <MX_USB_DEVICE_Init+0x4c>)
 80042ce:	4808      	ldr	r0, [pc, #32]	; (80042f0 <MX_USB_DEVICE_Init+0x44>)
 80042d0:	f7ff f914 	bl	80034fc <USBD_CDC_RegisterInterface>
 80042d4:	b108      	cbz	r0, 80042da <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80042d6:	f7ff fec5 	bl	8004064 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80042da:	4805      	ldr	r0, [pc, #20]	; (80042f0 <MX_USB_DEVICE_Init+0x44>)
 80042dc:	f7ff f952 	bl	8003584 <USBD_Start>
 80042e0:	b118      	cbz	r0, 80042ea <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80042e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80042e6:	f7ff bebd 	b.w	8004064 <Error_Handler>
 80042ea:	bd08      	pop	{r3, pc}
 80042ec:	2000012c 	.word	0x2000012c
 80042f0:	20000344 	.word	0x20000344
 80042f4:	20000008 	.word	0x20000008
 80042f8:	2000011c 	.word	0x2000011c

080042fc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80042fc:	2000      	movs	r0, #0
 80042fe:	4770      	bx	lr

08004300 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004300:	2000      	movs	r0, #0
 8004302:	4770      	bx	lr

08004304 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004304:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004306:	4c05      	ldr	r4, [pc, #20]	; (800431c <CDC_Receive_FS+0x18>)
 8004308:	4601      	mov	r1, r0
 800430a:	4620      	mov	r0, r4
 800430c:	f7ff f905 	bl	800351a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004310:	4620      	mov	r0, r4
 8004312:	f7ff f908 	bl	8003526 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004316:	2000      	movs	r0, #0
 8004318:	bd10      	pop	{r4, pc}
 800431a:	bf00      	nop
 800431c:	20000344 	.word	0x20000344

08004320 <CDC_Init_FS>:
{
 8004320:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004322:	4c06      	ldr	r4, [pc, #24]	; (800433c <CDC_Init_FS+0x1c>)
 8004324:	2200      	movs	r2, #0
 8004326:	4906      	ldr	r1, [pc, #24]	; (8004340 <CDC_Init_FS+0x20>)
 8004328:	4620      	mov	r0, r4
 800432a:	f7ff f8ee 	bl	800350a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800432e:	4905      	ldr	r1, [pc, #20]	; (8004344 <CDC_Init_FS+0x24>)
 8004330:	4620      	mov	r0, r4
 8004332:	f7ff f8f2 	bl	800351a <USBD_CDC_SetRxBuffer>
}
 8004336:	2000      	movs	r0, #0
 8004338:	bd10      	pop	{r4, pc}
 800433a:	bf00      	nop
 800433c:	20000344 	.word	0x20000344
 8004340:	20000de0 	.word	0x20000de0
 8004344:	200005e0 	.word	0x200005e0

08004348 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8004348:	6803      	ldr	r3, [r0, #0]
 800434a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800434e:	b530      	push	{r4, r5, lr}
 8004350:	b089      	sub	sp, #36	; 0x24
  if(pcdHandle->Instance==USB_OTG_FS)
 8004352:	d13b      	bne.n	80043cc <HAL_PCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004354:	4c1e      	ldr	r4, [pc, #120]	; (80043d0 <HAL_PCD_MspInit+0x88>)
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004356:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004358:	a903      	add	r1, sp, #12
 800435a:	481e      	ldr	r0, [pc, #120]	; (80043d4 <HAL_PCD_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	6323      	str	r3, [r4, #48]	; 0x30
 8004364:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004366:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004370:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004374:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004376:	2302      	movs	r3, #2
 8004378:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437a:	2303      	movs	r3, #3
 800437c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800437e:	230a      	movs	r3, #10
 8004380:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004382:	f7fc f9ab 	bl	80006dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004386:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800438a:	a903      	add	r1, sp, #12
 800438c:	4811      	ldr	r0, [pc, #68]	; (80043d4 <HAL_PCD_MspInit+0x8c>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800438e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004390:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004392:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004394:	f7fc f9a2 	bl	80006dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004398:	6b63      	ldr	r3, [r4, #52]	; 0x34

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800439a:	2043      	movs	r0, #67	; 0x43
 800439c:	462a      	mov	r2, r5
 800439e:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80043a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a4:	6363      	str	r3, [r4, #52]	; 0x34
 80043a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	9b01      	ldr	r3, [sp, #4]
 80043b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b6:	6463      	str	r3, [r4, #68]	; 0x44
 80043b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043be:	9302      	str	r3, [sp, #8]
 80043c0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80043c2:	f7fc f92f 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80043c6:	2043      	movs	r0, #67	; 0x43
 80043c8:	f7fc f964 	bl	8000694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80043cc:	b009      	add	sp, #36	; 0x24
 80043ce:	bd30      	pop	{r4, r5, pc}
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40020000 	.word	0x40020000

080043d8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80043d8:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80043dc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80043e0:	f7ff b8e7 	b.w	80035b2 <USBD_LL_SetupStage>

080043e4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80043e4:	231c      	movs	r3, #28
 80043e6:	fb03 0301 	mla	r3, r3, r1, r0
 80043ea:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80043ee:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80043f2:	f7ff b90b 	b.w	800360c <USBD_LL_DataOutStage>

080043f6 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80043f6:	231c      	movs	r3, #28
 80043f8:	fb03 0301 	mla	r3, r3, r1, r0
 80043fc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8004400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004402:	f7ff b93d 	b.w	8003680 <USBD_LL_DataInStage>

08004406 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004406:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800440a:	f7ff b9cd 	b.w	80037a8 <USBD_LL_SOF>

0800440e <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800440e:	68c1      	ldr	r1, [r0, #12]
{ 
 8004410:	b510      	push	{r4, lr}
 8004412:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8004414:	b121      	cbz	r1, 8004420 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8004416:	2902      	cmp	r1, #2
 8004418:	d001      	beq.n	800441e <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 800441a:	f7ff fe23 	bl	8004064 <Error_Handler>
    speed = USBD_SPEED_FULL;
 800441e:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004420:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8004424:	f7ff f9ae 	bl	8003784 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004428:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 800442c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004430:	f7ff b981 	b.w	8003736 <USBD_LL_Reset>

08004434 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004434:	b510      	push	{r4, lr}
 8004436:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004438:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800443c:	f7ff f9a5 	bl	800378a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800444e:	6a23      	ldr	r3, [r4, #32]
 8004450:	b123      	cbz	r3, 800445c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004452:	4a03      	ldr	r2, [pc, #12]	; (8004460 <HAL_PCD_SuspendCallback+0x2c>)
 8004454:	6913      	ldr	r3, [r2, #16]
 8004456:	f043 0306 	orr.w	r3, r3, #6
 800445a:	6113      	str	r3, [r2, #16]
 800445c:	bd10      	pop	{r4, pc}
 800445e:	bf00      	nop
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004464:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8004468:	f7ff b998 	b.w	800379c <USBD_LL_Resume>

0800446c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800446c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8004470:	f7ff b9a8 	b.w	80037c4 <USBD_LL_IsoOUTIncomplete>

08004474 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004474:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8004478:	f7ff b9a2 	b.w	80037c0 <USBD_LL_IsoINIncomplete>

0800447c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800447c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8004480:	f7ff b9a2 	b.w	80037c8 <USBD_LL_DevConnected>

08004484 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004484:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8004488:	f7ff b9a0 	b.w	80037cc <USBD_LL_DevDisconnected>

0800448c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800448c:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800448e:	7802      	ldrb	r2, [r0, #0]
 8004490:	bb3a      	cbnz	r2, 80044e2 <USBD_LL_Init+0x56>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004494:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8004496:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800449a:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800449e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80044a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80044a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80044aa:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80044ae:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80044b0:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80044b2:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80044b4:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80044b6:	2101      	movs	r1, #1
 80044b8:	61d9      	str	r1, [r3, #28]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80044ba:	62d9      	str	r1, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80044bc:	f7fc fa04 	bl	80008c8 <HAL_PCD_Init>
 80044c0:	b108      	cbz	r0, 80044c6 <USBD_LL_Init+0x3a>
  {
    Error_Handler( );
 80044c2:	f7ff fdcf 	bl	8004064 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80044c6:	2180      	movs	r1, #128	; 0x80
 80044c8:	4807      	ldr	r0, [pc, #28]	; (80044e8 <USBD_LL_Init+0x5c>)
 80044ca:	f7fc fec8 	bl	800125e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	2100      	movs	r1, #0
 80044d2:	4805      	ldr	r0, [pc, #20]	; (80044e8 <USBD_LL_Init+0x5c>)
 80044d4:	f7fc fea2 	bl	800121c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80044d8:	2280      	movs	r2, #128	; 0x80
 80044da:	2101      	movs	r1, #1
 80044dc:	4802      	ldr	r0, [pc, #8]	; (80044e8 <USBD_LL_Init+0x5c>)
 80044de:	f7fc fe9d 	bl	800121c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 80044e2:	2000      	movs	r0, #0
 80044e4:	bd08      	pop	{r3, pc}
 80044e6:	bf00      	nop
 80044e8:	200015e0 	.word	0x200015e0

080044ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80044ec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80044ee:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80044f2:	f7fc fa6e 	bl	80009d2 <HAL_PCD_Start>
 80044f6:	2803      	cmp	r0, #3
 80044f8:	bf9a      	itte	ls
 80044fa:	4b02      	ldrls	r3, [pc, #8]	; (8004504 <USBD_LL_Start+0x18>)
 80044fc:	5c18      	ldrbls	r0, [r3, r0]
 80044fe:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 8004500:	bd08      	pop	{r3, pc}
 8004502:	bf00      	nop
 8004504:	08004a35 	.word	0x08004a35

08004508 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004508:	b510      	push	{r4, lr}
 800450a:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800450c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004510:	4613      	mov	r3, r2
 8004512:	4622      	mov	r2, r4
 8004514:	f7fc fd6c 	bl	8000ff0 <HAL_PCD_EP_Open>
 8004518:	2803      	cmp	r0, #3
 800451a:	bf9a      	itte	ls
 800451c:	4b01      	ldrls	r3, [pc, #4]	; (8004524 <USBD_LL_OpenEP+0x1c>)
 800451e:	5c18      	ldrbls	r0, [r3, r0]
 8004520:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004522:	bd10      	pop	{r4, pc}
 8004524:	08004a35 	.word	0x08004a35

08004528 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004528:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800452a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800452e:	f7fc fd93 	bl	8001058 <HAL_PCD_EP_Close>
 8004532:	2803      	cmp	r0, #3
 8004534:	bf9a      	itte	ls
 8004536:	4b02      	ldrls	r3, [pc, #8]	; (8004540 <USBD_LL_CloseEP+0x18>)
 8004538:	5c18      	ldrbls	r0, [r3, r0]
 800453a:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 800453c:	bd08      	pop	{r3, pc}
 800453e:	bf00      	nop
 8004540:	08004a35 	.word	0x08004a35

08004544 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004544:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004546:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800454a:	f7fc fdfc 	bl	8001146 <HAL_PCD_EP_SetStall>
 800454e:	2803      	cmp	r0, #3
 8004550:	bf9a      	itte	ls
 8004552:	4b02      	ldrls	r3, [pc, #8]	; (800455c <USBD_LL_StallEP+0x18>)
 8004554:	5c18      	ldrbls	r0, [r3, r0]
 8004556:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8004558:	bd08      	pop	{r3, pc}
 800455a:	bf00      	nop
 800455c:	08004a35 	.word	0x08004a35

08004560 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004560:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004562:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004566:	f7fc fe28 	bl	80011ba <HAL_PCD_EP_ClrStall>
 800456a:	2803      	cmp	r0, #3
 800456c:	bf9a      	itte	ls
 800456e:	4b02      	ldrls	r3, [pc, #8]	; (8004578 <USBD_LL_ClearStallEP+0x18>)
 8004570:	5c18      	ldrbls	r0, [r3, r0]
 8004572:	2002      	movhi	r0, #2
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8004574:	bd08      	pop	{r3, pc}
 8004576:	bf00      	nop
 8004578:	08004a35 	.word	0x08004a35

0800457c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800457c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004580:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8004584:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004588:	bf17      	itett	ne
 800458a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800458e:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004592:	fb02 3101 	mlane	r1, r2, r1, r3
 8004596:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800459a:	bf08      	it	eq
 800459c:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 80045a0:	4770      	bx	lr
	...

080045a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80045a4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80045a6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80045aa:	f7fc fd0d 	bl	8000fc8 <HAL_PCD_SetAddress>
 80045ae:	2803      	cmp	r0, #3
 80045b0:	bf9a      	itte	ls
 80045b2:	4b02      	ldrls	r3, [pc, #8]	; (80045bc <USBD_LL_SetUSBAddress+0x18>)
 80045b4:	5c18      	ldrbls	r0, [r3, r0]
 80045b6:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 80045b8:	bd08      	pop	{r3, pc}
 80045ba:	bf00      	nop
 80045bc:	08004a35 	.word	0x08004a35

080045c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80045c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80045c2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80045c6:	f7fc fd9e 	bl	8001106 <HAL_PCD_EP_Transmit>
 80045ca:	2803      	cmp	r0, #3
 80045cc:	bf9a      	itte	ls
 80045ce:	4b02      	ldrls	r3, [pc, #8]	; (80045d8 <USBD_LL_Transmit+0x18>)
 80045d0:	5c18      	ldrbls	r0, [r3, r0]
 80045d2:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 80045d4:	bd08      	pop	{r3, pc}
 80045d6:	bf00      	nop
 80045d8:	08004a35 	.word	0x08004a35

080045dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80045dc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80045de:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80045e2:	f7fc fd64 	bl	80010ae <HAL_PCD_EP_Receive>
 80045e6:	2803      	cmp	r0, #3
 80045e8:	bf9a      	itte	ls
 80045ea:	4b02      	ldrls	r3, [pc, #8]	; (80045f4 <USBD_LL_PrepareReceive+0x18>)
 80045ec:	5c18      	ldrbls	r0, [r3, r0]
 80045ee:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 80045f0:	bd08      	pop	{r3, pc}
 80045f2:	bf00      	nop
 80045f4:	08004a35 	.word	0x08004a35

080045f8 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80045f8:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80045fc:	f7fc bd7b 	b.w	80010f6 <HAL_PCD_EP_GetRxCount>

08004600 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004600:	b510      	push	{r4, lr}
 8004602:	4604      	mov	r4, r0
  switch (msg)
 8004604:	b111      	cbz	r1, 800460c <HAL_PCDEx_LPM_Callback+0xc>
 8004606:	2901      	cmp	r1, #1
 8004608:	d016      	beq.n	8004638 <HAL_PCDEx_LPM_Callback+0x38>
 800460a:	bd10      	pop	{r4, pc}
  {
  case PCD_LPM_L0_ACTIVE:
    if (hpcd->Init.low_power_enable)
 800460c:	6a03      	ldr	r3, [r0, #32]
 800460e:	b133      	cbz	r3, 800461e <HAL_PCDEx_LPM_Callback+0x1e>
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8004610:	f7ff fb40 	bl	8003c94 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004614:	4a12      	ldr	r2, [pc, #72]	; (8004660 <HAL_PCDEx_LPM_Callback+0x60>)
 8004616:	6913      	ldr	r3, [r2, #16]
 8004618:	f023 0306 	bic.w	r3, r3, #6
 800461c:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800461e:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8004620:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8004624:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8004628:	f023 0301 	bic.w	r3, r3, #1
}
 800462c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8004630:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8004634:	f7ff b8b2 	b.w	800379c <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004638:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 800463a:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800463e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 800464a:	f7ff f89e 	bl	800378a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800464e:	6a23      	ldr	r3, [r4, #32]
 8004650:	b123      	cbz	r3, 800465c <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004652:	4a03      	ldr	r2, [pc, #12]	; (8004660 <HAL_PCDEx_LPM_Callback+0x60>)
 8004654:	6913      	ldr	r3, [r2, #16]
 8004656:	f043 0306 	orr.w	r3, r3, #6
 800465a:	6113      	str	r3, [r2, #16]
 800465c:	bd10      	pop	{r4, pc}
 800465e:	bf00      	nop
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8004664:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004666:	4801      	ldr	r0, [pc, #4]	; (800466c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004668:	800b      	strh	r3, [r1, #0]
}
 800466a:	4770      	bx	lr
 800466c:	20000158 	.word	0x20000158

08004670 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8004670:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004672:	4801      	ldr	r0, [pc, #4]	; (8004678 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004674:	800b      	strh	r3, [r1, #0]
}
 8004676:	4770      	bx	lr
 8004678:	2000016c 	.word	0x2000016c

0800467c <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 800467c:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800467e:	4801      	ldr	r0, [pc, #4]	; (8004684 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8004680:	800b      	strh	r3, [r1, #0]
}
 8004682:	4770      	bx	lr
 8004684:	2000014c 	.word	0x2000014c

08004688 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004688:	2300      	movs	r3, #0
{
 800468a:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800468c:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 800468e:	b2dc      	uxtb	r4, r3
 8004690:	42a2      	cmp	r2, r4
 8004692:	d800      	bhi.n	8004696 <IntToUnicode+0xe>
  }
}
 8004694:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8004696:	0f04      	lsrs	r4, r0, #28
    value = value << 4;
 8004698:	0100      	lsls	r0, r0, #4
    if (((value >> 28)) < 0xA)
 800469a:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800469c:	bf94      	ite	ls
 800469e:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80046a0:	3437      	addhi	r4, #55	; 0x37
 80046a2:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80046a6:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80046aa:	3301      	adds	r3, #1
 80046ac:	7065      	strb	r5, [r4, #1]
 80046ae:	e7ee      	b.n	800468e <IntToUnicode+0x6>

080046b0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80046b0:	231a      	movs	r3, #26
{
 80046b2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80046b4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <USBD_FS_SerialStrDescriptor+0x2c>)
 80046b8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80046ba:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80046bc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80046be:	18c0      	adds	r0, r0, r3
 80046c0:	d00a      	beq.n	80046d8 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80046c2:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80046c4:	2208      	movs	r2, #8
 80046c6:	4907      	ldr	r1, [pc, #28]	; (80046e4 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80046c8:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80046ca:	f7ff ffdd 	bl	8004688 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80046ce:	2204      	movs	r2, #4
 80046d0:	4905      	ldr	r1, [pc, #20]	; (80046e8 <USBD_FS_SerialStrDescriptor+0x38>)
 80046d2:	4620      	mov	r0, r4
 80046d4:	f7ff ffd8 	bl	8004688 <IntToUnicode>
}
 80046d8:	4804      	ldr	r0, [pc, #16]	; (80046ec <USBD_FS_SerialStrDescriptor+0x3c>)
 80046da:	bd10      	pop	{r4, pc}
 80046dc:	1ff0f420 	.word	0x1ff0f420
 80046e0:	1ff0f424 	.word	0x1ff0f424
 80046e4:	20000172 	.word	0x20000172
 80046e8:	20000182 	.word	0x20000182
 80046ec:	20000170 	.word	0x20000170

080046f0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80046f0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80046f2:	4c04      	ldr	r4, [pc, #16]	; (8004704 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80046f4:	460a      	mov	r2, r1
 80046f6:	4804      	ldr	r0, [pc, #16]	; (8004708 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80046f8:	4621      	mov	r1, r4
 80046fa:	f7ff fa6d 	bl	8003bd8 <USBD_GetString>
}
 80046fe:	4620      	mov	r0, r4
 8004700:	bd10      	pop	{r4, pc}
 8004702:	bf00      	nop
 8004704:	200019e4 	.word	0x200019e4
 8004708:	08004a52 	.word	0x08004a52

0800470c <USBD_FS_ProductStrDescriptor>:
{
 800470c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800470e:	4c04      	ldr	r4, [pc, #16]	; (8004720 <USBD_FS_ProductStrDescriptor+0x14>)
 8004710:	460a      	mov	r2, r1
 8004712:	4804      	ldr	r0, [pc, #16]	; (8004724 <USBD_FS_ProductStrDescriptor+0x18>)
 8004714:	4621      	mov	r1, r4
 8004716:	f7ff fa5f 	bl	8003bd8 <USBD_GetString>
}
 800471a:	4620      	mov	r0, r4
 800471c:	bd10      	pop	{r4, pc}
 800471e:	bf00      	nop
 8004720:	200019e4 	.word	0x200019e4
 8004724:	08004a5c 	.word	0x08004a5c

08004728 <USBD_FS_ConfigStrDescriptor>:
{
 8004728:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800472a:	4c04      	ldr	r4, [pc, #16]	; (800473c <USBD_FS_ConfigStrDescriptor+0x14>)
 800472c:	460a      	mov	r2, r1
 800472e:	4804      	ldr	r0, [pc, #16]	; (8004740 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004730:	4621      	mov	r1, r4
 8004732:	f7ff fa51 	bl	8003bd8 <USBD_GetString>
}
 8004736:	4620      	mov	r0, r4
 8004738:	bd10      	pop	{r4, pc}
 800473a:	bf00      	nop
 800473c:	200019e4 	.word	0x200019e4
 8004740:	08004a39 	.word	0x08004a39

08004744 <USBD_FS_InterfaceStrDescriptor>:
{
 8004744:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004746:	4c04      	ldr	r4, [pc, #16]	; (8004758 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004748:	460a      	mov	r2, r1
 800474a:	4804      	ldr	r0, [pc, #16]	; (800475c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800474c:	4621      	mov	r1, r4
 800474e:	f7ff fa43 	bl	8003bd8 <USBD_GetString>
}
 8004752:	4620      	mov	r0, r4
 8004754:	bd10      	pop	{r4, pc}
 8004756:	bf00      	nop
 8004758:	200019e4 	.word	0x200019e4
 800475c:	08004a44 	.word	0x08004a44

08004760 <print_hello_world>:
 *
 *  @param (none)
 *  @return (none)
 */
void print_hello_world (void)
{
 8004760:	b500      	push	{lr}
 8004762:	b089      	sub	sp, #36	; 0x24
	  char buf[30];
	  sprintf(buf,"Hello World says SPV!\n");
 8004764:	4908      	ldr	r1, [pc, #32]	; (8004788 <print_hello_world+0x28>)
 8004766:	4668      	mov	r0, sp
 8004768:	f000 f93a 	bl	80049e0 <strcpy>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf),1000);
 800476c:	4668      	mov	r0, sp
 800476e:	f7fb fd63 	bl	8000238 <strlen>
 8004772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004776:	b282      	uxth	r2, r0
 8004778:	4669      	mov	r1, sp
 800477a:	4804      	ldr	r0, [pc, #16]	; (800478c <print_hello_world+0x2c>)
 800477c:	f7fe f814 	bl	80027a8 <HAL_UART_Transmit>
}
 8004780:	b009      	add	sp, #36	; 0x24
 8004782:	f85d fb04 	ldr.w	pc, [sp], #4
 8004786:	bf00      	nop
 8004788:	08004a70 	.word	0x08004a70
 800478c:	20000220 	.word	0x20000220

08004790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004794:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004796:	e003      	b.n	80047a0 <LoopCopyDataInit>

08004798 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800479a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800479c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800479e:	3104      	adds	r1, #4

080047a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80047a0:	480b      	ldr	r0, [pc, #44]	; (80047d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80047a2:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80047a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80047a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80047a8:	d3f6      	bcc.n	8004798 <CopyDataInit>
  ldr  r2, =_sbss
 80047aa:	4a0b      	ldr	r2, [pc, #44]	; (80047d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80047ac:	e002      	b.n	80047b4 <LoopFillZerobss>

080047ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80047ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80047b0:	f842 3b04 	str.w	r3, [r2], #4

080047b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80047b4:	4b09      	ldr	r3, [pc, #36]	; (80047dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80047b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80047b8:	d3f9      	bcc.n	80047ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80047ba:	f7ff fd51 	bl	8004260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047be:	f000 f817 	bl	80047f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047c2:	f7ff fac1 	bl	8003d48 <main>
  bx  lr    
 80047c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047c8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80047cc:	08004a98 	.word	0x08004a98
  ldr  r0, =_sdata
 80047d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80047d4:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 80047d8:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80047dc:	20001be8 	.word	0x20001be8

080047e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047e0:	e7fe      	b.n	80047e0 <ADC_IRQHandler>
	...

080047e4 <__errno>:
 80047e4:	4b01      	ldr	r3, [pc, #4]	; (80047ec <__errno+0x8>)
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	2000018c 	.word	0x2000018c

080047f0 <__libc_init_array>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	4e0d      	ldr	r6, [pc, #52]	; (8004828 <__libc_init_array+0x38>)
 80047f4:	4c0d      	ldr	r4, [pc, #52]	; (800482c <__libc_init_array+0x3c>)
 80047f6:	1ba4      	subs	r4, r4, r6
 80047f8:	10a4      	asrs	r4, r4, #2
 80047fa:	2500      	movs	r5, #0
 80047fc:	42a5      	cmp	r5, r4
 80047fe:	d109      	bne.n	8004814 <__libc_init_array+0x24>
 8004800:	4e0b      	ldr	r6, [pc, #44]	; (8004830 <__libc_init_array+0x40>)
 8004802:	4c0c      	ldr	r4, [pc, #48]	; (8004834 <__libc_init_array+0x44>)
 8004804:	f000 f8f6 	bl	80049f4 <_init>
 8004808:	1ba4      	subs	r4, r4, r6
 800480a:	10a4      	asrs	r4, r4, #2
 800480c:	2500      	movs	r5, #0
 800480e:	42a5      	cmp	r5, r4
 8004810:	d105      	bne.n	800481e <__libc_init_array+0x2e>
 8004812:	bd70      	pop	{r4, r5, r6, pc}
 8004814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004818:	4798      	blx	r3
 800481a:	3501      	adds	r5, #1
 800481c:	e7ee      	b.n	80047fc <__libc_init_array+0xc>
 800481e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004822:	4798      	blx	r3
 8004824:	3501      	adds	r5, #1
 8004826:	e7f2      	b.n	800480e <__libc_init_array+0x1e>
 8004828:	08004a90 	.word	0x08004a90
 800482c:	08004a90 	.word	0x08004a90
 8004830:	08004a90 	.word	0x08004a90
 8004834:	08004a94 	.word	0x08004a94

08004838 <malloc>:
 8004838:	4b02      	ldr	r3, [pc, #8]	; (8004844 <malloc+0xc>)
 800483a:	4601      	mov	r1, r0
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	f000 b861 	b.w	8004904 <_malloc_r>
 8004842:	bf00      	nop
 8004844:	2000018c 	.word	0x2000018c

08004848 <free>:
 8004848:	4b02      	ldr	r3, [pc, #8]	; (8004854 <free+0xc>)
 800484a:	4601      	mov	r1, r0
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	f000 b80b 	b.w	8004868 <_free_r>
 8004852:	bf00      	nop
 8004854:	2000018c 	.word	0x2000018c

08004858 <memset>:
 8004858:	4402      	add	r2, r0
 800485a:	4603      	mov	r3, r0
 800485c:	4293      	cmp	r3, r2
 800485e:	d100      	bne.n	8004862 <memset+0xa>
 8004860:	4770      	bx	lr
 8004862:	f803 1b01 	strb.w	r1, [r3], #1
 8004866:	e7f9      	b.n	800485c <memset+0x4>

08004868 <_free_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4605      	mov	r5, r0
 800486c:	2900      	cmp	r1, #0
 800486e:	d045      	beq.n	80048fc <_free_r+0x94>
 8004870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004874:	1f0c      	subs	r4, r1, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	bfb8      	it	lt
 800487a:	18e4      	addlt	r4, r4, r3
 800487c:	f000 f8b8 	bl	80049f0 <__malloc_lock>
 8004880:	4a1f      	ldr	r2, [pc, #124]	; (8004900 <_free_r+0x98>)
 8004882:	6813      	ldr	r3, [r2, #0]
 8004884:	4610      	mov	r0, r2
 8004886:	b933      	cbnz	r3, 8004896 <_free_r+0x2e>
 8004888:	6063      	str	r3, [r4, #4]
 800488a:	6014      	str	r4, [r2, #0]
 800488c:	4628      	mov	r0, r5
 800488e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004892:	f000 b8ae 	b.w	80049f2 <__malloc_unlock>
 8004896:	42a3      	cmp	r3, r4
 8004898:	d90c      	bls.n	80048b4 <_free_r+0x4c>
 800489a:	6821      	ldr	r1, [r4, #0]
 800489c:	1862      	adds	r2, r4, r1
 800489e:	4293      	cmp	r3, r2
 80048a0:	bf04      	itt	eq
 80048a2:	681a      	ldreq	r2, [r3, #0]
 80048a4:	685b      	ldreq	r3, [r3, #4]
 80048a6:	6063      	str	r3, [r4, #4]
 80048a8:	bf04      	itt	eq
 80048aa:	1852      	addeq	r2, r2, r1
 80048ac:	6022      	streq	r2, [r4, #0]
 80048ae:	6004      	str	r4, [r0, #0]
 80048b0:	e7ec      	b.n	800488c <_free_r+0x24>
 80048b2:	4613      	mov	r3, r2
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	b10a      	cbz	r2, 80048bc <_free_r+0x54>
 80048b8:	42a2      	cmp	r2, r4
 80048ba:	d9fa      	bls.n	80048b2 <_free_r+0x4a>
 80048bc:	6819      	ldr	r1, [r3, #0]
 80048be:	1858      	adds	r0, r3, r1
 80048c0:	42a0      	cmp	r0, r4
 80048c2:	d10b      	bne.n	80048dc <_free_r+0x74>
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	4401      	add	r1, r0
 80048c8:	1858      	adds	r0, r3, r1
 80048ca:	4282      	cmp	r2, r0
 80048cc:	6019      	str	r1, [r3, #0]
 80048ce:	d1dd      	bne.n	800488c <_free_r+0x24>
 80048d0:	6810      	ldr	r0, [r2, #0]
 80048d2:	6852      	ldr	r2, [r2, #4]
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	4401      	add	r1, r0
 80048d8:	6019      	str	r1, [r3, #0]
 80048da:	e7d7      	b.n	800488c <_free_r+0x24>
 80048dc:	d902      	bls.n	80048e4 <_free_r+0x7c>
 80048de:	230c      	movs	r3, #12
 80048e0:	602b      	str	r3, [r5, #0]
 80048e2:	e7d3      	b.n	800488c <_free_r+0x24>
 80048e4:	6820      	ldr	r0, [r4, #0]
 80048e6:	1821      	adds	r1, r4, r0
 80048e8:	428a      	cmp	r2, r1
 80048ea:	bf04      	itt	eq
 80048ec:	6811      	ldreq	r1, [r2, #0]
 80048ee:	6852      	ldreq	r2, [r2, #4]
 80048f0:	6062      	str	r2, [r4, #4]
 80048f2:	bf04      	itt	eq
 80048f4:	1809      	addeq	r1, r1, r0
 80048f6:	6021      	streq	r1, [r4, #0]
 80048f8:	605c      	str	r4, [r3, #4]
 80048fa:	e7c7      	b.n	800488c <_free_r+0x24>
 80048fc:	bd38      	pop	{r3, r4, r5, pc}
 80048fe:	bf00      	nop
 8004900:	20000214 	.word	0x20000214

08004904 <_malloc_r>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	1ccd      	adds	r5, r1, #3
 8004908:	f025 0503 	bic.w	r5, r5, #3
 800490c:	3508      	adds	r5, #8
 800490e:	2d0c      	cmp	r5, #12
 8004910:	bf38      	it	cc
 8004912:	250c      	movcc	r5, #12
 8004914:	2d00      	cmp	r5, #0
 8004916:	4606      	mov	r6, r0
 8004918:	db01      	blt.n	800491e <_malloc_r+0x1a>
 800491a:	42a9      	cmp	r1, r5
 800491c:	d903      	bls.n	8004926 <_malloc_r+0x22>
 800491e:	230c      	movs	r3, #12
 8004920:	6033      	str	r3, [r6, #0]
 8004922:	2000      	movs	r0, #0
 8004924:	bd70      	pop	{r4, r5, r6, pc}
 8004926:	f000 f863 	bl	80049f0 <__malloc_lock>
 800492a:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <_malloc_r+0xb4>)
 800492c:	6814      	ldr	r4, [r2, #0]
 800492e:	4621      	mov	r1, r4
 8004930:	b991      	cbnz	r1, 8004958 <_malloc_r+0x54>
 8004932:	4c22      	ldr	r4, [pc, #136]	; (80049bc <_malloc_r+0xb8>)
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	b91b      	cbnz	r3, 8004940 <_malloc_r+0x3c>
 8004938:	4630      	mov	r0, r6
 800493a:	f000 f841 	bl	80049c0 <_sbrk_r>
 800493e:	6020      	str	r0, [r4, #0]
 8004940:	4629      	mov	r1, r5
 8004942:	4630      	mov	r0, r6
 8004944:	f000 f83c 	bl	80049c0 <_sbrk_r>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d126      	bne.n	800499a <_malloc_r+0x96>
 800494c:	230c      	movs	r3, #12
 800494e:	6033      	str	r3, [r6, #0]
 8004950:	4630      	mov	r0, r6
 8004952:	f000 f84e 	bl	80049f2 <__malloc_unlock>
 8004956:	e7e4      	b.n	8004922 <_malloc_r+0x1e>
 8004958:	680b      	ldr	r3, [r1, #0]
 800495a:	1b5b      	subs	r3, r3, r5
 800495c:	d41a      	bmi.n	8004994 <_malloc_r+0x90>
 800495e:	2b0b      	cmp	r3, #11
 8004960:	d90f      	bls.n	8004982 <_malloc_r+0x7e>
 8004962:	600b      	str	r3, [r1, #0]
 8004964:	50cd      	str	r5, [r1, r3]
 8004966:	18cc      	adds	r4, r1, r3
 8004968:	4630      	mov	r0, r6
 800496a:	f000 f842 	bl	80049f2 <__malloc_unlock>
 800496e:	f104 000b 	add.w	r0, r4, #11
 8004972:	1d23      	adds	r3, r4, #4
 8004974:	f020 0007 	bic.w	r0, r0, #7
 8004978:	1ac3      	subs	r3, r0, r3
 800497a:	d01b      	beq.n	80049b4 <_malloc_r+0xb0>
 800497c:	425a      	negs	r2, r3
 800497e:	50e2      	str	r2, [r4, r3]
 8004980:	bd70      	pop	{r4, r5, r6, pc}
 8004982:	428c      	cmp	r4, r1
 8004984:	bf0d      	iteet	eq
 8004986:	6863      	ldreq	r3, [r4, #4]
 8004988:	684b      	ldrne	r3, [r1, #4]
 800498a:	6063      	strne	r3, [r4, #4]
 800498c:	6013      	streq	r3, [r2, #0]
 800498e:	bf18      	it	ne
 8004990:	460c      	movne	r4, r1
 8004992:	e7e9      	b.n	8004968 <_malloc_r+0x64>
 8004994:	460c      	mov	r4, r1
 8004996:	6849      	ldr	r1, [r1, #4]
 8004998:	e7ca      	b.n	8004930 <_malloc_r+0x2c>
 800499a:	1cc4      	adds	r4, r0, #3
 800499c:	f024 0403 	bic.w	r4, r4, #3
 80049a0:	42a0      	cmp	r0, r4
 80049a2:	d005      	beq.n	80049b0 <_malloc_r+0xac>
 80049a4:	1a21      	subs	r1, r4, r0
 80049a6:	4630      	mov	r0, r6
 80049a8:	f000 f80a 	bl	80049c0 <_sbrk_r>
 80049ac:	3001      	adds	r0, #1
 80049ae:	d0cd      	beq.n	800494c <_malloc_r+0x48>
 80049b0:	6025      	str	r5, [r4, #0]
 80049b2:	e7d9      	b.n	8004968 <_malloc_r+0x64>
 80049b4:	bd70      	pop	{r4, r5, r6, pc}
 80049b6:	bf00      	nop
 80049b8:	20000214 	.word	0x20000214
 80049bc:	20000218 	.word	0x20000218

080049c0 <_sbrk_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4c06      	ldr	r4, [pc, #24]	; (80049dc <_sbrk_r+0x1c>)
 80049c4:	2300      	movs	r3, #0
 80049c6:	4605      	mov	r5, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	6023      	str	r3, [r4, #0]
 80049cc:	f7ff fc2e 	bl	800422c <_sbrk>
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	d102      	bne.n	80049da <_sbrk_r+0x1a>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	b103      	cbz	r3, 80049da <_sbrk_r+0x1a>
 80049d8:	602b      	str	r3, [r5, #0]
 80049da:	bd38      	pop	{r3, r4, r5, pc}
 80049dc:	20001be4 	.word	0x20001be4

080049e0 <strcpy>:
 80049e0:	4603      	mov	r3, r0
 80049e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049e6:	f803 2b01 	strb.w	r2, [r3], #1
 80049ea:	2a00      	cmp	r2, #0
 80049ec:	d1f9      	bne.n	80049e2 <strcpy+0x2>
 80049ee:	4770      	bx	lr

080049f0 <__malloc_lock>:
 80049f0:	4770      	bx	lr

080049f2 <__malloc_unlock>:
 80049f2:	4770      	bx	lr

080049f4 <_init>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	bf00      	nop
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr

08004a00 <_fini>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr
